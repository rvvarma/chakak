/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
export class GtOrderByPipe {
    constructor() {
        /**
         * Return property
         */
        this.getProperty = function (array, key) {
            for (let /** @type {?} */ i = 0; i < array.length; i++) {
                if (array[i].objectKey === key) {
                    return array[i];
                }
            }
        };
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    static _orderByComparator(a, b) {
        // sort boolean values as strings
        if (typeof a === 'boolean') {
            a = a.toString();
        }
        if (typeof b === 'boolean') {
            b = b.toString();
        }
        if (isNaN(parseFloat(a)) ||
            !isFinite(a) ||
            (isNaN(parseFloat(b)) || !isFinite(b))) {
            if (b === null ||
                (typeof b === 'undefined' && (a !== null && typeof a !== 'undefined'))) {
                return 1;
            }
            if (a === null ||
                (typeof a === 'undefined' && (b !== null && typeof b !== 'undefined'))) {
                return -1;
            }
            // isn't a number so lowercase the string to properly compare
            try {
                if (a.toLowerCase() < b.toLowerCase()) {
                    return -1;
                }
                if (a.toLowerCase() > b.toLowerCase()) {
                    return 1;
                }
            }
            catch (/** @type {?} */ error) {
                return 0;
            }
        }
        else {
            // parse strings as numbers to compare properly
            if (parseFloat(a) < parseFloat(b)) {
                return -1;
            }
            if (parseFloat(a) > parseFloat(b)) {
                return 1;
            }
        }
        return 0; // equal each other
    }
    /**
     * Return sort function
     * @param {?} field
     * @return {?}
     */
    getSortFunction(field) {
        if (!field) {
            // console.log('error trying to sort undefined field');
            return false;
        }
        if (typeof field.sort === 'function') {
            return field.sort;
        }
        else if (typeof field.value === 'function') {
            return field.value;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} input
     * @param {?} sortByProperties
     * @param {?} fields
     * @param {?} refreshSorting
     * @param {?} refreshData
     * @return {?}
     */
    transform(input, sortByProperties, fields, refreshSorting, refreshData) {
        if (!Array.isArray(input) || input === null) {
            return input;
        }
        if (!Array.isArray(sortByProperties) ||
            (Array.isArray(sortByProperties) && sortByProperties.length === 1)) {
            const /** @type {?} */ propertyToCheck = sortByProperties[0];
            const /** @type {?} */ desc = propertyToCheck.substr(0, 1) === '-';
            // basic array
            if (!propertyToCheck ||
                propertyToCheck === '-' ||
                propertyToCheck === '+') {
                return !desc ? input.sort() : input.sort().reverse();
            }
            else {
                const /** @type {?} */ property = propertyToCheck.substr(0, 1) === '+' ||
                    propertyToCheck.substr(0, 1) === '-'
                    ? propertyToCheck.substr(1)
                    : propertyToCheck;
                // check if custom sort function is defined
                const /** @type {?} */ sortFunction = this.getSortFunction(this.getProperty(fields, property));
                // console.log(property);
                return input.sort(function (a, b) {
                    // use custom sort function if one is defined
                    const /** @type {?} */ propertyA = sortFunction === false
                        ? property === '$$gtRowId'
                            ? +a.$$gtRowId.split('_')[0]
                            : a[property]
                        : sortFunction(a);
                    const /** @type {?} */ propertyB = sortFunction === false
                        ? property === '$$gtRowId'
                            ? +b.$$gtRowId.split('_')[0]
                            : b[property]
                        : sortFunction(b);
                    // if both values are undefined...
                    if (typeof propertyA === 'undefined' &&
                        typeof propertyB === 'undefined') {
                        // ...skip comparison
                        return;
                    }
                    return !desc
                        ? GtOrderByPipe._orderByComparator(propertyA, propertyB)
                        : -GtOrderByPipe._orderByComparator(propertyA, propertyB);
                });
            }
        }
        else {
            // loop over property of the array in order and sort
            return input.sort((a, b) => {
                // console.log('multiple');
                for (let /** @type {?} */ i = 0; i < sortByProperties.length; i++) {
                    const /** @type {?} */ desc = sortByProperties[i].substr(0, 1) === '-';
                    const /** @type {?} */ property = sortByProperties[i].substr(0, 1) === '+' ||
                        sortByProperties[i].substr(0, 1) === '-'
                        ? sortByProperties[i].substr(1)
                        : sortByProperties[i];
                    // console.log(property);
                    // check if custom sort function is defined
                    const /** @type {?} */ sortFunction = this.getSortFunction(this.getProperty(fields, property));
                    // use custom sort function if one is defined
                    const /** @type {?} */ propertyA = sortFunction === false
                        ? property === '$$gtRowId'
                            ? +a.$$gtRowId.split('_')[0]
                            : a[property]
                        : sortFunction(a);
                    const /** @type {?} */ propertyB = sortFunction === false
                        ? property === '$$gtRowId'
                            ? +b.$$gtRowId.split('_')[0]
                            : b[property]
                        : sortFunction(b);
                    const /** @type {?} */ comparison = !desc
                        ? GtOrderByPipe._orderByComparator(propertyA, propertyB)
                        : -GtOrderByPipe._orderByComparator(propertyA, propertyB);
                    // don't return 0 yet in case of needing to sort by next property
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0; // equal each other
            });
        }
    }
}
GtOrderByPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtOrderBy'
            },] },
];
function GtOrderByPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtOrderByPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtOrderByPipe.ctorParameters;
    /**
     * Return property
     * @type {?}
     */
    GtOrderByPipe.prototype.getProperty;
}

//# sourceMappingURL=data:application/json;base64,