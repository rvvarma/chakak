/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
export class GtChunkPipe {
    /**
     * @param {?} array
     * @param {?} gtInfo
     * @param {?} chunkSize
     * @param {?} page
     * @param {?} refreshPageArray
     * @param {?} refreshData
     * @param {?} gtEvent
     * @param {?} data
     * @return {?}
     */
    transform(array, gtInfo, chunkSize, page, refreshPageArray, refreshData, gtEvent, data) {
        if (!Array.isArray(array)) {
            return array;
        }
        data.exportData = array; // store data for export
        const /** @type {?} */ PAGES = [];
        const /** @type {?} */ ENTRIES = array.length;
        for (let /** @type {?} */ i = 0; i < ENTRIES; i += chunkSize) {
            PAGES.push(array.slice(i, i + chunkSize));
        }
        gtInfo.visibleRecords = !PAGES[page - 1] ? [] : [...PAGES[page - 1]]; // add visible rows
        gtInfo.pageTotal = PAGES.length; // add number of pages
        setTimeout(() => gtEvent.emit({
            name: 'gt-info',
            value: gtInfo
        }), 0);
        return PAGES[page - 1];
    }
}
GtChunkPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtChunk'
            },] },
];
function GtChunkPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtChunkPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtChunkPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtY2h1bmsucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWdlbmVyaWMtdGFibGUvY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL2d0LWNodW5rLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQStCLE1BQU0sZUFBZSxDQUFDO0FBTWxFLE1BQU07Ozs7Ozs7Ozs7OztJQUNMLFNBQVMsQ0FDUixLQUFZLEVBQ1osTUFBcUIsRUFDckIsU0FBaUIsRUFDakIsSUFBWSxFQUNaLGdCQUF5QixFQUN6QixXQUFtQixFQUNuQixPQUE4QixFQUM5QixJQUFnQztRQUVoQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQixPQUFPLEtBQUssQ0FBQztTQUNiO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFFeEIsdUJBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNqQix1QkFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUU3QixLQUFLLHFCQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sRUFBRSxDQUFDLElBQUksU0FBUyxFQUFFO1lBQzVDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDMUM7UUFDRCxNQUFNLENBQUMsY0FBYyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUVoQyxVQUFVLENBQ1QsR0FBRyxFQUFFLENBQ0osT0FBTyxDQUFDLElBQUksQ0FBQztZQUNaLElBQUksRUFBRSxTQUFTO1lBQ2YsS0FBSyxFQUFFLE1BQU07U0FDYixDQUFDLEVBQ0gsQ0FBQyxDQUNELENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdkI7OztZQXJDRCxJQUFJLFNBQUM7Z0JBQ0wsSUFBSSxFQUFFLFNBQVM7YUFDZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHdEluZm9ybWF0aW9uLCBHdEV2ZW50IH0gZnJvbSAnLi4nO1xyXG5cclxuQFBpcGUoe1xyXG5cdG5hbWU6ICdndENodW5rJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RDaHVua1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHR0cmFuc2Zvcm0oXHJcblx0XHRhcnJheTogYW55W10sXHJcblx0XHRndEluZm86IEd0SW5mb3JtYXRpb24sXHJcblx0XHRjaHVua1NpemU6IG51bWJlcixcclxuXHRcdHBhZ2U6IG51bWJlcixcclxuXHRcdHJlZnJlc2hQYWdlQXJyYXk6IGJvb2xlYW4sXHJcblx0XHRyZWZyZXNoRGF0YTogbnVtYmVyLFxyXG5cdFx0Z3RFdmVudDogRXZlbnRFbWl0dGVyPEd0RXZlbnQ+LFxyXG5cdFx0ZGF0YTogeyBleHBvcnREYXRhOiBBcnJheTxhbnk+IH1cclxuXHQpOiBhbnlbXSB7XHJcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XHJcblx0XHRcdHJldHVybiBhcnJheTtcclxuXHRcdH1cclxuXHRcdGRhdGEuZXhwb3J0RGF0YSA9IGFycmF5OyAvLyBzdG9yZSBkYXRhIGZvciBleHBvcnRcclxuXHJcblx0XHRjb25zdCBQQUdFUyA9IFtdO1xyXG5cdFx0Y29uc3QgRU5UUklFUyA9IGFycmF5Lmxlbmd0aDtcclxuXHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IEVOVFJJRVM7IGkgKz0gY2h1bmtTaXplKSB7XHJcblx0XHRcdFBBR0VTLnB1c2goYXJyYXkuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSkpO1xyXG5cdFx0fVxyXG5cdFx0Z3RJbmZvLnZpc2libGVSZWNvcmRzID0gIVBBR0VTW3BhZ2UgLSAxXSA/IFtdIDogWy4uLlBBR0VTW3BhZ2UgLSAxXV07IC8vIGFkZCB2aXNpYmxlIHJvd3NcclxuXHRcdGd0SW5mby5wYWdlVG90YWwgPSBQQUdFUy5sZW5ndGg7IC8vIGFkZCBudW1iZXIgb2YgcGFnZXNcclxuXHJcblx0XHRzZXRUaW1lb3V0KFxyXG5cdFx0XHQoKSA9PlxyXG5cdFx0XHRcdGd0RXZlbnQuZW1pdCh7XHJcblx0XHRcdFx0XHRuYW1lOiAnZ3QtaW5mbycsXHJcblx0XHRcdFx0XHR2YWx1ZTogZ3RJbmZvXHJcblx0XHRcdFx0fSksXHJcblx0XHRcdDBcclxuXHRcdCk7XHJcblx0XHRyZXR1cm4gUEFHRVNbcGFnZSAtIDFdO1xyXG5cdH1cclxufVxyXG4iXX0=