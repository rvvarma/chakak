/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
export class GtVisiblePipe {
    constructor() {
        /**
         * Sort by column order
         */
        this.getColumnOrder = function (a, b) {
            if (a.columnOrder < b.columnOrder) {
                return -1;
            }
            if (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {
                return 1;
            }
            return 0;
        };
    }
    /**
     * @param {?} array
     * @param {?} settings
     * @param {?=} refreshPipe
     * @return {?}
     */
    transform(array, settings, refreshPipe) {
        const /** @type {?} */ visibleColumns = settings
            .sort(this.getColumnOrder)
            .map((setting) => {
            if (setting.visible !== false && setting.enabled !== false) {
                return setting.objectKey;
            }
        });
        return array
            .filter((column) => {
            return visibleColumns.indexOf(column.objectKey) !== -1;
        })
            .sort(function (a, b) {
            return visibleColumns.indexOf(a.objectKey) <
                visibleColumns.indexOf(b.objectKey)
                ? -1
                : 1;
        });
    }
}
GtVisiblePipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtVisible'
            },] },
];
function GtVisiblePipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtVisiblePipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtVisiblePipe.ctorParameters;
    /**
     * Sort by column order
     * @type {?}
     */
    GtVisiblePipe.prototype.getColumnOrder;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtdmlzaWJsZS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGFuZ3VsYXItZ2VuZXJpYy10YWJsZS9jb3JlLyIsInNvdXJjZXMiOlsicGlwZXMvZ3QtdmlzaWJsZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFRcEQsTUFBTTs7Ozs7OEJBR29CLFVBQVMsQ0FBTSxFQUFFLENBQU07WUFDL0MsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxXQUFXLEVBQUU7Z0JBQ2xDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDVjtZQUNELElBQUksQ0FBQyxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsV0FBVyxJQUFJLE9BQU8sQ0FBQyxDQUFDLFdBQVcsS0FBSyxXQUFXLEVBQUU7Z0JBQzFFLE9BQU8sQ0FBQyxDQUFDO2FBQ1Q7WUFDRCxPQUFPLENBQUMsQ0FBQztTQUNUOzs7Ozs7OztJQUVELFNBQVMsQ0FDUixLQUFpQixFQUNqQixRQUFnQyxFQUNoQyxXQUFxQjtRQUVyQix1QkFBTSxjQUFjLEdBQUcsUUFBUTthQUM3QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUN6QixHQUFHLENBQUMsQ0FBQyxPQUF3QixFQUFFLEVBQUU7WUFDakMsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRTtnQkFDM0QsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDO2FBQ3pCO1NBQ0QsQ0FBQyxDQUFDO1FBRUosT0FBTyxLQUFLO2FBQ1YsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDdkIsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUN2RCxDQUFDO2FBQ0QsSUFBSSxDQUFDLFVBQVMsQ0FBQyxFQUFFLENBQUM7WUFDbEIsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7Z0JBQ3pDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDbkMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDSixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ0wsQ0FBQyxDQUFDO0tBQ0o7OztZQXZDRCxJQUFJLFNBQUM7Z0JBQ0wsSUFBSSxFQUFFLFdBQVc7YUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEd0Q29uZmlnRmllbGQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2d0LWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IEd0Q29uZmlnU2V0dGluZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3QtY29uZmlnLXNldHRpbmcnO1xyXG5pbXBvcnQgeyBHdFJvdyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3Qtcm93JztcclxuXHJcbkBQaXBlKHtcclxuXHRuYW1lOiAnZ3RWaXNpYmxlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RWaXNpYmxlUGlwZTxSIGV4dGVuZHMgR3RSb3c+IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblx0Ly8gVE9ETzogbW92ZSB0byBoZWxwZXIgZnVuY3Rpb25zXHJcblx0LyoqIFNvcnQgYnkgY29sdW1uIG9yZGVyICovXHJcblx0cHJpdmF0ZSBnZXRDb2x1bW5PcmRlciA9IGZ1bmN0aW9uKGE6IGFueSwgYjogYW55KSB7XHJcblx0XHRpZiAoYS5jb2x1bW5PcmRlciA8IGIuY29sdW1uT3JkZXIpIHtcclxuXHRcdFx0cmV0dXJuIC0xO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGEuY29sdW1uT3JkZXIgPiBiLmNvbHVtbk9yZGVyIHx8IHR5cGVvZiBhLmNvbHVtbk9yZGVyID09PSAndW5kZWZpbmVkJykge1xyXG5cdFx0XHRyZXR1cm4gMTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH07XHJcblxyXG5cdHRyYW5zZm9ybShcclxuXHRcdGFycmF5OiBBcnJheTxhbnk+LFxyXG5cdFx0c2V0dGluZ3M6IEFycmF5PEd0Q29uZmlnU2V0dGluZz4sXHJcblx0XHRyZWZyZXNoUGlwZT86IGJvb2xlYW5cclxuXHQpOiBBcnJheTxHdENvbmZpZ0ZpZWxkPFIsIGFueT4+IHwgQXJyYXk8R3RDb25maWdTZXR0aW5nPiB7XHJcblx0XHRjb25zdCB2aXNpYmxlQ29sdW1ucyA9IHNldHRpbmdzXHJcblx0XHRcdC5zb3J0KHRoaXMuZ2V0Q29sdW1uT3JkZXIpXHJcblx0XHRcdC5tYXAoKHNldHRpbmc6IEd0Q29uZmlnU2V0dGluZykgPT4ge1xyXG5cdFx0XHRcdGlmIChzZXR0aW5nLnZpc2libGUgIT09IGZhbHNlICYmIHNldHRpbmcuZW5hYmxlZCAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiBzZXR0aW5nLm9iamVjdEtleTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBhcnJheVxyXG5cdFx0XHQuZmlsdGVyKChjb2x1bW46IGFueSkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB2aXNpYmxlQ29sdW1ucy5pbmRleE9mKGNvbHVtbi5vYmplY3RLZXkpICE9PSAtMTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0XHRcdHJldHVybiB2aXNpYmxlQ29sdW1ucy5pbmRleE9mKGEub2JqZWN0S2V5KSA8XHJcblx0XHRcdFx0XHR2aXNpYmxlQ29sdW1ucy5pbmRleE9mKGIub2JqZWN0S2V5KVxyXG5cdFx0XHRcdFx0PyAtMVxyXG5cdFx0XHRcdFx0OiAxO1xyXG5cdFx0XHR9KTtcclxuXHR9XHJcbn1cclxuIl19