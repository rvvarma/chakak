/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
export class GtHighlightPipe {
    /**
     * @param {?} sanitizer
     */
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} text
     * @param {?} searchTerm
     * @return {?}
     */
    transform(text, searchTerm) {
        const /** @type {?} */ haystackAlwaysString = text + '';
        let /** @type {?} */ highlightedText = haystackAlwaysString; // fallback
        let /** @type {?} */ searchPattern;
        try {
            searchPattern = new RegExp('(' +
                searchTerm
                    .toLowerCase()
                    .match(/".*?"|[^ ]+/g) // extract words
                    .map(needle => needle.replace(/"(.*?)"/, '$1') // strip away '"'
                )
                    .join('|') + // combine words
                ')', 'ig');
        }
        catch (/** @type {?} */ error) {
            return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
        }
        const /** @type {?} */ containsTagPattern = /(<.*?>)(.*)(<\/.*?>)/gi;
        const /** @type {?} */ containsTagMatches = containsTagPattern.exec(haystackAlwaysString);
        if (containsTagMatches) {
            // tag exists in haystack
            highlightedText =
                containsTagMatches[1] +
                    containsTagMatches[2].replace(searchPattern, '<span class="gt-highlight-search">$1</span>') +
                    containsTagMatches[3];
        }
        else {
            highlightedText = haystackAlwaysString.replace(searchPattern, '<span class="gt-highlight-search">$1</span>');
        }
        return this.sanitizer.bypassSecurityTrustHtml(highlightedText);
    }
}
GtHighlightPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtHighlight'
            },] },
];
/** @nocollapse */
GtHighlightPipe.ctorParameters = () => [
    { type: DomSanitizer, },
];
function GtHighlightPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtHighlightPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtHighlightPipe.ctorParameters;
    /** @type {?} */
    GtHighlightPipe.prototype.sanitizer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtaGlnaGxpZ2h0LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1oaWdobGlnaHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBS25FLE1BQU07Ozs7SUFDTCxZQUFvQixTQUF1QjtRQUF2QixjQUFTLEdBQVQsU0FBUyxDQUFjO0tBQUk7Ozs7OztJQUUvQyxTQUFTLENBQUMsSUFBWSxFQUFFLFVBQWtCO1FBQ3pDLHVCQUFNLG9CQUFvQixHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDdkMscUJBQUksZUFBZSxHQUFHLG9CQUFvQixDQUFDO1FBRTNDLHFCQUFJLGFBQWEsQ0FBQztRQUNsQixJQUFJO1lBQ0gsYUFBYSxHQUFHLElBQUksTUFBTSxDQUN6QixHQUFHO2dCQUNILFVBQVU7cUJBQ1IsV0FBVyxFQUFFO3FCQUNiLEtBQUssQ0FBQyxjQUFjLENBQUM7cUJBQ3JCLEdBQUcsQ0FDSCxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztpQkFDekM7cUJBQ0EsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQjtnQkFDN0IsR0FBRyxFQUNKLElBQUksQ0FDSixDQUFDO1NBQ0Y7UUFBQyx3QkFBTyxLQUFLLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDL0Q7UUFFRCx1QkFBTSxrQkFBa0IsR0FBRyx3QkFBd0IsQ0FBQztRQUNwRCx1QkFBTSxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUV6RSxJQUFJLGtCQUFrQixFQUFFOztZQUV2QixlQUFlO2dCQUNkLGtCQUFrQixDQUFDLENBQUMsQ0FBQztvQkFDckIsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUM1QixhQUFhLEVBQ2IsNkNBQTZDLENBQzdDO29CQUNELGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3ZCO2FBQU07WUFDTixlQUFlLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUM3QyxhQUFhLEVBQ2IsNkNBQTZDLENBQzdDLENBQUM7U0FDRjtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxlQUFlLENBQUMsQ0FBQztLQUMvRDs7O1lBaERELElBQUksU0FBQztnQkFDTCxJQUFJLEVBQUUsYUFBYTthQUNuQjs7OztZQUpRLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuXHJcbkBQaXBlKHtcclxuXHRuYW1lOiAnZ3RIaWdobGlnaHQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHdEhpZ2hsaWdodFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyKSB7fVxyXG5cclxuXHR0cmFuc2Zvcm0odGV4dDogc3RyaW5nLCBzZWFyY2hUZXJtOiBzdHJpbmcpOiBTYWZlSHRtbCB7XHJcblx0XHRjb25zdCBoYXlzdGFja0Fsd2F5c1N0cmluZyA9IHRleHQgKyAnJztcclxuXHRcdGxldCBoaWdobGlnaHRlZFRleHQgPSBoYXlzdGFja0Fsd2F5c1N0cmluZzsgLy8gZmFsbGJhY2tcclxuXHJcblx0XHRsZXQgc2VhcmNoUGF0dGVybjtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHNlYXJjaFBhdHRlcm4gPSBuZXcgUmVnRXhwKFxyXG5cdFx0XHRcdCcoJyArXHJcblx0XHRcdFx0c2VhcmNoVGVybVxyXG5cdFx0XHRcdFx0LnRvTG93ZXJDYXNlKClcclxuXHRcdFx0XHRcdC5tYXRjaCgvXCIuKj9cInxbXiBdKy9nKSAvLyBleHRyYWN0IHdvcmRzXHJcblx0XHRcdFx0XHQubWFwKFxyXG5cdFx0XHRcdFx0XHRuZWVkbGUgPT4gbmVlZGxlLnJlcGxhY2UoL1wiKC4qPylcIi8sICckMScpIC8vIHN0cmlwIGF3YXkgJ1wiJ1xyXG5cdFx0XHRcdFx0KVxyXG5cdFx0XHRcdFx0LmpvaW4oJ3wnKSArIC8vIGNvbWJpbmUgd29yZHNcclxuXHRcdFx0XHRcdCcpJyxcclxuXHRcdFx0XHQnaWcnXHJcblx0XHRcdCk7XHJcblx0XHR9IGNhdGNoIChlcnJvcikge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoaGlnaGxpZ2h0ZWRUZXh0KTtcclxuXHRcdH1cclxuXHJcblx0XHRjb25zdCBjb250YWluc1RhZ1BhdHRlcm4gPSAvKDwuKj8+KSguKikoPFxcLy4qPz4pL2dpO1xyXG5cdFx0Y29uc3QgY29udGFpbnNUYWdNYXRjaGVzID0gY29udGFpbnNUYWdQYXR0ZXJuLmV4ZWMoaGF5c3RhY2tBbHdheXNTdHJpbmcpO1xyXG5cclxuXHRcdGlmIChjb250YWluc1RhZ01hdGNoZXMpIHtcclxuXHRcdFx0Ly8gdGFnIGV4aXN0cyBpbiBoYXlzdGFja1xyXG5cdFx0XHRoaWdobGlnaHRlZFRleHQgPVxyXG5cdFx0XHRcdGNvbnRhaW5zVGFnTWF0Y2hlc1sxXSArXHJcblx0XHRcdFx0Y29udGFpbnNUYWdNYXRjaGVzWzJdLnJlcGxhY2UoXHJcblx0XHRcdFx0XHRzZWFyY2hQYXR0ZXJuLFxyXG5cdFx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiZ3QtaGlnaGxpZ2h0LXNlYXJjaFwiPiQxPC9zcGFuPidcclxuXHRcdFx0XHQpICtcclxuXHRcdFx0XHRjb250YWluc1RhZ01hdGNoZXNbM107XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRoaWdobGlnaHRlZFRleHQgPSBoYXlzdGFja0Fsd2F5c1N0cmluZy5yZXBsYWNlKFxyXG5cdFx0XHRcdHNlYXJjaFBhdHRlcm4sXHJcblx0XHRcdFx0JzxzcGFuIGNsYXNzPVwiZ3QtaGlnaGxpZ2h0LXNlYXJjaFwiPiQxPC9zcGFuPidcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoaGlnaGxpZ2h0ZWRUZXh0KTtcclxuXHR9XHJcbn1cclxuIl19