/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { GenericTableComponent } from './generic-table.component';
export class GtPaginationComponent {
    constructor() {
        this.ready = false;
    }
    /**
     * @return {?}
     */
    get genericTable() {
        return this._genericTable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set genericTable(value) {
        if (value) {
            value.gtEvent.subscribe((res) => {
                if (res.name === 'gt-info' && res.value.pageTotal > 0) {
                    this.ready = true;
                }
            });
        }
        this._genericTable = value;
    }
}
GtPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-pagination',
                template: `<nav class="gt-pagination" aria-label="Table navigation" *ngIf="genericTable && genericTable.gtInfo && ready && genericTable.gtData?.length > 0" [ngClass]="{'no-data':genericTable.gtInfo.pageTotal === 0}">
  <ul class="pagination" [ngClass]="gtClasses">
    <li class="page-item" [ngClass]="{'disabled' : genericTable.gtInfo.pageCurrent === 1 || genericTable.loading }"><a class="page-link" href="javascript:void(0);" (click)="genericTable.gtInfo.pageCurrent > 1 && genericTable.previousPage()" [attr.aria-label]="genericTable.gtTexts.paginatePrevious"><span aria-hidden="true">&laquo;</span><span class="sr-only">{{genericTable.gtTexts.paginatePrevious}}</span></a></li>
    <li class="page-item" [ngClass]="{'disabled' : genericTable.loading && genericTable.gtInfo.pageCurrent !== page, 'active' : genericTable.gtInfo.pageCurrent === page }" *ngFor="let page of genericTable.gtInfo.pageTotal | gtPaginationPipe:genericTable.gtInfo.pageCurrent"><a class="page-link" [tabindex]="page === true ? -1:0" href="javascript:void(0);" (click)="page === true ? '':genericTable.goToPage(page)">{{page === true ? '&hellip;':page}}</a></li>
    <li class="page-item" [ngClass]="{'disabled' : genericTable.gtInfo.pageCurrent === genericTable.gtInfo.pageTotal || genericTable.loading }"><a class="page-link gt-link" href="javascript:void(0);" (click)="genericTable.gtInfo.pageCurrent !== genericTable.gtInfo.pageTotal && genericTable.nextPage()" [attr.aria-label]="genericTable.gtTexts.paginateNext"><span aria-hidden="true">&raquo;</span><span class="sr-only">{{genericTable.gtTexts.paginateNext}}</span></a></li>
  </ul>
  </nav>
    `,
                styles: ['.gt-link {cursor: pointer;}']
            },] },
];
/** @nocollapse */
GtPaginationComponent.propDecorators = {
    "genericTable": [{ type: Input },],
    "gtClasses": [{ type: Input },],
};
function GtPaginationComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtPaginationComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtPaginationComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtPaginationComponent.propDecorators;
    /** @type {?} */
    GtPaginationComponent.prototype._genericTable;
    /** @type {?} */
    GtPaginationComponent.prototype.gtClasses;
    /** @type {?} */
    GtPaginationComponent.prototype.ready;
}
import { Pipe } from '@angular/core';
export class PaginationPipe {
    /**
     * @param {?} totalPages
     * @param {?} currentPage
     * @return {?}
     */
    transform(totalPages, currentPage) {
        if (totalPages === 0) {
            return [1];
        }
        const /** @type {?} */ pagination = []; // create new empty array for pagination
        const /** @type {?} */ siblings = 2; // sibling elements ie. number of elements on each side of current page
        const /** @type {?} */ paginationLength = totalPages < siblings * 2 + 1 ? totalPages : siblings * 2 + 1; // number of elements in pagination array
        const /** @type {?} */ start = currentPage <= siblings ? 1 : currentPage - siblings; // starting position for array
        const /** @type {?} */ modifier = totalPages - (currentPage + siblings) <= 0
            ? totalPages - (currentPage + siblings)
            : 0; // modifier for pagination values
        const /** @type {?} */ modifiedPosition = start + modifier <= 0 ? 1 : start + modifier;
        // push pages to pagination array
        for (let /** @type {?} */ i = 0; i < paginationLength; i++) {
            pagination.push(modifiedPosition + i);
        }
        // if first page is not included in pagination...
        if (pagination.indexOf(1) === -1) {
            // ...check if second page is in pagination...
            if (pagination.indexOf(2) === -1) {
                // ...if not check if total number of pages equals seven and number of siblings are two...
                if (totalPages === 7 && siblings === 2) {
                    // ...add second page and don't convert page number to ellipsis
                    pagination.unshift(2);
                }
                else {
                    // ...if not, use this placeholder for ellipsis instead of actual page number
                    pagination[0] = true;
                }
            }
            // ...add first page as first array item
            pagination.unshift(1);
        }
        else if (totalPages > paginationLength) {
            // if first page is included add extra page to keep number of items consistent
            pagination.splice(paginationLength, 0, paginationLength + 1);
        }
        // check if last page is included in pagination...
        if (pagination.indexOf(totalPages) === -1) {
            // ...if not, page next to last should either show ellipsis or actual page number for the page
            pagination[pagination.length - 1] =
                pagination[pagination.length - 1] === totalPages - 1
                    ? totalPages - 1
                    : true;
            // ...add last page to pagination
            pagination.push(totalPages);
        }
        return pagination;
    }
}
PaginationPipe.decorators = [
    { type: Pipe, args: [{
                name: 'gtPaginationPipe'
            },] },
];
function PaginationPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PaginationPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PaginationPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,