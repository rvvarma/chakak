/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output, Type } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
export class GtExpandedRow {
    constructor() {
        this.redrawEvent = new EventEmitter();
        this.toggleRowEvent = new EventEmitter();
    }
    /**
     * @return {?}
     */
    $hide() {
        this.toggleRowEvent.emit(this.row);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    $redraw($event) {
        this.redrawEvent.emit(this.row);
    }
    /**
     * @param {?} row
     * @param {?} $event
     * @return {?}
     */
    $rowClick(row, $event) {
        this.gtEvent.emit({
            name: 'gt-row-clicked',
            value: { row: row, event: $event }
        });
    }
}
function GtExpandedRow_tsickle_Closure_declarations() {
    /** @type {?} */
    GtExpandedRow.prototype.row;
    /** @type {?} */
    GtExpandedRow.prototype.columnWidth;
    /** @type {?} */
    GtExpandedRow.prototype.gtSettings;
    /** @type {?} */
    GtExpandedRow.prototype.gtFields;
    /** @type {?} */
    GtExpandedRow.prototype.gtOptions;
    /** @type {?} */
    GtExpandedRow.prototype.gtInfo;
    /** @type {?} */
    GtExpandedRow.prototype.data;
    /** @type {?} */
    GtExpandedRow.prototype.redrawEvent;
    /** @type {?} */
    GtExpandedRow.prototype.gtEvent;
    /** @type {?} */
    GtExpandedRow.prototype.toggleRowEvent;
}
// unsupported: template constraints.
// unsupported: template constraints.
/**
 * @template R, C
 */
export class GtExpandingRowComponent {
    constructor() {
        this.redrawEvent = new EventEmitter();
        this.toggleRowEvent = new EventEmitter();
    }
    /**
     * @param {?} instance
     * @return {?}
     */
    newInstance(instance) {
        instance.row = this.row;
        instance.columnWidth = this.columnWidth;
        instance.gtSettings = this.gtSettings;
        instance.gtFields = this.gtFields;
        instance.gtOptions = this.gtOptions;
        instance.gtInfo = this.gtInfo;
        instance.data =
            typeof this.data === 'function' ? this.data(this.row) : this.data;
        instance.redrawEvent.subscribe(this.redrawEvent);
        instance.toggleRowEvent.subscribe(this.toggleRowEvent);
        instance.gtEvent = this.gtEvent;
    }
}
GtExpandingRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'gt-expanding-row',
                template: `
        <div gtComponentAnchor
             [ctor]="type" (instance)="newInstance($event)"></div>`
            },] },
];
/** @nocollapse */
GtExpandingRowComponent.propDecorators = {
    "type": [{ type: Input },],
    "row": [{ type: Input },],
    "columnWidth": [{ type: Input },],
    "gtSettings": [{ type: Input },],
    "gtFields": [{ type: Input },],
    "gtOptions": [{ type: Input },],
    "gtInfo": [{ type: Input },],
    "data": [{ type: Input },],
    "redrawEvent": [{ type: Output },],
    "toggleRowEvent": [{ type: Output },],
    "gtEvent": [{ type: Input },],
};
function GtExpandingRowComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtExpandingRowComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtExpandingRowComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtExpandingRowComponent.propDecorators;
    /** @type {?} */
    GtExpandingRowComponent.prototype.type;
    /** @type {?} */
    GtExpandingRowComponent.prototype.row;
    /** @type {?} */
    GtExpandingRowComponent.prototype.columnWidth;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtSettings;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtFields;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtOptions;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtInfo;
    /** @type {?} */
    GtExpandingRowComponent.prototype.data;
    /** @type {?} */
    GtExpandingRowComponent.prototype.redrawEvent;
    /** @type {?} */
    GtExpandingRowComponent.prototype.toggleRowEvent;
    /** @type {?} */
    GtExpandingRowComponent.prototype.gtEvent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZXhwYW5kaW5nLXJvdy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJjb21wb25lbnRzL2d0LWV4cGFuZGluZy1yb3cuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFHN0UsTUFBTTs7MkJBUVMsSUFBSSxZQUFZLEVBQUs7OEJBRWxCLElBQUksWUFBWSxFQUFLOzs7OztJQUUvQixLQUFLO1FBQ1gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7SUFHN0IsT0FBTyxDQUFDLE1BQVk7UUFDMUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7Ozs7O0lBRTFCLFNBQVMsQ0FBQyxHQUFVLEVBQUUsTUFBa0I7UUFDOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDakIsSUFBSSxFQUFFLGdCQUFnQjtZQUN0QixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7U0FDbEMsQ0FBQyxDQUFDOztDQUVKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUUQsTUFBTTs7MkJBYW1CLElBQUksWUFBWSxFQUFLOzhCQUNsQixJQUFJLFlBQVksRUFBSzs7Ozs7O0lBR2hELFdBQVcsQ0FBQyxRQUFXO1FBQ3RCLFFBQVEsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUN4QixRQUFRLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEMsUUFBUSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ3RDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNsQyxRQUFRLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDcEMsUUFBUSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLFFBQVEsQ0FBQyxJQUFJO1lBQ1osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDbkUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pELFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN2RCxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7S0FDaEM7OztZQW5DRCxTQUFTLFNBQUM7Z0JBQ1YsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzttRUFFd0Q7YUFDbEU7Ozs7cUJBS0MsS0FBSztvQkFDTCxLQUFLOzRCQUNMLEtBQUs7MkJBQ0wsS0FBSzt5QkFDTCxLQUFLOzBCQUNMLEtBQUs7dUJBQ0wsS0FBSztxQkFDTCxLQUFLOzRCQUVMLE1BQU07K0JBQ04sTUFBTTt3QkFDTixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgR3RSb3csIEd0Q29uZmlnRmllbGQsIEd0Q29uZmlnU2V0dGluZywgR3RFdmVudCB9IGZyb20gJy4uJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHdEV4cGFuZGVkUm93PFIgZXh0ZW5kcyBHdFJvdz4ge1xyXG5cdHJvdzogUjtcclxuXHRjb2x1bW5XaWR0aDogT2JqZWN0O1xyXG5cdGd0U2V0dGluZ3M6IEFycmF5PEd0Q29uZmlnU2V0dGluZz47XHJcblx0Z3RGaWVsZHM6IEFycmF5PEd0Q29uZmlnRmllbGQ8UiwgYW55Pj47XHJcblx0Z3RPcHRpb25zOiBhbnk7XHJcblx0Z3RJbmZvOiBhbnk7XHJcblx0ZGF0YTogYW55O1xyXG5cdHJlZHJhd0V2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxSPigpO1xyXG5cdGd0RXZlbnQ6IEV2ZW50RW1pdHRlcjxHdEV2ZW50PjtcclxuXHR0b2dnbGVSb3dFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8Uj4oKTtcclxuXHJcblx0cHVibGljICRoaWRlKCk6IHZvaWQge1xyXG5cdFx0dGhpcy50b2dnbGVSb3dFdmVudC5lbWl0KHRoaXMucm93KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyAkcmVkcmF3KCRldmVudD86IGFueSk6IHZvaWQge1xyXG5cdFx0dGhpcy5yZWRyYXdFdmVudC5lbWl0KHRoaXMucm93KTtcclxuXHR9XHJcblx0cHVibGljICRyb3dDbGljayhyb3c6IEd0Um93LCAkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuXHRcdHRoaXMuZ3RFdmVudC5lbWl0KHtcclxuXHRcdFx0bmFtZTogJ2d0LXJvdy1jbGlja2VkJyxcclxuXHRcdFx0dmFsdWU6IHsgcm93OiByb3csIGV2ZW50OiAkZXZlbnQgfVxyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcblxyXG5AQ29tcG9uZW50KHtcclxuXHRzZWxlY3RvcjogJ2d0LWV4cGFuZGluZy1yb3cnLFxyXG5cdHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGRpdiBndENvbXBvbmVudEFuY2hvclxyXG4gICAgICAgICAgICAgW2N0b3JdPVwidHlwZVwiIChpbnN0YW5jZSk9XCJuZXdJbnN0YW5jZSgkZXZlbnQpXCI+PC9kaXY+YFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RFeHBhbmRpbmdSb3dDb21wb25lbnQ8XHJcblx0UiBleHRlbmRzIEd0Um93LFxyXG5cdEMgZXh0ZW5kcyBHdEV4cGFuZGVkUm93PFI+XHJcbj4ge1xyXG5cdEBJbnB1dCgpIHR5cGU6IFR5cGU8Qz47XHJcblx0QElucHV0KCkgcm93OiBSO1xyXG5cdEBJbnB1dCgpIGNvbHVtbldpZHRoOiBPYmplY3Q7XHJcblx0QElucHV0KCkgZ3RTZXR0aW5nczogQXJyYXk8R3RDb25maWdTZXR0aW5nPjtcclxuXHRASW5wdXQoKSBndEZpZWxkczogQXJyYXk8R3RDb25maWdGaWVsZDxSLCBhbnk+PjtcclxuXHRASW5wdXQoKSBndE9wdGlvbnM6IGFueTtcclxuXHRASW5wdXQoKSBndEluZm86IGFueTtcclxuXHRASW5wdXQoKSBkYXRhOiBhbnk7XHJcblxyXG5cdEBPdXRwdXQoKSByZWRyYXdFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8Uj4oKTtcclxuXHRAT3V0cHV0KCkgdG9nZ2xlUm93RXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPFI+KCk7XHJcblx0QElucHV0KCkgZ3RFdmVudDogYW55O1xyXG5cclxuXHRuZXdJbnN0YW5jZShpbnN0YW5jZTogQyk6IHZvaWQge1xyXG5cdFx0aW5zdGFuY2Uucm93ID0gdGhpcy5yb3c7XHJcblx0XHRpbnN0YW5jZS5jb2x1bW5XaWR0aCA9IHRoaXMuY29sdW1uV2lkdGg7XHJcblx0XHRpbnN0YW5jZS5ndFNldHRpbmdzID0gdGhpcy5ndFNldHRpbmdzO1xyXG5cdFx0aW5zdGFuY2UuZ3RGaWVsZHMgPSB0aGlzLmd0RmllbGRzO1xyXG5cdFx0aW5zdGFuY2UuZ3RPcHRpb25zID0gdGhpcy5ndE9wdGlvbnM7XHJcblx0XHRpbnN0YW5jZS5ndEluZm8gPSB0aGlzLmd0SW5mbztcclxuXHRcdGluc3RhbmNlLmRhdGEgPVxyXG5cdFx0XHR0eXBlb2YgdGhpcy5kYXRhID09PSAnZnVuY3Rpb24nID8gdGhpcy5kYXRhKHRoaXMucm93KSA6IHRoaXMuZGF0YTtcclxuXHRcdGluc3RhbmNlLnJlZHJhd0V2ZW50LnN1YnNjcmliZSh0aGlzLnJlZHJhd0V2ZW50KTtcclxuXHRcdGluc3RhbmNlLnRvZ2dsZVJvd0V2ZW50LnN1YnNjcmliZSh0aGlzLnRvZ2dsZVJvd0V2ZW50KTtcclxuXHRcdGluc3RhbmNlLmd0RXZlbnQgPSB0aGlzLmd0RXZlbnQ7XHJcblx0fVxyXG59XHJcbiJdfQ==