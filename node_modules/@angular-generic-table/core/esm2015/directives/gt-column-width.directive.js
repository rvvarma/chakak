/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, HostListener, Input } from '@angular/core';
export class GtColumnWidthDirective {
    /**
     * @param {?} hostElement
     * @param {?} cdRef
     */
    constructor(hostElement, cdRef) {
        this.hostElement = hostElement;
        this.cdRef = cdRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResize($event) {
        this.checkSize();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.checkSize();
    }
    /**
     * @return {?}
     */
    checkSize() {
        this.widths[this.objectKey] = window
            .getComputedStyle(this.hostElement.nativeElement, null)
            .getPropertyValue('width');
        this.cdRef.detectChanges();
    }
}
GtColumnWidthDirective.decorators = [
    { type: Directive, args: [{
                selector: '[gtColumnWidth]'
            },] },
];
/** @nocollapse */
GtColumnWidthDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
GtColumnWidthDirective.propDecorators = {
    "objectKey": [{ type: Input },],
    "widths": [{ type: Input },],
    "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};
function GtColumnWidthDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtColumnWidthDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtColumnWidthDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtColumnWidthDirective.propDecorators;
    /** @type {?} */
    GtColumnWidthDirective.prototype.objectKey;
    /** @type {?} */
    GtColumnWidthDirective.prototype.widths;
    /** @type {?} */
    GtColumnWidthDirective.prototype.hostElement;
    /** @type {?} */
    GtColumnWidthDirective.prototype.cdRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtY29sdW1uLXdpZHRoLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWdlbmVyaWMtdGFibGUvY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZ3QtY29sdW1uLXdpZHRoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNOLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxlQUFlLENBQUM7QUFLdkIsTUFBTTs7Ozs7SUFPTCxZQUNTLGFBQ0E7UUFEQSxnQkFBVyxHQUFYLFdBQVc7UUFDWCxVQUFLLEdBQUwsS0FBSztLQUNWOzs7OztJQU5HLFFBQVEsQ0FBQyxNQUFXO1FBQzFCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQzs7Ozs7SUFNbEIsUUFBUTtRQUNQLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUNqQjs7OztJQUVELFNBQVM7UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNO2FBQ2xDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQzthQUN0RCxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO0tBQzNCOzs7WUF2QkQsU0FBUyxTQUFDO2dCQUNWLFFBQVEsRUFBRSxpQkFBaUI7YUFDM0I7Ozs7WUFSQSxVQUFVO1lBRlYsaUJBQWlCOzs7MEJBWWhCLEtBQUs7dUJBQ0wsS0FBSzt5QkFDTCxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuXHRDaGFuZ2VEZXRlY3RvclJlZixcclxuXHREaXJlY3RpdmUsXHJcblx0RWxlbWVudFJlZixcclxuXHRIb3N0TGlzdGVuZXIsXHJcblx0SW5wdXQsXHJcblx0T25Jbml0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuXHRzZWxlY3RvcjogJ1tndENvbHVtbldpZHRoXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEd0Q29sdW1uV2lkdGhEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cdEBJbnB1dCgpIG9iamVjdEtleTogc3RyaW5nO1xyXG5cdEBJbnB1dCgpIHdpZHRoczogT2JqZWN0O1xyXG5cdEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudCddKVxyXG5cdHB1YmxpYyBvblJlc2l6ZSgkZXZlbnQ6IGFueSkge1xyXG5cdFx0dGhpcy5jaGVja1NpemUoKTtcclxuXHR9XHJcblx0Y29uc3RydWN0b3IoXHJcblx0XHRwcml2YXRlIGhvc3RFbGVtZW50OiBFbGVtZW50UmVmLFxyXG5cdFx0cHJpdmF0ZSBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcclxuXHQpIHt9XHJcblx0bmdPbkluaXQoKSB7XHJcblx0XHR0aGlzLmNoZWNrU2l6ZSgpO1xyXG5cdH1cclxuXHJcblx0Y2hlY2tTaXplKCkge1xyXG5cdFx0dGhpcy53aWR0aHNbdGhpcy5vYmplY3RLZXldID0gd2luZG93XHJcblx0XHRcdC5nZXRDb21wdXRlZFN0eWxlKHRoaXMuaG9zdEVsZW1lbnQubmF0aXZlRWxlbWVudCwgbnVsbClcclxuXHRcdFx0LmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJyk7XHJcblx0XHR0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcclxuXHR9XHJcbn1cclxuIl19