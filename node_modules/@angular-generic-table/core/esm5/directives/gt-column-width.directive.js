/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, HostListener, Input } from '@angular/core';
var GtColumnWidthDirective = /** @class */ (function () {
    function GtColumnWidthDirective(hostElement, cdRef) {
        this.hostElement = hostElement;
        this.cdRef = cdRef;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    GtColumnWidthDirective.prototype.onResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.checkSize();
    };
    /**
     * @return {?}
     */
    GtColumnWidthDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.checkSize();
    };
    /**
     * @return {?}
     */
    GtColumnWidthDirective.prototype.checkSize = /**
     * @return {?}
     */
    function () {
        this.widths[this.objectKey] = window
            .getComputedStyle(this.hostElement.nativeElement, null)
            .getPropertyValue('width');
        this.cdRef.detectChanges();
    };
    GtColumnWidthDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[gtColumnWidth]'
                },] },
    ];
    /** @nocollapse */
    GtColumnWidthDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
    ]; };
    GtColumnWidthDirective.propDecorators = {
        "objectKey": [{ type: Input },],
        "widths": [{ type: Input },],
        "onResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
    };
    return GtColumnWidthDirective;
}());
export { GtColumnWidthDirective };
function GtColumnWidthDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtColumnWidthDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtColumnWidthDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    GtColumnWidthDirective.propDecorators;
    /** @type {?} */
    GtColumnWidthDirective.prototype.objectKey;
    /** @type {?} */
    GtColumnWidthDirective.prototype.widths;
    /** @type {?} */
    GtColumnWidthDirective.prototype.hostElement;
    /** @type {?} */
    GtColumnWidthDirective.prototype.cdRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtY29sdW1uLXdpZHRoLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWdlbmVyaWMtdGFibGUvY29yZS8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZ3QtY29sdW1uLXdpZHRoLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNOLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBRUwsTUFBTSxlQUFlLENBQUM7O0lBWXRCLGdDQUNTLGFBQ0E7UUFEQSxnQkFBVyxHQUFYLFdBQVc7UUFDWCxVQUFLLEdBQUwsS0FBSztLQUNWOzs7OztJQU5HLHlDQUFROzs7O2NBQUMsTUFBVztRQUMxQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Ozs7O0lBTWxCLHlDQUFROzs7SUFBUjtRQUNDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztLQUNqQjs7OztJQUVELDBDQUFTOzs7SUFBVDtRQUNDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU07YUFDbEMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDO2FBQ3RELGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUM7S0FDM0I7O2dCQXZCRCxTQUFTLFNBQUM7b0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtpQkFDM0I7Ozs7Z0JBUkEsVUFBVTtnQkFGVixpQkFBaUI7Ozs4QkFZaEIsS0FBSzsyQkFDTCxLQUFLOzZCQUNMLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7O2lDQWYxQzs7U0FZYSxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG5cdENoYW5nZURldGVjdG9yUmVmLFxyXG5cdERpcmVjdGl2ZSxcclxuXHRFbGVtZW50UmVmLFxyXG5cdEhvc3RMaXN0ZW5lcixcclxuXHRJbnB1dCxcclxuXHRPbkluaXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG5cdHNlbGVjdG9yOiAnW2d0Q29sdW1uV2lkdGhdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RDb2x1bW5XaWR0aERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblx0QElucHV0KCkgb2JqZWN0S2V5OiBzdHJpbmc7XHJcblx0QElucHV0KCkgd2lkdGhzOiBPYmplY3Q7XHJcblx0QEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50J10pXHJcblx0cHVibGljIG9uUmVzaXplKCRldmVudDogYW55KSB7XHJcblx0XHR0aGlzLmNoZWNrU2l6ZSgpO1xyXG5cdH1cclxuXHRjb25zdHJ1Y3RvcihcclxuXHRcdHByaXZhdGUgaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWYsXHJcblx0XHRwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZlxyXG5cdCkge31cclxuXHRuZ09uSW5pdCgpIHtcclxuXHRcdHRoaXMuY2hlY2tTaXplKCk7XHJcblx0fVxyXG5cclxuXHRjaGVja1NpemUoKSB7XHJcblx0XHR0aGlzLndpZHRoc1t0aGlzLm9iamVjdEtleV0gPSB3aW5kb3dcclxuXHRcdFx0LmdldENvbXB1dGVkU3R5bGUodGhpcy5ob3N0RWxlbWVudC5uYXRpdmVFbGVtZW50LCBudWxsKVxyXG5cdFx0XHQuZ2V0UHJvcGVydHlWYWx1ZSgnd2lkdGgnKTtcclxuXHRcdHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cdH1cclxufVxyXG4iXX0=