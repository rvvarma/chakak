/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
// unsupported: template constraints.
/**
 * @template R
 */
var GtPropertyPipe = /** @class */ (function () {
    function GtPropertyPipe() {
    }
    /**
     * @param {?} config
     * @param {?} objectKey
     * @param {?} property
     * @param {?=} refresh
     * @return {?}
     */
    GtPropertyPipe.prototype.transform = /**
     * @param {?} config
     * @param {?} objectKey
     * @param {?} property
     * @param {?=} refresh
     * @return {?}
     */
    function (config, objectKey, property, refresh) {
        var /** @type {?} */ output = null;
        try {
            for (var /** @type {?} */ i = 0; i < config.length; i++) {
                if (config[i].objectKey === objectKey) {
                    output = config[i][property];
                }
            }
        }
        catch (/** @type {?} */ error) {
            console.log('cannot read property: "' +
                property +
                '" on missing key: "' +
                objectKey +
                '" in config.', error);
        }
        return output;
    };
    GtPropertyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtProperty'
                },] },
    ];
    return GtPropertyPipe;
}());
export { GtPropertyPipe };
function GtPropertyPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtPropertyPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtPropertyPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtcHJvcGVydHkucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bhbmd1bGFyLWdlbmVyaWMtdGFibGUvY29yZS8iLCJzb3VyY2VzIjpbInBpcGVzL2d0LXByb3BlcnR5LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7SUFTbkQsa0NBQVM7Ozs7Ozs7SUFBVCxVQUNDLE1BQW1ELEVBQ25ELFNBQWlCLEVBQ2pCLFFBQWdCLEVBQ2hCLE9BQWlCO1FBRWpCLHFCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSTtZQUNILEtBQUsscUJBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxLQUFLLFNBQVMsRUFBRTtvQkFDdEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDN0I7YUFDRDtTQUNEO1FBQUMsd0JBQU8sS0FBSyxFQUFFO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FDVix5QkFBeUI7Z0JBQ3hCLFFBQVE7Z0JBQ1IscUJBQXFCO2dCQUNyQixTQUFTO2dCQUNULGNBQWMsRUFDZixLQUFLLENBQ0wsQ0FBQztTQUNGO1FBQ0QsT0FBTyxNQUFNLENBQUM7S0FDZDs7Z0JBNUJELElBQUksU0FBQztvQkFDTCxJQUFJLEVBQUUsWUFBWTtpQkFDbEI7O3lCQVBEOztTQVFhLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEd0Q29uZmlnRmllbGQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2d0LWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IEd0Q29uZmlnU2V0dGluZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3QtY29uZmlnLXNldHRpbmcnO1xyXG5pbXBvcnQgeyBHdFJvdyB9IGZyb20gJy4uL2ludGVyZmFjZXMvZ3Qtcm93JztcclxuXHJcbkBQaXBlKHtcclxuXHRuYW1lOiAnZ3RQcm9wZXJ0eSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEd0UHJvcGVydHlQaXBlPFIgZXh0ZW5kcyBHdFJvdz4gaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHR0cmFuc2Zvcm0oXHJcblx0XHRjb25maWc6IEd0Q29uZmlnRmllbGQ8UiwgYW55PltdIHwgR3RDb25maWdTZXR0aW5nW10sXHJcblx0XHRvYmplY3RLZXk6IHN0cmluZyxcclxuXHRcdHByb3BlcnR5OiBzdHJpbmcsXHJcblx0XHRyZWZyZXNoPzogYm9vbGVhblxyXG5cdCk6IGFueSB7XHJcblx0XHRsZXQgb3V0cHV0ID0gbnVsbDtcclxuXHRcdHRyeSB7XHJcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlnLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0aWYgKGNvbmZpZ1tpXS5vYmplY3RLZXkgPT09IG9iamVjdEtleSkge1xyXG5cdFx0XHRcdFx0b3V0cHV0ID0gY29uZmlnW2ldW3Byb3BlcnR5XTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdGNvbnNvbGUubG9nKFxyXG5cdFx0XHRcdCdjYW5ub3QgcmVhZCBwcm9wZXJ0eTogXCInICtcclxuXHRcdFx0XHRcdHByb3BlcnR5ICtcclxuXHRcdFx0XHRcdCdcIiBvbiBtaXNzaW5nIGtleTogXCInICtcclxuXHRcdFx0XHRcdG9iamVjdEtleSArXHJcblx0XHRcdFx0XHQnXCIgaW4gY29uZmlnLicsXHJcblx0XHRcdFx0ZXJyb3JcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBvdXRwdXQ7XHJcblx0fVxyXG59XHJcbiJdfQ==