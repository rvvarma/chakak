/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { GtHighlightPipe } from './gt-highlight.pipe';
// unsupported: template constraints.
/**
 * @template R
 */
var GtRenderPipe = /** @class */ (function () {
    function GtRenderPipe(sanitizer, gtHighlightPipe) {
        this.sanitizer = sanitizer;
        this.gtHighlightPipe = gtHighlightPipe;
        /**
         * Sort by column order
         */
        this.getColumnOrder = function (a, b) {
            if (a.columnOrder < b.columnOrder) {
                return -1;
            }
            if (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {
                return 1;
            }
            return 0;
        };
        /**
         * Sort by length
         */
        this.getOrderByLength = function (a, b) {
            return b.length - a.length;
        };
        /**
         * Return property
         */
        this.getProperty = function (array, key) {
            for (var /** @type {?} */ i = 0; i < array.length; i++) {
                if (array[i].objectKey === key) {
                    return array[i];
                }
            }
        };
    }
    /**
     * @param {?} row
     * @param {?} settings
     * @param {?} fields
     * @param {?} updated
     * @param {?} loading
     * @param {?=} highlight
     * @param {?=} searchString
     * @return {?}
     */
    GtRenderPipe.prototype.transform = /**
     * @param {?} row
     * @param {?} settings
     * @param {?} fields
     * @param {?} updated
     * @param {?} loading
     * @param {?=} highlight
     * @param {?=} searchString
     * @return {?}
     */
    function (row, settings, fields, updated, loading, highlight, searchString) {
        if (highlight === void 0) { highlight = false; }
        // let arr = [{"temp":123,"name":"happy"},{"temp":456,"name":"dfgdfg"},{"temp":789,"name":"asdasd"}];
        // console.log(arr,arr.map(function(item){return item.temp}));
        // console.log(settings.map('objectKey'));
        // console.log('render');
        var /** @type {?} */ columns = [];
        for (var /** @type {?} */ i = 0; i < settings.length; i++) {
            if (settings[i].visible !== false && settings[i].enabled !== false) {
                columns.push(settings[i].objectKey);
            }
        }
        for (var /** @type {?} */ i = 0; i < fields.length; i++) {
            // console.log(!row[fields[i].objectKey]);
            if (fields[i].value &&
                typeof fields[i].value === 'function' &&
                !row.hasOwnProperty(fields[i].objectKey)) {
                row[fields[i].objectKey] = loading ? '' : fields[i].value(row);
            }
        }
        // console.log(row);
        var /** @type {?} */ keys = [];
        for (var /** @type {?} */ key in row) {
            // console.log(key);
            if (columns.indexOf(key) !== -1) {
                var /** @type {?} */ fieldSetting = void 0;
                for (var /** @type {?} */ i = 0; i < fields.length; i++) {
                    if (fields[i].objectKey === key) {
                        fieldSetting = fields[i];
                        // console.log(fieldSetting);
                    }
                }
                var /** @type {?} */ columnObject = {
                    objectKey: key,
                    sortValue: row[key]
                };
                // add component if defined
                if (fieldSetting.columnComponent) {
                    columnObject.columnComponent = fieldSetting.columnComponent;
                }
                if (loading) {
                    columnObject.renderValue = row[key] !== null ? row[key] : '';
                }
                else if (highlight &&
                    searchString &&
                    this.getProperty(settings, key).search !== false) {
                    columnObject.renderValue =
                        fieldSetting.render && typeof fieldSetting.render === 'function'
                            ? this.gtHighlightPipe.transform(fieldSetting.render(row), searchString)
                            : this.gtHighlightPipe.transform(row[key] !== null ? row[key] : '', searchString);
                }
                else {
                    columnObject.renderValue =
                        fieldSetting.render && typeof fieldSetting.render === 'function'
                            ? this.sanitizer.bypassSecurityTrustHtml(fieldSetting.render(row))
                            : row[key] !== null
                                ? row[key]
                                : '';
                }
                if (fieldSetting.click && typeof fieldSetting.click === 'function') {
                    columnObject.click = fieldSetting.click;
                }
                if (fieldSetting.expand) {
                    columnObject.expand = fieldSetting.expand;
                }
                keys.push(columnObject);
            }
        }
        keys.sort(function (a, b) {
            return columns.indexOf(a.objectKey) < columns.indexOf(b.objectKey)
                ? -1
                : 1;
        });
        return keys;
    };
    GtRenderPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtRender'
                },] },
    ];
    /** @nocollapse */
    GtRenderPipe.ctorParameters = function () { return [
        { type: DomSanitizer, },
        { type: GtHighlightPipe, },
    ]; };
    return GtRenderPipe;
}());
export { GtRenderPipe };
function GtRenderPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtRenderPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtRenderPipe.ctorParameters;
    /**
     * Sort by column order
     * @type {?}
     */
    GtRenderPipe.prototype.getColumnOrder;
    /**
     * Sort by length
     * @type {?}
     */
    GtRenderPipe.prototype.getOrderByLength;
    /**
     * Return property
     * @type {?}
     */
    GtRenderPipe.prototype.getProperty;
    /** @type {?} */
    GtRenderPipe.prototype.sanitizer;
    /** @type {?} */
    GtRenderPipe.prototype.gtHighlightPipe;
}

//# sourceMappingURL=data:application/json;base64,