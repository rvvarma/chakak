/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
var GtRowClassPipe = /** @class */ (function () {
    function GtRowClassPipe() {
    }
    /**
     * @param {?} array
     * @param {?} gtFields
     * @return {?}
     */
    GtRowClassPipe.prototype.transform = /**
     * @param {?} array
     * @param {?} gtFields
     * @return {?}
     */
    function (array, gtFields) {
        if (array) {
            // find columns with rowClass property defined
            var /** @type {?} */ COLUMNS_WITH_CLASS = gtFields
                .map(function (column) { return column; })
                .filter(function (column) { return column.rowClass; });
            COLUMNS_WITH_CLASS.map(function (column) {
                // for each column with rowClass property defined...
                array.map(function (row) {
                    // loop through rows and set row class
                    if (typeof column.rowClass === 'function') {
                        // if row class is a function, try using the function...
                        try {
                            if (row.$$gtRowClass) {
                                row.$$gtRowClass = row.$$gtRowClass.concat(' ' + column.rowClass(row, column));
                            }
                            else {
                                row.$$gtRowClass = column.rowClass(row, column);
                            }
                        }
                        catch (/** @type {?} */ error) {
                            console.log('Error when trying to get row class name using formula.', error);
                        }
                    }
                    else {
                        // if not a function, return plain string value
                        if (row.$$gtRowClass) {
                            row.$$gtRowClass = row.$$gtRowClass.concat(' ' + column.rowClass);
                        }
                        else {
                            row.$$gtRowClass = column.rowClass;
                        }
                    }
                });
            });
        }
        return array;
    };
    GtRowClassPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtRowClass'
                },] },
    ];
    return GtRowClassPipe;
}());
export { GtRowClassPipe };
function GtRowClassPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtRowClassPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtRowClassPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Qtcm93LWNsYXNzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1yb3ctY2xhc3MucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7OztJQU9uRCxrQ0FBUzs7Ozs7SUFBVCxVQUFVLEtBQWlCLEVBQUUsUUFBd0M7UUFDcEUsSUFBSSxLQUFLLEVBQUU7O1lBRVYscUJBQU0sa0JBQWtCLEdBQUcsUUFBUTtpQkFDakMsR0FBRyxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxFQUFOLENBQU0sQ0FBQztpQkFDckIsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLFFBQVEsRUFBZixDQUFlLENBQUMsQ0FBQztZQUNwQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsVUFBQSxNQUFNOztnQkFFNUIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFBLEdBQUc7O29CQUVaLElBQUksT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLFVBQVUsRUFBRTs7d0JBRTFDLElBQUk7NEJBQ0gsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFO2dDQUNyQixHQUFHLENBQUMsWUFBWSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUN6QyxHQUFHLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQ2xDLENBQUM7NkJBQ0Y7aUNBQU07Z0NBQ04sR0FBRyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzs2QkFDaEQ7eUJBQ0Q7d0JBQUMsd0JBQU8sS0FBSyxFQUFFOzRCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQ1Ysd0RBQXdELEVBQ3hELEtBQUssQ0FDTCxDQUFDO3lCQUNGO3FCQUNEO3lCQUFNOzt3QkFFTixJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUU7NEJBQ3JCLEdBQUcsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzt5QkFDbEU7NkJBQU07NEJBQ04sR0FBRyxDQUFDLFlBQVksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO3lCQUNuQztxQkFDRDtpQkFDRCxDQUFDLENBQUM7YUFDSCxDQUFDLENBQUM7U0FDSDtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2I7O2dCQTFDRCxJQUFJLFNBQUM7b0JBQ0wsSUFBSSxFQUFFLFlBQVk7aUJBQ2xCOzt5QkFMRDs7U0FNYSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBHdENvbmZpZ0ZpZWxkIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9ndC1jb25maWctZmllbGQnO1xyXG5cclxuQFBpcGUoe1xyXG5cdG5hbWU6ICdndFJvd0NsYXNzJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RSb3dDbGFzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHR0cmFuc2Zvcm0oYXJyYXk6IEFycmF5PGFueT4sIGd0RmllbGRzOiBBcnJheTxHdENvbmZpZ0ZpZWxkPGFueSwgYW55Pj4pOiBhbnkge1xyXG5cdFx0aWYgKGFycmF5KSB7XHJcblx0XHRcdC8vIGZpbmQgY29sdW1ucyB3aXRoIHJvd0NsYXNzIHByb3BlcnR5IGRlZmluZWRcclxuXHRcdFx0Y29uc3QgQ09MVU1OU19XSVRIX0NMQVNTID0gZ3RGaWVsZHNcclxuXHRcdFx0XHQubWFwKGNvbHVtbiA9PiBjb2x1bW4pXHJcblx0XHRcdFx0LmZpbHRlcihjb2x1bW4gPT4gY29sdW1uLnJvd0NsYXNzKTtcclxuXHRcdFx0Q09MVU1OU19XSVRIX0NMQVNTLm1hcChjb2x1bW4gPT4ge1xyXG5cdFx0XHRcdC8vIGZvciBlYWNoIGNvbHVtbiB3aXRoIHJvd0NsYXNzIHByb3BlcnR5IGRlZmluZWQuLi5cclxuXHRcdFx0XHRhcnJheS5tYXAocm93ID0+IHtcclxuXHRcdFx0XHRcdC8vIGxvb3AgdGhyb3VnaCByb3dzIGFuZCBzZXQgcm93IGNsYXNzXHJcblx0XHRcdFx0XHRpZiAodHlwZW9mIGNvbHVtbi5yb3dDbGFzcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHRcdFx0XHQvLyBpZiByb3cgY2xhc3MgaXMgYSBmdW5jdGlvbiwgdHJ5IHVzaW5nIHRoZSBmdW5jdGlvbi4uLlxyXG5cdFx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChyb3cuJCRndFJvd0NsYXNzKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyb3cuJCRndFJvd0NsYXNzID0gcm93LiQkZ3RSb3dDbGFzcy5jb25jYXQoXHJcblx0XHRcdFx0XHRcdFx0XHRcdCcgJyArIGNvbHVtbi5yb3dDbGFzcyhyb3csIGNvbHVtbilcclxuXHRcdFx0XHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRcdHJvdy4kJGd0Um93Q2xhc3MgPSBjb2x1bW4ucm93Q2xhc3Mocm93LCBjb2x1bW4pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcclxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcclxuXHRcdFx0XHRcdFx0XHRcdCdFcnJvciB3aGVuIHRyeWluZyB0byBnZXQgcm93IGNsYXNzIG5hbWUgdXNpbmcgZm9ybXVsYS4nLFxyXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JcclxuXHRcdFx0XHRcdFx0XHQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHQvLyBpZiBub3QgYSBmdW5jdGlvbiwgcmV0dXJuIHBsYWluIHN0cmluZyB2YWx1ZVxyXG5cdFx0XHRcdFx0XHRpZiAocm93LiQkZ3RSb3dDbGFzcykge1xyXG5cdFx0XHRcdFx0XHRcdHJvdy4kJGd0Um93Q2xhc3MgPSByb3cuJCRndFJvd0NsYXNzLmNvbmNhdCgnICcgKyBjb2x1bW4ucm93Q2xhc3MpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHJvdy4kJGd0Um93Q2xhc3MgPSBjb2x1bW4ucm93Q2xhc3M7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gYXJyYXk7XHJcblx0fVxyXG59XHJcbiJdfQ==