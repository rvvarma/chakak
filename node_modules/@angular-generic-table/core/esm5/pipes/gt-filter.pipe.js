/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
var GtFilterPipe = /** @class */ (function () {
    function GtFilterPipe() {
    }
    // @Output() filterInfo = new EventEmitter();
    /**
     * @param {?} allRows
     * @param {?} filterBy
     * @param {?} gtInfo
     * @param {?} refreshFilter
     * @param {?} refreshData
     * @return {?}
     */
    GtFilterPipe.prototype.transform = /**
     * @param {?} allRows
     * @param {?} filterBy
     * @param {?} gtInfo
     * @param {?} refreshFilter
     * @param {?} refreshData
     * @return {?}
     */
    function (allRows, filterBy, gtInfo, refreshFilter, refreshData) {
        // console.log(allRows,filterBy);
        gtInfo.recordsAll = allRows.length;
        if (!Array.isArray(allRows) || !filterBy) {
            // gtInfo.filtered = false;
            var /** @type {?} */ length_1 = allRows === null ? 0 : allRows.length;
            gtInfo.recordsAfterFilter = length_1;
            return allRows;
        }
        var /** @type {?} */ output = [];
        for (var /** @type {?} */ i = 0; i < allRows.length; i++) {
            var /** @type {?} */ rowObject = allRows[i];
            var /** @type {?} */ match = true;
            for (var /** @type {?} */ property in filterBy) {
                if (filterBy.hasOwnProperty(property)) {
                    // console.log(property);
                    // console.log(filter[property].indexOf(obj[property]));
                    if (filterBy[property].indexOf(rowObject[property]) === -1) {
                        match = false;
                    }
                }
            }
            if (match) {
                output.push(rowObject);
            }
        }
        gtInfo.recordsAfterFilter = output.length; // .emit(output.length);
        return output;
    };
    GtFilterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtFilter'
                },] },
    ];
    return GtFilterPipe;
}());
export { GtFilterPipe };
function GtFilterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtFilterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtFilterPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtZmlsdGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1maWx0ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBdUMsTUFBTSxlQUFlLENBQUM7Ozs7SUFPekUsNkNBQTZDOzs7Ozs7Ozs7SUFFN0MsZ0NBQVM7Ozs7Ozs7O0lBQVQsVUFDQyxPQUFjLEVBQ2QsUUFBZ0IsRUFDaEIsTUFBcUIsRUFDckIsYUFBc0IsRUFDdEIsV0FBbUI7O1FBR25CLE1BQU0sQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTs7WUFHekMscUJBQU0sUUFBTSxHQUFHLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUNyRCxNQUFNLENBQUMsa0JBQWtCLEdBQUcsUUFBTSxDQUFDO1lBQ25DLE9BQU8sT0FBTyxDQUFDO1NBQ2Y7UUFFRCxxQkFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEtBQUsscUJBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxxQkFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLHFCQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7WUFFakIsS0FBSyxxQkFBTSxRQUFRLElBQUksUUFBUSxFQUFFO2dCQUNoQyxJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7OztvQkFHdEMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO3dCQUMzRCxLQUFLLEdBQUcsS0FBSyxDQUFDO3FCQUNkO2lCQUNEO2FBQ0Q7WUFDRCxJQUFJLEtBQUssRUFBRTtnQkFDVixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0Q7UUFDRCxNQUFNLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMxQyxPQUFPLE1BQU0sQ0FBQztLQUNkOztnQkEzQ0QsSUFBSSxTQUFDO29CQUNMLElBQUksRUFBRSxVQUFVO2lCQUNoQjs7dUJBTEQ7O1NBTWEsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEV2ZW50RW1pdHRlciwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEd0SW5mb3JtYXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL2d0LWluZm9ybWF0aW9uJztcclxuXHJcbkBQaXBlKHtcclxuXHRuYW1lOiAnZ3RGaWx0ZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHdEZpbHRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHQvLyBAT3V0cHV0KCkgZmlsdGVySW5mbyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcblx0dHJhbnNmb3JtKFxyXG5cdFx0YWxsUm93czogYW55W10sXHJcblx0XHRmaWx0ZXJCeTogT2JqZWN0LFxyXG5cdFx0Z3RJbmZvOiBHdEluZm9ybWF0aW9uLFxyXG5cdFx0cmVmcmVzaEZpbHRlcjogYm9vbGVhbixcclxuXHRcdHJlZnJlc2hEYXRhOiBudW1iZXJcclxuXHQpOiBhbnlbXSB7XHJcblx0XHQvLyBjb25zb2xlLmxvZyhhbGxSb3dzLGZpbHRlckJ5KTtcclxuXHRcdGd0SW5mby5yZWNvcmRzQWxsID0gYWxsUm93cy5sZW5ndGg7XHJcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkoYWxsUm93cykgfHwgIWZpbHRlckJ5KSB7XHJcblx0XHRcdC8vIGd0SW5mby5maWx0ZXJlZCA9IGZhbHNlO1xyXG5cclxuXHRcdFx0Y29uc3QgbGVuZ3RoID0gYWxsUm93cyA9PT0gbnVsbCA/IDAgOiBhbGxSb3dzLmxlbmd0aDtcclxuXHRcdFx0Z3RJbmZvLnJlY29yZHNBZnRlckZpbHRlciA9IGxlbmd0aDtcclxuXHRcdFx0cmV0dXJuIGFsbFJvd3M7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgb3V0cHV0ID0gW107XHJcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGFsbFJvd3MubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0Y29uc3Qgcm93T2JqZWN0ID0gYWxsUm93c1tpXTtcclxuXHRcdFx0bGV0IG1hdGNoID0gdHJ1ZTtcclxuXHJcblx0XHRcdGZvciAoY29uc3QgcHJvcGVydHkgaW4gZmlsdGVyQnkpIHtcclxuXHRcdFx0XHRpZiAoZmlsdGVyQnkuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhwcm9wZXJ0eSk7XHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhmaWx0ZXJbcHJvcGVydHldLmluZGV4T2Yob2JqW3Byb3BlcnR5XSkpO1xyXG5cdFx0XHRcdFx0aWYgKGZpbHRlckJ5W3Byb3BlcnR5XS5pbmRleE9mKHJvd09iamVjdFtwcm9wZXJ0eV0pID09PSAtMSkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAobWF0Y2gpIHtcclxuXHRcdFx0XHRvdXRwdXQucHVzaChyb3dPYmplY3QpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRndEluZm8ucmVjb3Jkc0FmdGVyRmlsdGVyID0gb3V0cHV0Lmxlbmd0aDsgLy8gLmVtaXQob3V0cHV0Lmxlbmd0aCk7XHJcblx0XHRyZXR1cm4gb3V0cHV0O1xyXG5cdH1cclxufVxyXG4iXX0=