/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
var GtColumnClassPipe = /** @class */ (function () {
    function GtColumnClassPipe() {
    }
    /**
     * @param {?} gtFields
     * @param {?} column
     * @param {?=} row
     * @return {?}
     */
    GtColumnClassPipe.prototype.transform = /**
     * @param {?} gtFields
     * @param {?} column
     * @param {?=} row
     * @return {?}
     */
    function (gtFields, column, row) {
        // find columns with columnClass property defined
        var /** @type {?} */ COLUMN_WITH_CLASS = gtFields
            .map(function (field) { return field; })
            .filter(function (field) { return field.columnClass && field.objectKey === column.objectKey; })[0];
        if (!COLUMN_WITH_CLASS) {
            return;
        }
        else if (typeof COLUMN_WITH_CLASS.columnClass === 'function') {
            // if column class is a function, try using the function...
            try {
                return COLUMN_WITH_CLASS.columnClass(row, column);
            }
            catch (/** @type {?} */ error) {
                console.log('Error when trying to get column class name using formula.', error);
            }
        }
        else {
            // if not a function, return plain string value
            return COLUMN_WITH_CLASS.columnClass;
        }
    };
    GtColumnClassPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'gtColumnClass'
                },] },
    ];
    return GtColumnClassPipe;
}());
export { GtColumnClassPipe };
function GtColumnClassPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    GtColumnClassPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    GtColumnClassPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3QtY29sdW1uLWNsYXNzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYW5ndWxhci1nZW5lcmljLXRhYmxlL2NvcmUvIiwic291cmNlcyI6WyJwaXBlcy9ndC1jb2x1bW4tY2xhc3MucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7Ozs7SUFRbkQscUNBQVM7Ozs7OztJQUFULFVBQ0MsUUFBd0MsRUFDeEMsTUFBaUMsRUFDakMsR0FBVzs7UUFHWCxxQkFBTSxpQkFBaUIsR0FBRyxRQUFRO2FBQ2hDLEdBQUcsQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssRUFBTCxDQUFLLENBQUM7YUFDbkIsTUFBTSxDQUNOLFVBQUEsS0FBSyxJQUFJLE9BQUEsS0FBSyxDQUFDLFdBQVcsSUFBSSxLQUFLLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxTQUFTLEVBQXpELENBQXlELENBQ2xFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDTixJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDdkIsT0FBTztTQUNQO2FBQU0sSUFBSSxPQUFPLGlCQUFpQixDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7O1lBRS9ELElBQUk7Z0JBQ0gsT0FBTyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ2xEO1lBQUMsd0JBQU8sS0FBSyxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQ1YsMkRBQTJELEVBQzNELEtBQUssQ0FDTCxDQUFDO2FBQ0Y7U0FDRDthQUFNOztZQUVOLE9BQU8saUJBQWlCLENBQUMsV0FBVyxDQUFDO1NBQ3JDO0tBQ0Q7O2dCQS9CRCxJQUFJLFNBQUM7b0JBQ0wsSUFBSSxFQUFFLGVBQWU7aUJBQ3JCOzs0QkFORDs7U0FPYSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEd0Q29uZmlnRmllbGQgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2d0LWNvbmZpZy1maWVsZCc7XHJcbmltcG9ydCB7IEd0Um93IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9ndC1yb3cnO1xyXG5cclxuQFBpcGUoe1xyXG5cdG5hbWU6ICdndENvbHVtbkNsYXNzJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgR3RDb2x1bW5DbGFzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHR0cmFuc2Zvcm0oXHJcblx0XHRndEZpZWxkczogQXJyYXk8R3RDb25maWdGaWVsZDxhbnksIGFueT4+LFxyXG5cdFx0Y29sdW1uOiBHdENvbmZpZ0ZpZWxkPEd0Um93LCBhbnk+LFxyXG5cdFx0cm93PzogR3RSb3dcclxuXHQpOiBhbnkge1xyXG5cdFx0Ly8gZmluZCBjb2x1bW5zIHdpdGggY29sdW1uQ2xhc3MgcHJvcGVydHkgZGVmaW5lZFxyXG5cdFx0Y29uc3QgQ09MVU1OX1dJVEhfQ0xBU1MgPSBndEZpZWxkc1xyXG5cdFx0XHQubWFwKGZpZWxkID0+IGZpZWxkKVxyXG5cdFx0XHQuZmlsdGVyKFxyXG5cdFx0XHRcdGZpZWxkID0+IGZpZWxkLmNvbHVtbkNsYXNzICYmIGZpZWxkLm9iamVjdEtleSA9PT0gY29sdW1uLm9iamVjdEtleVxyXG5cdFx0XHQpWzBdO1xyXG5cdFx0aWYgKCFDT0xVTU5fV0lUSF9DTEFTUykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9IGVsc2UgaWYgKHR5cGVvZiBDT0xVTU5fV0lUSF9DTEFTUy5jb2x1bW5DbGFzcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG5cdFx0XHQvLyBpZiBjb2x1bW4gY2xhc3MgaXMgYSBmdW5jdGlvbiwgdHJ5IHVzaW5nIHRoZSBmdW5jdGlvbi4uLlxyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdHJldHVybiBDT0xVTU5fV0lUSF9DTEFTUy5jb2x1bW5DbGFzcyhyb3csIGNvbHVtbik7XHJcblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coXHJcblx0XHRcdFx0XHQnRXJyb3Igd2hlbiB0cnlpbmcgdG8gZ2V0IGNvbHVtbiBjbGFzcyBuYW1lIHVzaW5nIGZvcm11bGEuJyxcclxuXHRcdFx0XHRcdGVycm9yXHJcblx0XHRcdFx0KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gaWYgbm90IGEgZnVuY3Rpb24sIHJldHVybiBwbGFpbiBzdHJpbmcgdmFsdWVcclxuXHRcdFx0cmV0dXJuIENPTFVNTl9XSVRIX0NMQVNTLmNvbHVtbkNsYXNzO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG4iXX0=