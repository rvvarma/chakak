{"version":3,"sources":["ng://@angular-generic-table/core/components/gt-expanding-row.component.ts","null","ng://@angular-generic-table/core/pipes/gt-meta.pipe.ts","ng://@angular-generic-table/core/components/generic-table.component.ts","ng://@angular-generic-table/core/components/gt-table-info.component.ts","ng://@angular-generic-table/core/components/gt-pagination.component.ts","ng://@angular-generic-table/core/components/gt-drilldown.component.ts","ng://@angular-generic-table/core/pipes/gt-highlight.pipe.ts","ng://@angular-generic-table/core/pipes/gt-render.pipe.ts","ng://@angular-generic-table/core/pipes/gt-visible.pipe.ts","ng://@angular-generic-table/core/pipes/dash-case.pipe.ts","ng://@angular-generic-table/core/pipes/gt-property.pipe.ts","ng://@angular-generic-table/core/pipes/gt-chunk.pipe.ts","ng://@angular-generic-table/core/pipes/gt-filter.pipe.ts","ng://@angular-generic-table/core/pipes/gt-order-by.pipe.ts","ng://@angular-generic-table/core/pipes/gt-search.pipe.ts","ng://@angular-generic-table/core/directives/component-anchor.directive.ts","ng://@angular-generic-table/core/components/gt-custom-component-factory.ts","ng://@angular-generic-table/core/components/gt-dropdown.component.ts","ng://@angular-generic-table/core/pipes/gt-totals.pipe.ts","ng://@angular-generic-table/core/pipes/gt-totals-position.pipe.ts","ng://@angular-generic-table/core/pipes/gt-row-class.pipe.ts","ng://@angular-generic-table/core/pipes/gt-column-class.pipe.ts","ng://@angular-generic-table/core/directives/gt-column-width.directive.ts","ng://@angular-generic-table/core/components/gt-checkbox/gt-checkbox.component.ts","ng://@angular-generic-table/core/pipes/gt-is-observable.pipe.ts","ng://@angular-generic-table/core/pipes/gt-is-editable.pipe.ts","ng://@angular-generic-table/core/core.module.ts"],"names":["GtExpandedRow","EventEmitter","prototype","$hide","this","toggleRowEvent","emit","row","$redraw","$event","redrawEvent","$rowClick","gtEvent","name","value","event","GtExpandingRowComponent","newInstance","instance","columnWidth","gtSettings","gtFields","gtOptions","gtInfo","data","subscribe","Component","args","selector","template","Input","Output","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","call","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","error","__spread","concat","GtMetaPipe","transform","allRows","rowIndex","page","recordLength","$$gtRowId","Math","random","toString","substr","$$gtInitialRowIndex","Pipe","GenericTableComponent","renderer","gtMetaPipe","_this","loading","noData","noMatchingData","noVisibleColumnsHeading","noVisibleColumns","tableInfo","tableInfoAfterSearch","csvDownload","sortLabel","paginateNext","paginatePrevious","inlineEditEdited","gtDefaultTexts","csvDelimiter","stack","lazyLoad","cache","debounceTime","highlightSearch","rowSelection","rowSelectionAllowMultiple","rowExpandAllowMultiple","numberOfRows","reportColumnWidth","allowUnsorted","mutateData","gtDefaultOptions","pageCurrent","pageTotal","recordFrom","recordTo","recordsAll","recordsAfterFilter","recordsAfterSearch","exportData","objectKey","inlineEditCancel","_gtSettings","sort","indexOf","ctrlKey","metaKey","sortOrder","slice","match","matchDesc","pos","max","pop","splice","refreshSorting","refreshPageArray","rowLength","reset","lengthValue","isNaN","parseInt","newPosition","gtData","_gtOptions","currentRecord","currentPosition","_gtData","ceil","loadingContent","store","refreshPipe","goToPage","previousPage","loadingProperty","gtTexts","clearTimeout","debounceTimer","setTimeout","getData","pagePrevious","a","columnOrder","undefined","JSON","parse","stringify","array","key","sorting","getSortOrder","setting","updateRecordRange","updateTotals","defineProperty","_gtRowComponent","console","warn","keys","editedRows","redraw","extend","_gtTotals","_gtFields","COLUMNS_WITH_CLASS_NAMES","map","column","filter","classNames","sortEnabled","enabled","lockSettings","restructureSorting","initialData","cloneDeep","lazyAllSelected","UNIQUE_ROWS_1","selectedRows","_updateMetaInfo","rowSelectionInitialState","metaInfo","isSelected","rowExpandInitialState","rowExpandInitialComponent","expanded","expandedRow","isOpen","refreshTotals","getRowState","expandAllRows","_toggleAllRowProperty","collapseAllRows","selectAllRows","deselectAllRows","toggleAllRows","toggleCollapse","_toggleRowProperty","toggleSelect","rowClick","updateRow","oldValue","removeRow","isRowSelected","index","property","active","exception","_pushLazyRows","target","source","UNIQUE_ROWS","eventName","eventValue","log","openRows","expandedRows","changedRow","propertyValues","opened","selected","originalValue","newValue","gtUpdateColumn","_editRow","gtDropdownSelect","renderValue","OBJECT_KEY","edited","changes","globalInlineEditListener","_listenForKeydownEvent","listen","inlineEditUpdate","ROW","CHANGES","_stopListeningForKeydownEvent","gtApplyFilter","gtClearFilter","gtSearch","searchTerms","gtAdd","rows","gtDelete","createStore","records","perPage","stores","rowObject","$$loading","order","getColumnOrder","visible","contentPlaceholder","exportCSV","fileName","useBOM","csv","BOM","export","getProperty","forEach","fieldSetting","exportValue","blob","Blob","type","window","navigator","msSaveOrOpenBlob","link","document","createElement","style","display","body","appendChild","download","setAttribute","encodeURIComponent","click","open","removeChild","ngOnInit","changeRowLength","ngOnChanges","storePosition","visibleRecords","previousValue","firstChange","trackByFn","item","trackByColumnFn","ngOnDestroy","Renderer2","GtTableInfoComponent","_changeDetectionRef","ngAfterViewChecked","detectChanges","ChangeDetectorRef","TableInfoPipe","texts","text","searchString","RegExp","replace","GtPaginationComponent","_genericTable","res","ready","styles","PaginationPipe","totalPages","currentPage","pagination","paginationLength","siblings","start","modifier","modifiedPosition","unshift","GtDrilldownComponent","_super","__","constructor","create","tslib_1.__extends","GtHighlightPipe","sanitizer","searchTerm","searchPattern","haystackAlwaysString","highlightedText","toLowerCase","needle","join","bypassSecurityTrustHtml","containsTagMatches","exec","DomSanitizer","GtRenderPipe","gtHighlightPipe","settings","fields","updated","highlight","columns","columnObject","sortValue","columnComponent","search","render","expand","GtVisiblePipe","visibleColumns","DashCasePipe","string","GtPropertyPipe","config","refresh","output","GtChunkPipe","chunkSize","refreshData","isArray","PAGES","ENTRIES","GtFilterPipe","filterBy","refreshFilter","length_1","GtOrderByPipe","_orderByComparator","parseFloat","isFinite","getSortFunction","field","input","sortByProperties","propertyToCheck","desc_1","property_1","sortFunction_1","propertyA","split","propertyB","reverse","desc","sortFunction","comparison","GtSearchPipe","searchFunction","fieldsTemp","k","filteredRows","searchTermsArray","j","separator","term","ComponentAnchorDirective","componentFactoryResolver","viewContainer","factory","resolveComponentFactory","ctor","component","createComponent","injector","Directive","ComponentFactoryResolver","ViewContainerRef","GtCustomComponent","ReplaySubject","$searchTerms","terms","GtCustomComponentFactory","GtDropdownComponent","Subject","_selected","selection","select","option","state","selectedChange","toggleDropdown","tether","Tether","element","id","attachment","targetAttachment","constraints","to","position","clickListener","keyupListener","destroy","removeListeners","GtTotalsPipe","GtTotalsPositionPipe","total","GtRowClassPipe","rowClass","$$gtRowClass","GtColumnClassPipe","COLUMN_WITH_CLASS","columnClass","GtColumnWidthDirective","hostElement","cdRef","onResize","checkSize","widths","getComputedStyle","nativeElement","getPropertyValue","ElementRef","HostListener","GtCheckboxComponent","_initialValue","_checked","toggle","checked","changed","HostBinding","GtIsObservablePipe","Observable","GtIsEditablePipe","GenericTableModule","NgModule","declarations","imports","CommonModule","FormsModule","exports","entryComponents","providers","bootstrap"],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, Output, Type } from '@angular/core';\r\nimport { GtRow, GtConfigField, GtConfigSetting, GtEvent } from '..';\r\n\r\nexport class GtExpandedRow<R extends GtRow> {\r\n\trow: R;\r\n\tcolumnWidth: Object;\r\n\tgtSettings: Array<GtConfigSetting>;\r\n\tgtFields: Array<GtConfigField<R, any>>;\r\n\tgtOptions: any;\r\n\tgtInfo: any;\r\n\tdata: any;\r\n\tredrawEvent = new EventEmitter<R>();\r\n\tgtEvent: EventEmitter<GtEvent>;\r\n\ttoggleRowEvent = new EventEmitter<R>();\r\n\r\n\tpublic $hide(): void {\r\n\t\tthis.toggleRowEvent.emit(this.row);\r\n\t}\r\n\r\n\tpublic $redraw($event?: any): void {\r\n\t\tthis.redrawEvent.emit(this.row);\r\n\t}\r\n\tpublic $rowClick(row: GtRow, $event: MouseEvent) {\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-row-clicked',\r\n\t\t\tvalue: { row: row, event: $event }\r\n\t\t});\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'gt-expanding-row',\r\n\ttemplate: `\r\n        <div gtComponentAnchor\r\n             [ctor]=\"type\" (instance)=\"newInstance($event)\"></div>`\r\n})\r\nexport class GtExpandingRowComponent<\r\n\tR extends GtRow,\r\n\tC extends GtExpandedRow<R>\r\n> {\r\n\t@Input() type: Type<C>;\r\n\t@Input() row: R;\r\n\t@Input() columnWidth: Object;\r\n\t@Input() gtSettings: Array<GtConfigSetting>;\r\n\t@Input() gtFields: Array<GtConfigField<R, any>>;\r\n\t@Input() gtOptions: any;\r\n\t@Input() gtInfo: any;\r\n\t@Input() data: any;\r\n\r\n\t@Output() redrawEvent = new EventEmitter<R>();\r\n\t@Output() toggleRowEvent = new EventEmitter<R>();\r\n\t@Input() gtEvent: any;\r\n\r\n\tnewInstance(instance: C): void {\r\n\t\tinstance.row = this.row;\r\n\t\tinstance.columnWidth = this.columnWidth;\r\n\t\tinstance.gtSettings = this.gtSettings;\r\n\t\tinstance.gtFields = this.gtFields;\r\n\t\tinstance.gtOptions = this.gtOptions;\r\n\t\tinstance.gtInfo = this.gtInfo;\r\n\t\tinstance.data =\r\n\t\t\ttypeof this.data === 'function' ? this.data(this.row) : this.data;\r\n\t\tinstance.redrawEvent.subscribe(this.redrawEvent);\r\n\t\tinstance.toggleRowEvent.subscribe(this.toggleRowEvent);\r\n\t\tinstance.gtEvent = this.gtEvent;\r\n\t}\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtRow } from '../interfaces/gt-row';\r\nimport { GtRowMeta } from '../interfaces/gt-row-meta';\r\n\r\n@Pipe({\r\n\tname: 'gtMeta'\r\n})\r\nexport class GtMetaPipe implements PipeTransform {\r\n\ttransform(\r\n\t\tallRows: Array<GtRow>,\r\n\t\trowIndex?: string,\r\n\t\tpage?: number,\r\n\t\trecordLength?: number\r\n\t): Array<GtRow> {\r\n\t\tfor (let i = 0; i < allRows.length; i++) {\r\n\t\t\tif (!allRows[i].$$gtRowId) {\r\n\t\t\t\tallRows[i].$$gtRowId = rowIndex\r\n\t\t\t\t\t? allRows[i][rowIndex]\r\n\t\t\t\t\t: page\r\n\t\t\t\t\t\t? page * recordLength +\r\n\t\t\t\t\t\t  i +\r\n\t\t\t\t\t\t  '_' +\r\n\t\t\t\t\t\t  Math.random()\r\n\t\t\t\t\t\t\t\t.toString(36)\r\n\t\t\t\t\t\t\t\t.substr(2, 16)\r\n\t\t\t\t\t\t: i +\r\n\t\t\t\t\t\t  '_' +\r\n\t\t\t\t\t\t  Math.random()\r\n\t\t\t\t\t\t\t\t.toString(36)\r\n\t\t\t\t\t\t\t\t.substr(2, 16);\r\n\t\t\t}\r\n\t\t\tif (!allRows[i].$$gtInitialRowIndex) {\r\n\t\t\t\tallRows[i].$$gtInitialRowIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn allRows;\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tOnInit,\r\n\tOnChanges,\r\n\tOutput,\r\n\tInput,\r\n\tEventEmitter,\r\n\tType,\r\n\tSimpleChanges,\r\n\tRenderer2,\r\n\tOnDestroy\r\n} from '@angular/core';\r\nimport {\r\n\tGtConfig,\r\n\tGtConfigField,\r\n\tGtConfigSetting,\r\n\tGtTexts,\r\n\tGtInformation,\r\n\tGtExpandedRow,\r\n\tGtRow,\r\n\tGtOptions,\r\n\tGtRowMeta,\r\n\tGtRenderField,\r\n\tGtEvent\r\n} from '..';\r\nimport { GtMetaPipe } from '../pipes/gt-meta.pipe';\r\n\r\n@Component({\r\n\tselector: 'generic-table',\r\n\ttemplate: `<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\r\n       *ngIf=\"gtFields && gtSettings && (gtFields | gtVisible:gtSettings:refreshPipe).length > 0\">\r\n  <thead>\r\n  <tr>\r\n    <th class=\"gt-sort-label\" *ngIf=\"gtOptions.stack\">{{gtTexts.sortLabel}}</th>\r\n    <th *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe\"\r\n        ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{column.sortEnabled ? 'sort-'+column.sort:''}} {{column.sortEnabled && column.sortOrder >= 0  ? 'sort-order-'+column.sortOrder:''}} {{ gtFields | gtColumnClass:column }}\"\r\n        (click)=\"column.sortEnabled ? gtSort(column.objectKey,$event):'';\">\r\n      <span *ngIf=\"!(gtFields | gtProperty:column.objectKey:'header')\">{{gtFields | gtProperty:column.objectKey:'name'}}</span>\r\n      <gt-custom-component-factory *ngIf=\"(gtFields | gtProperty:column.objectKey:'header')\"\r\n                                   [type]=\"(gtFields | gtProperty:column.objectKey:'header')?.type\"\r\n                                   [injector]=\"(gtFields | gtProperty:column.objectKey:'header')?.injector\"\r\n                                   [column]=\"gtFields | gtProperty:column.objectKey:'name'\"></gt-custom-component-factory>\r\n      <gt-checkbox *ngIf=\"(gtFields | gtProperty:column.objectKey:'columnComponent')?.type === 'checkbox'\" [checked]=\"(gtOptions.lazyLoad ? lazyAllSelected:selectedRows.length === gtData.length)\" (changed)=\"toggleAllRows()\"></gt-checkbox>\r\n    </th>\r\n  </tr>\r\n  </thead>\r\n  <ng-template\r\n    [ngIf]=\"gtTotals && (gtOptions.lazyLoad === false ? (gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length).length > 0 : gtData.length > 0)\">\r\n    <thead class=\"gt-totals\">\r\n    <tr *ngFor=\"let total of gtTotals | gtTotalsPosition\">\r\n      <td *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe;let i = index;\"\r\n          ngClass=\"{{column.objectKey +'-totals-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{ gtFields | gtColumnClass:column }}\">\r\n        <span *ngIf=\"i === 0\" class=\"float-left\">{{total.name}}</span><span\r\n        [innerHTML]=\"total.fields[column.objectKey] | gtTotals:(total.update === false || gtOptions.lazyLoad === true) ? gtData:(gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length):column.objectKey:refreshTotals\"></span>\r\n      </td>\r\n    </tr>\r\n    </thead>\r\n    <tfoot class=\"gt-totals\">\r\n    <tr *ngFor=\"let total of gtTotals | gtTotalsPosition:'footer'\">\r\n      <td *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe;let i = index;\"\r\n          ngClass=\"{{column.objectKey +'-totals-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{ gtFields | gtColumnClass:column }}\">\r\n        <span *ngIf=\"i === 0\" class=\"float-left\">{{total.name}}</span><span\r\n        [innerHTML]=\"total.fields[column.objectKey] | gtTotals:(total.update === false || gtOptions.lazyLoad === true) ? gtData:(gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length):column.objectKey:refreshTotals\"></span>\r\n      </td>\r\n    </tr>\r\n    </tfoot>\r\n  </ng-template>\r\n  <tbody *ngIf=\"gtData && gtInfo\">\r\n  <ng-template class=\"table-rows\" ngFor let-row let-last=\"last\" [ngForTrackBy]=\"trackByFn\"\r\n               [ngForOf]=\"gtOptions.lazyLoad && gtInfo ? (gtData[gtInfo.pageCurrent-1]) : (gtData | gtFilter:gtInfo.filter:gtInfo:refreshFilter:gtData.length | gtSearch:gtInfo.searchTerms:gtInfo:gtSettings:gtFields:gtData.length | gtOrderBy:sortOrder:gtFields:refreshSorting:gtData.length | gtChunk:gtInfo:gtInfo.recordLength:gtInfo.pageCurrent:refreshPageArray:gtData.length:gtEvent:data | gtRowClass:gtFields)\">\r\n    <tr [ngClass]=\"{'row-selected':metaInfo[row.$$gtRowId]?.isSelected, 'row-open':metaInfo[row.$$gtRowId]?.isOpen, 'row-loading':loading, 'row-expandable':gtRowComponent}\"\r\n        class=\"{{row.$$gtRowClass}}\"\r\n        (click)=\"gtOptions.rowSelection ? toggleSelect(row):rowClick(row, $event)\">\r\n      <td *ngFor=\"let column of row | gtRender:gtSettings:gtFields:refreshPipe:loading:gtOptions.highlightSearch:gtInfo.searchTerms;trackBy:trackByColumnFn\"\r\n          ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{(gtFields | gtProperty:column.objectKey:'inlineEdit') ? 'gt-inline-edit':''}} {{column.edited ? 'gt-edited':''}} {{ gtFields | gtColumnClass:column:row }}\">\r\n                        <span class=\"gt-row-label\"\r\n                              *ngIf=\"gtOptions.stack\">{{(gtFields | gtProperty:column.objectKey:'stackedHeading') ? (gtFields | gtProperty:column.objectKey:'stackedHeading') : (gtFields | gtProperty:column.objectKey:'name')}}</span>\r\n        <gt-custom-component-factory *ngIf=\"column.columnComponent && column.columnComponent.type !== 'checkbox'\" class=\"gt-row-content\"\r\n                                     [type]=\"column.columnComponent.type\"\r\n                                     [injector]=\"column.columnComponent.injector\" [row]=\"row\"\r\n                                     [column]=\"column\" (redrawEvent)=\"redraw($event)\"\r\n                                     [searchTerms]=\"gtInfo.searchTerms\"  (searchEvent)=\"redraw($event)\"\r\n                                     (click)=\"column.click ? column.click(row,column,$event):'';column.expand ? toggleCollapse(row, column.expand):''\"></gt-custom-component-factory>\r\n        <span *ngIf=\"!column.columnComponent && (!(gtFields | gtProperty:column.objectKey:'inlineEdit') || ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | async) || (!((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsEditable:row:refreshPipe)))\"\r\n              class=\"gt-row-content\" [innerHTML]=\"column.renderValue\"\r\n              (click)=\"column.click ? column.click(row,column,$event):'';column.expand ? toggleCollapse(row, column.expand):''\"></span>\r\n        <ng-template\r\n          [ngIf]=\"!column.columnComponent && (((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsObservable) && ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | async) || ((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active | gtIsEditable:row:refreshPipe))\">\r\n          <ng-template [ngIf]=\"([true,'email','number','password', 'text'].indexOf((gtFields | gtProperty:column.objectKey:'inlineEdit').type) !== -1) || !(gtFields | gtProperty:column.objectKey:'inlineEdit').type\">\r\n            <input class=\"inline-edit\" [attr.type]=\"!(gtFields | gtProperty:column.objectKey:'inlineEdit').type ? 'text' : !((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable) ? (gtFields | gtProperty:column.objectKey:'inlineEdit').type:(gtFields | gtProperty:column.objectKey:'inlineEdit').type | async\" [(ngModel)]=\"column.renderValue\"\r\n                   (input)=\"gtUpdateColumn($event,row, column)\">\r\n            <span class=\"gt-inline-edit-notice\">{{gtTexts.inlineEditEdited}}</span>\r\n          </ng-template>\r\n          <gt-dropdown\r\n            *ngIf=\"(((gtFields | gtProperty:column.objectKey:'inlineEdit').type) && ((gtFields | gtProperty:column.objectKey:'inlineEdit').type).length > 0) || ((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable)\"\r\n            [options]=\"!((gtFields | gtProperty:column.objectKey:'inlineEdit').type | gtIsObservable) ? (gtFields | gtProperty:column.objectKey:'inlineEdit').type : (gtFields | gtProperty:column.objectKey:'inlineEdit').type | async\"\r\n            [id]=\"'_' + row.$$gtRowId + '_' + column.objectKey\"\r\n            [(selected)]=\"column.renderValue\" (selectedChange)=\"gtDropdownSelect(row, column)\">Add\r\n            inline editing module\r\n          </gt-dropdown>\r\n        </ng-template>\r\n        <ng-template [ngIf]=\"!column.columnComponent && !((gtFields | gtProperty:column.objectKey:'inlineEdit')?.active) \">\r\n          <ng-template\r\n            [ngIf]=\"[true,'email','number','password'].indexOf(gtFields | gtProperty:column.objectKey:'inlineEdit') !== -1\">\r\n            <input class=\"inline-edit\" [attr.type]=\"(gtFields | gtProperty:column.objectKey:'inlineEdit') === true ? 'text':(gtFields | gtProperty:column.objectKey:'inlineEdit')\" [(ngModel)]=\"column.renderValue\"\r\n                   (input)=\"gtUpdateColumn($event,row, column)\">\r\n            <span class=\"gt-inline-edit-notice\">{{gtTexts.inlineEditEdited}}</span>\r\n          </ng-template>\r\n          <gt-dropdown\r\n            *ngIf=\"(gtFields | gtProperty:column.objectKey:'inlineEdit') && [true,'email','number','password'].indexOf(gtFields | gtProperty:column.objectKey:'inlineEdit') === -1\"\r\n            [options]=\"gtFields | gtProperty:column.objectKey:'inlineEdit'\"\r\n            [id]=\"'_' + row.$$gtRowId + '_' + column.objectKey\"\r\n            [(selected)]=\"column.renderValue\" (selectedChange)=\"gtDropdownSelect(row, column)\">Add\r\n            inline editing module\r\n          </gt-dropdown>\r\n        </ng-template>\r\n        <gt-checkbox *ngIf=\"column.columnComponent && column.columnComponent.type === 'checkbox'\" [checked]=\"metaInfo[row.$$gtRowId]?.isSelected\" (changed)=\"toggleSelect(row)\"></gt-checkbox>\r\n      </td>\r\n    </tr>\r\n    <tr class=\"row-expanded\" *ngIf=\"metaInfo[row.$$gtRowId]?.isOpen\">\r\n      <td [attr.colspan]=\"(gtFields | gtVisible:gtSettings:refreshPipe).length\">\r\n        <gt-expanding-row [row]=\"row\"\r\n                          [type]=\"expandedRow.component ? expandedRow.component:gtRowComponent\"\r\n                          [columnWidth]=\"columnWidth\"\r\n                          [gtFields]=\"gtFields\"\r\n                          [gtOptions]=\"gtOptions\"\r\n                          [gtEvent]=\"gtEvent\"\r\n                          [gtInfo]=\"gtInfo\"\r\n                          [gtSettings]=\"gtSettings\"\r\n                          [data]=\"expandedRow.data ? expandedRow.data:row\"\r\n                          (redrawEvent)=\"redraw($event)\"\r\n                          (toggleRowEvent)=\"toggleCollapse($event)\"></gt-expanding-row>\r\n      </td>\r\n    </tr>\r\n    <tr *ngIf=\"gtOptions.reportColumnWidth && last\">\r\n      <td style=\"padding: 0; border:none;\"\r\n          *ngFor=\"let column of gtSettings | gtVisible:gtSettings:refreshPipe\" gtColumnWidth\r\n          [objectKey]=\"column.objectKey\" [widths]=\"columnWidth\"></td>\r\n    </tr>\r\n  </ng-template>\r\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && (gtInfo.searchTerms || gtInfo.filter) && !loading\">\r\n    <td class=\"gt-no-matching-results\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">\r\n      {{gtTexts.noMatchingData}}\r\n    </td>\r\n  </tr>\r\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && !(gtInfo.searchTerms || gtInfo.filter) && !loading\">\r\n    <td class=\"gt-no-results\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">{{gtTexts.noData}}\r\n    </td>\r\n  </tr>\r\n  <tr *ngIf=\"gtInfo.pageTotal === 0 && loading\">\r\n    <td class=\"gt-loading-data\" [attr.colspan]=\"(gtFields | gtVisible:gtSettings).length\">{{gtTexts.loading}}</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\r\n       *ngIf=\"gtFields && gtSettings && (gtFields | gtVisible:gtSettings:refreshPipe).length === 0\">\r\n  <thead>\r\n  <tr>\r\n    <th class=\"gt-no-visible-columns\">{{gtTexts.noVisibleColumnsHeading}}</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  <tr>\r\n    <td class=\"gt-no-visible-columns\">{{gtTexts.noVisibleColumns}}</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n<table class=\"table\" ngClass=\"{{gtClasses}} {{gtOptions.stack ? 'table-stacked':''}}\"\r\n       *ngIf=\"!gtFields || !gtSettings\">\r\n  <thead>\r\n  <tr>\r\n    <th class=\"gt-loading-config\">&nbsp;</th>\r\n  </tr>\r\n  </thead>\r\n  <tbody>\r\n  <tr>\r\n    <td class=\"gt-loading-config\">&nbsp;</td>\r\n  </tr>\r\n  </tbody>\r\n</table>\r\n`\r\n})\r\nexport class GenericTableComponent<R extends GtRow, C extends GtExpandedRow<R>>\r\n\timplements OnInit, OnChanges, OnDestroy {\r\n\tget gtRowComponent(): Type<C> {\r\n\t\treturn this._gtRowComponent;\r\n\t}\r\n\r\n\tget hasEdits(): boolean {\r\n\t\treturn Object.keys(this.editedRows).length > 0;\r\n\t}\r\n\r\n\tget gtOptions(): GtOptions {\r\n\t\treturn this._gtOptions;\r\n\t}\r\n\r\n\tget gtTotals(): any {\r\n\t\treturn this._gtTotals;\r\n\t}\r\n\r\n\tget gtFields(): GtConfigField<R, any>[] {\r\n\t\treturn this._gtFields;\r\n\t}\r\n\r\n\tget gtSettings(): GtConfigSetting[] {\r\n\t\treturn this._gtSettings;\r\n\t}\r\n\r\n\tget gtData(): Array<any> {\r\n\t\treturn this._gtData;\r\n\t}\r\n\r\n\t@Input()\r\n\tset gtOptions(value: GtOptions) {\r\n\t\tthis._gtOptions = value;\r\n\r\n\t\t// if number of rows is passed and if number of rows differs from current record length...\r\n\t\tif (\r\n\t\t\tthis.gtOptions.numberOfRows &&\r\n\t\t\tthis.gtInfo.recordLength !== this.gtOptions.numberOfRows\r\n\t\t) {\r\n\t\t\t// ...update record length and redraw table\r\n\t\t\tthis.gtInfo.recordLength = this.gtOptions.numberOfRows;\r\n\t\t\tthis.redraw();\r\n\t\t}\r\n\r\n\t\t// ...extend gtOptions default values with values passed into component\r\n\t\tthis._gtOptions = <GtOptions>this.extend(\r\n\t\t\tthis.gtDefaultOptions,\r\n\t\t\tthis._gtOptions\r\n\t\t);\r\n\t}\r\n\r\n\t@Input()\r\n\tset gtTotals(value: any) {\r\n\t\tthis._gtTotals = value;\r\n\t}\r\n\t@Input()\r\n\tset gtFields(value: GtConfigField<R, any>[]) {\r\n\t\tthis._gtFields = value;\r\n\t\tconst COLUMNS_WITH_CLASS_NAMES = this._gtFields\r\n\t\t\t.map(column => column)\r\n\t\t\t.filter(column => column.classNames);\r\n\t\t// TODO: remove deprecated warning when setting has been removed\r\n\t\tif (COLUMNS_WITH_CLASS_NAMES.length > 0) {\r\n\t\t\tconsole.warn(\r\n\t\t\t\t'Field setting \"classNames\" have been deprecated in favor for \"columnClass\" and will be removed in the future, please update field settings for column with object key: ' +\r\n\t\t\t\t\tCOLUMNS_WITH_CLASS_NAMES[0].objectKey\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t@Input()\r\n\tset gtSettings(value: GtConfigSetting[]) {\r\n\t\tthis._gtSettings = value;\r\n\r\n\t\t// loop through current settings\r\n\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\t// set sort enabled/disabled setting\r\n\t\t\tthis._gtSettings[i].sortEnabled =\r\n\t\t\t\tthis._gtSettings[i].sortEnabled !== false\r\n\t\t\t\t\t? (this._gtSettings[i].sortEnabled = !(\r\n\t\t\t\t\t\t\tthis._gtSettings[i].sort &&\r\n\t\t\t\t\t\t\tthis._gtSettings[i].sort.indexOf('disable') !== -1\r\n\t\t\t\t\t  ))\r\n\t\t\t\t\t: false;\r\n\r\n\t\t\t// check if sorting is undefined...\r\n\t\t\tif (typeof this._gtSettings[i].sort === 'undefined') {\r\n\t\t\t\t// ...is so, set sorting property to enable\r\n\t\t\t\tthis._gtSettings[i].sort = 'enable';\r\n\t\t\t}\r\n\r\n\t\t\t// check if column order is undefined...\r\n\t\t\tif (\r\n\t\t\t\ttypeof this._gtSettings[i].columnOrder === 'undefined' &&\r\n\t\t\t\tthis._gtSettings[i].enabled !== false\r\n\t\t\t) {\r\n\t\t\t\t// ...is so, set sorting property to enable\r\n\t\t\t\tthis._gtSettings[i].columnOrder = this._gtSettings[i - 1]\r\n\t\t\t\t\t? this._gtSettings[i - 1].columnOrder + 1\r\n\t\t\t\t\t: 0;\r\n\t\t\t}\r\n\r\n\t\t\t// check if column lock settings are undefined...\r\n\t\t\tif (typeof this._gtSettings[i].lockSettings === 'undefined') {\r\n\t\t\t\t// ...if so, set lock settings to false unless field is disabled (enable === false)\r\n\t\t\t\tthis._gtSettings[i].lockSettings =\r\n\t\t\t\t\tthis._gtSettings[i].enabled === false || false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.restructureSorting();\r\n\t}\r\n\t@Input()\r\n\tset gtData(initialData: Array<any>) {\r\n\t\tconst data = this._gtOptions.mutateData\r\n\t\t\t? [...initialData]\r\n\t\t\t: this.cloneDeep(initialData);\r\n\t\tif (this.gtOptions.lazyLoad && this.gtInfo) {\r\n\t\t\tthis.gtMetaPipe.transform(\r\n\t\t\t\tdata,\r\n\t\t\t\tthis.gtOptions.rowIndex,\r\n\t\t\t\tthis.gtInfo.pageCurrent - 1,\r\n\t\t\t\tthis.gtInfo.recordLength\r\n\t\t\t);\r\n\t\t\tif (this.lazyAllSelected) {\r\n\t\t\t\tconst UNIQUE_ROWS = this.selectedRows.map(row => row.$$gtRowId);\r\n\t\t\t\tdata.map(row => {\r\n\t\t\t\t\tif (UNIQUE_ROWS.indexOf(row.$$gtRowId) === -1) {\r\n\t\t\t\t\t\tthis.selectedRows.push(row);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tthis._updateMetaInfo(this.selectedRows, 'isSelected', true);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.gtMetaPipe.transform(data, this.gtOptions.rowIndex);\r\n\t\t}\r\n\t\tif (this.gtOptions.rowSelectionInitialState) {\r\n\t\t\tdata.map(row => {\r\n\t\t\t\tconst selected =\r\n\t\t\t\t\ttypeof this.gtOptions.rowSelectionInitialState === 'function'\r\n\t\t\t\t\t\t? this.gtOptions.rowSelectionInitialState(row)\r\n\t\t\t\t\t\t: this.gtOptions.rowSelectionInitialState;\r\n\t\t\t\tif (selected) {\r\n\t\t\t\t\tif (typeof this.metaInfo[row.$$gtRowId] === 'undefined') {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId] = { isSelected: true };\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId].isSelected = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.selectedRows.push(row);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (\r\n\t\t\tthis.gtOptions.rowExpandInitialState &&\r\n\t\t\tthis.gtOptions.rowExpandInitialComponent\r\n\t\t) {\r\n\t\t\tdata.map(row => {\r\n\t\t\t\tconst expanded =\r\n\t\t\t\t\ttypeof this.gtOptions.rowExpandInitialState === 'function'\r\n\t\t\t\t\t\t? this.gtOptions.rowExpandInitialState(row)\r\n\t\t\t\t\t\t: this.gtOptions.rowExpandInitialState;\r\n\t\t\t\tthis.expandedRow = this.gtOptions.rowExpandInitialComponent;\r\n\r\n\t\t\t\tif (expanded) {\r\n\t\t\t\t\tif (typeof this.metaInfo[row.$$gtRowId] === 'undefined') {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId] = { isOpen: true };\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId].isOpen = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis._gtData = data;\r\n\t}\r\n\r\n\t@Input()\r\n\tset gtRowComponent(value: Type<C>) {\r\n\t\tconsole.warn(\r\n\t\t\t'GtRowComponent has been deprecated and support will be removed in a future release, see https://github.com/hjalmers/angular-generic-table/issues/34'\r\n\t\t);\r\n\t\tthis._gtRowComponent = value;\r\n\t}\r\n\r\n\tpublic columnWidth: Object = {};\r\n\tpublic configObject: GtConfig<R>;\r\n\tpublic sortOrder: Array<any> = [];\r\n\tpublic metaInfo: { [gtRowId: string]: GtRowMeta } = {};\r\n\tpublic selectedRows: Array<GtRow> = [];\r\n\tpublic openRows: Array<GtRow> = [];\r\n\tprivate _gtSettings: GtConfigSetting[] = [];\r\n\tprivate _gtFields: GtConfigField<R, any>[] = [];\r\n\tprivate _gtData: Array<any>;\r\n\tprivate _gtTotals: any;\r\n\tprivate _gtRowComponent: Type<C>;\r\n\tpublic expandedRow: {\r\n\t\tcomponent: Type<C>;\r\n\t\tdata?: Array<any>;\r\n\t};\r\n\tpublic gtDefaultTexts: GtTexts = {\r\n\t\tloading: 'Loading...',\r\n\t\tnoData: 'No data',\r\n\t\tnoMatchingData: 'No data matching results found',\r\n\t\tnoVisibleColumnsHeading: 'No visible columns',\r\n\t\tnoVisibleColumns: 'Please select at least one column to be visible.',\r\n\t\ttableInfo:\r\n\t\t\t'Showing #recordFrom to #recordTo of #recordsAfterSearch entries.',\r\n\t\ttableInfoAfterSearch:\r\n\t\t\t'Showing  #recordFrom to #recordTo of #recordsAfterSearch entries (filtered from a total of #recordsAll entries).',\r\n\t\tcsvDownload: 'download',\r\n\t\tsortLabel: 'Sort:',\r\n\t\tpaginateNext: 'Next page',\r\n\t\tpaginatePrevious: 'Previous page',\r\n\t\tinlineEditEdited: 'Press enter to save'\r\n\t};\r\n\t@Input() gtTexts: GtTexts = this.gtDefaultTexts;\r\n\t@Input() gtClasses: string;\r\n\t@Output() gtEvent: EventEmitter<GtEvent> = new EventEmitter();\r\n\tpublic gtDefaultOptions: GtOptions = {\r\n\t\tcsvDelimiter: ';',\r\n\t\tstack: false,\r\n\t\tlazyLoad: false,\r\n\t\tcache: false,\r\n\t\tdebounceTime: 200,\r\n\t\thighlightSearch: false,\r\n\t\trowSelection: false,\r\n\t\trowSelectionAllowMultiple: true,\r\n\t\trowExpandAllowMultiple: true,\r\n\t\tnumberOfRows: 10,\r\n\t\treportColumnWidth: false,\r\n\t\tallowUnsorted: true,\r\n\t\tmutateData: true\r\n\t};\r\n\tprivate _gtOptions: GtOptions = this.gtDefaultOptions;\r\n\tpublic store: Array<any> = [];\r\n\tpublic loading = true;\r\n\tprivate debounceTimer: void = null;\r\n\tpublic loadingProperty: string;\r\n\tpublic lazyAllSelected = false;\r\n\r\n\t@Input()\r\n\tgtInfo: GtInformation = {\r\n\t\tpageCurrent: 1,\r\n\t\tpageTotal: 0,\r\n\t\trecordFrom: 0,\r\n\t\trecordTo: 0,\r\n\t\trecordLength: this.gtOptions.numberOfRows,\r\n\t\trecordsAll: 0,\r\n\t\trecordsAfterFilter: 0,\r\n\t\trecordsAfterSearch: 0\r\n\t};\r\n\r\n\tpublic refreshPipe = false;\r\n\tpublic refreshTotals = false;\r\n\tpublic refreshSorting = false;\r\n\tpublic refreshFilter = false;\r\n\tpublic refreshPageArray = false;\r\n\tprivate globalInlineEditListener: Function;\r\n\tpublic editedRows: {\r\n\t\t[key: string]: {\r\n\t\t\tchanges: { [key: string]: GtRenderField<GtRow, any> };\r\n\t\t\trow: GtRow;\r\n\t\t};\r\n\t} = {};\r\n\r\n\tpublic data: { exportData: Array<any> } = { exportData: [] }; // Store filtered data for export\r\n\r\n\tconstructor(private renderer: Renderer2, private gtMetaPipe: GtMetaPipe) {\r\n\t\tthis.gtEvent.subscribe(($event: GtEvent) => {\r\n\t\t\tif ($event.name === 'gt-info') {\r\n\t\t\t\tthis.updateRecordRange();\r\n\t\t\t}\r\n\t\t\tif ($event.name === 'gt-row-updated') {\r\n\t\t\t\tthis.updateTotals();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sort table by object key.\r\n\t * @param objectKey - name of key to sort on.\r\n\t * @param event - such as key press during sorting.\r\n\t */\r\n\tpublic gtSort = function(objectKey: string, event: any) {\r\n\t\tthis.inlineEditCancel(); // cancel inline editing\r\n\r\n\t\t// loop through current settings\r\n\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\tif (this._gtSettings[i].objectKey === objectKey) {\r\n\t\t\t\t// check if sorting is disabled...\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis._gtSettings[i].sort &&\r\n\t\t\t\t\tthis._gtSettings[i].sort.indexOf('disable') !== -1\r\n\t\t\t\t) {\r\n\t\t\t\t\t// ...if so, exit function without applying any sorting\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else if (\r\n\t\t\t\t\t/* check if sorting is undefined... */ typeof this._gtSettings[i]\r\n\t\t\t\t\t\t.sort === 'undefined'\r\n\t\t\t\t) {\r\n\t\t\t\t\t// ...is so, set sorting property to enable\r\n\t\t\t\t\tthis._gtSettings[i].sort = 'enable';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// check length\r\n\t\tconst ctrlKey = event.metaKey || event.ctrlKey;\r\n\t\tconst sort = this.sortOrder.slice(0);\r\n\r\n\t\tlet match = -1;\r\n\t\tlet matchDesc = -1;\r\n\t\tlet pos = -1;\r\n\r\n\t\t// check if property already exits\r\n\t\tfor (let i = 0; i < sort.length; i++) {\r\n\t\t\tconst hit = sort[i].indexOf(objectKey);\r\n\t\t\tif (hit !== -1) {\r\n\t\t\t\tmatch = this.sortOrder.indexOf(objectKey);\r\n\t\t\t\tmatchDesc =\r\n\t\t\t\t\tmatch === -1 ? this.sortOrder.indexOf('-' + objectKey) : match;\r\n\t\t\t\tpos = Math.max(match, matchDesc);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// if ctrl key or meta key is press together with sort...\r\n\t\tif (ctrlKey) {\r\n\t\t\tif (this.sortOrder[this.sortOrder.length - 1] === '$$gtInitialRowIndex') {\r\n\t\t\t\tthis.sortOrder.pop();\r\n\t\t\t}\r\n\t\t\tswitch (pos) {\r\n\t\t\t\t// ...and property is not sorted before...\r\n\t\t\t\tcase -1:\r\n\t\t\t\t\t// ...add property to sorting\r\n\t\t\t\t\tthis.sortOrder.push(objectKey);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// ...and property is sorted before...\r\n\t\t\t\t\tif (match !== -1) {\r\n\t\t\t\t\t\t// ...change from asc to desc if sorted asc\r\n\t\t\t\t\t\tthis.sortOrder[pos] = '-' + objectKey;\r\n\t\t\t\t\t} else if (this.sortOrder.length > 1) {\r\n\t\t\t\t\t\t// ...remove sorting if sorted desc\r\n\t\t\t\t\t\tif (ctrlKey) {\r\n\t\t\t\t\t\t\tthis.sortOrder[pos] = objectKey;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.sortOrder.splice(pos, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else if (this.sortOrder.length === 1) {\r\n\t\t\t\t\t\t// ...set sorting to asc if only sorted property\r\n\t\t\t\t\t\tthis.sortOrder[pos] = objectKey;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t/* if ctrl key or meta key is not press together with sort... */\r\n\t\t\tswitch (pos) {\r\n\t\t\t\t// ...and property is not sorted before...\r\n\t\t\t\tcase -1:\r\n\t\t\t\t\t// ...sort by property\r\n\t\t\t\t\tthis.sortOrder = [objectKey];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\t// ...change from desc to asc and vise versa\r\n\t\t\t\t\tthis.sortOrder =\r\n\t\t\t\t\t\tmatch !== -1\r\n\t\t\t\t\t\t\t? ['-' + objectKey]\r\n\t\t\t\t\t\t\t: ctrlKey || !this.gtOptions.allowUnsorted\r\n\t\t\t\t\t\t\t\t? [objectKey]\r\n\t\t\t\t\t\t\t\t: [];\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// update settings object with new sorting information\r\n\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\tif (this._gtSettings[i].objectKey === objectKey) {\r\n\t\t\t\tswitch (this._gtSettings[i].sort) {\r\n\t\t\t\t\t// if sorted asc...\r\n\t\t\t\t\tcase 'asc':\r\n\t\t\t\t\t\t// ...change to desc\r\n\t\t\t\t\t\tthis._gtSettings[i].sort = 'desc';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t// if sorted desc...\r\n\t\t\t\t\tcase 'desc':\r\n\t\t\t\t\t\t// ...change to asc if it's the only sorted property otherwise remove sorting\r\n\t\t\t\t\t\tthis._gtSettings[i].sort =\r\n\t\t\t\t\t\t\t(this.sortOrder.length === 1 && sort.length < 2) ||\r\n\t\t\t\t\t\t\tctrlKey ||\r\n\t\t\t\t\t\t\t!this.gtOptions.allowUnsorted\r\n\t\t\t\t\t\t\t\t? 'asc'\r\n\t\t\t\t\t\t\t\t: 'enable';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t// if sorting enabled...\r\n\t\t\t\t\tcase 'enable':\r\n\t\t\t\t\t\t// ...change to asc\r\n\t\t\t\t\t\tthis._gtSettings[i].sort = 'asc';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis._gtSettings[i].sortOrder =\r\n\t\t\t\t\tthis._gtSettings[i].sort === 'enable'\r\n\t\t\t\t\t\t? this._gtSettings.length - 1\r\n\t\t\t\t\t\t: this.sortOrder.indexOf(objectKey) === -1\r\n\t\t\t\t\t\t\t? this.sortOrder.indexOf('-' + objectKey)\r\n\t\t\t\t\t\t\t: this.sortOrder.indexOf(objectKey);\r\n\t\t\t} else if (\r\n\t\t\t\tthis._gtSettings[i].sort &&\r\n\t\t\t\tthis._gtSettings[i].sort.indexOf('disable') === -1 &&\r\n\t\t\t\tthis.sortOrder.indexOf(this._gtSettings[i].objectKey) === -1 &&\r\n\t\t\t\tthis.sortOrder.indexOf('-' + this._gtSettings[i].objectKey) === -1\r\n\t\t\t) {\r\n\t\t\t\tthis._gtSettings[i].sort = 'enable';\r\n\t\t\t\tthis._gtSettings[i].sortOrder = this._gtSettings.length - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// refresh sorting pipe\r\n\t\tthis.refreshSorting = !this.refreshSorting;\r\n\t\tthis.refreshPageArray = !this.refreshPageArray;\r\n\r\n\t\t// sort by initial sort order as last resort\r\n\t\tthis.sortOrder.push('$$gtInitialRowIndex');\r\n\r\n\t\t// emit sort event\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-sorting-applied',\r\n\t\t\tvalue: this.sortOrder\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Change number of rows to be displayed.\r\n\t * @param rowLength - total number of rows.\r\n\t * @param reset - should page be reset to first page.\r\n\t */\r\n\tpublic changeRowLength = function(rowLength: any, reset?: boolean) {\r\n\t\tlet lengthValue = isNaN(parseInt(rowLength, 10))\r\n\t\t\t? 0\r\n\t\t\t: parseInt(rowLength, 10);\r\n\t\tlet newPosition = 1;\r\n\r\n\t\tif (!lengthValue && this.gtData) {\r\n\t\t\tlengthValue = this.gtData.length;\r\n\t\t}\r\n\r\n\t\t// if reset is not true and we're not lazy loading data...\r\n\t\tif (reset !== true && this._gtOptions.lazyLoad !== true) {\r\n\t\t\t// ...get current position in record set\r\n\t\t\tconst currentRecord =\r\n\t\t\t\tthis.gtInfo.recordLength * (this.gtInfo.pageCurrent - 1);\r\n\t\t\tconst currentPosition =\r\n\t\t\t\tthis._gtData.indexOf(this._gtData[currentRecord]) + 1;\r\n\r\n\t\t\t// ...get new position\r\n\t\t\tnewPosition = Math.ceil(currentPosition / lengthValue);\r\n\t\t}\r\n\r\n\t\t// change row length\r\n\t\tthis.gtInfo.recordLength = lengthValue;\r\n\r\n\t\t// go to new position\r\n\t\tthis.gtInfo.pageCurrent = newPosition;\r\n\r\n\t\t// if lazy loading data...\r\n\t\tif (this._gtOptions.lazyLoad) {\r\n\t\t\t// ...replace data with place holders for new data\r\n\t\t\tthis._gtData[0] = this.loadingContent(lengthValue);\r\n\r\n\t\t\t// ...empty current store\r\n\t\t\tthis.store = [];\r\n\t\t}\r\n\r\n\t\t// this.updateRecordRange();\r\n\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-row-length-changed',\r\n\t\t\tvalue: lengthValue\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Force a redraw of table rows.\r\n\t * As the table uses pure pipes, we need to force a redraw if an object in the array is changed to see the changes.\r\n\t */\r\n\tpublic redraw = function($event?: any) {\r\n\t\tthis.refreshSorting = !this.refreshSorting;\r\n\t\tthis.refreshPageArray = !this.refreshPageArray;\r\n\t\tthis.refreshPipe = !this.refreshPipe;\r\n\t};\r\n\r\n\t/** Update record range. */\r\n\tprivate updateRecordRange() {\r\n\t\tthis.gtInfo.recordFrom =\r\n\t\t\tthis.gtInfo.recordsAfterSearch === 0\r\n\t\t\t\t? 0\r\n\t\t\t\t: (this.gtInfo.pageCurrent - 1) * this.gtInfo.recordLength + 1;\r\n\t\tthis.gtInfo.recordTo =\r\n\t\t\tthis.gtInfo.recordsAfterSearch <\r\n\t\t\tthis.gtInfo.pageCurrent * this.gtInfo.recordLength\r\n\t\t\t\t? this.gtInfo.recordsAfterSearch\r\n\t\t\t\t: this.gtInfo.pageCurrent * this.gtInfo.recordLength;\r\n\t}\r\n\r\n\t/** Update totals. */\r\n\tprivate updateTotals() {\r\n\t\tthis.refreshTotals = !this.refreshTotals;\r\n\t}\r\n\r\n\t/** Go to next page. */\r\n\tpublic nextPage = function() {\r\n\t\tconst page =\r\n\t\t\tthis.gtInfo.pageCurrent === this.gtInfo.pageTotal\r\n\t\t\t\t? this.gtInfo.pageTotal\r\n\t\t\t\t: this.gtInfo.pageCurrent + 1;\r\n\t\tthis.goToPage(page);\r\n\t};\r\n\r\n\t/** Go to previous page. */\r\n\tpublic previousPage = function() {\r\n\t\tconst page =\r\n\t\t\tthis.gtInfo.pageCurrent === 1 ? 1 : this.gtInfo.pageCurrent - 1;\r\n\t\tthis.goToPage(page);\r\n\t};\r\n\r\n\t/** Request more data (used when lazy loading) */\r\n\tprivate getData = function() {\r\n\t\t// ...emit event requesting for more data\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-page-changed-lazy',\r\n\t\t\tvalue: {\r\n\t\t\t\tpageCurrent: this.gtInfo.pageCurrent,\r\n\t\t\t\trecordLength: this.gtInfo.recordLength\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Go to specific page.\r\n\t * @param page - page number.\r\n\t */\r\n\tpublic goToPage = function(page: number) {\r\n\t\tconst previousPage = this.gtInfo.pageCurrent;\r\n\t\tthis.gtInfo.pageCurrent = page;\r\n\t\tthis.inlineEditCancel(); // cancel inline edit\r\n\r\n\t\t// if lazy loading and if page contains no records...\r\n\t\tif (this._gtOptions.lazyLoad) {\r\n\t\t\t// ...if data for current page contains no entries...\r\n\t\t\tif (\r\n\t\t\t\tthis._gtOptions.cache === false ||\r\n\t\t\t\tthis._gtData[this.gtInfo.pageCurrent - 1].length === 0\r\n\t\t\t) {\r\n\t\t\t\t// ...create temporary content while waiting for data\r\n\t\t\t\tthis._gtData[this.gtInfo.pageCurrent - 1] = this.loadingContent(\r\n\t\t\t\t\tthis.gtInfo.recordLength\r\n\t\t\t\t);\r\n\t\t\t\tthis.loading = true; // loading true\r\n\t\t\t}\r\n\t\t\t// ...if first entry in current page equals our loading placeholder...\r\n\t\t\tif (\r\n\t\t\t\tthis._gtData[this.gtInfo.pageCurrent - 1][0][this.loadingProperty] ===\r\n\t\t\t\tthis.gtTexts.loading\r\n\t\t\t) {\r\n\t\t\t\t// ...get data\r\n\t\t\t\tclearTimeout(this.debounceTimer);\r\n\t\t\t\tthis.debounceTimer = setTimeout(() => {\r\n\t\t\t\t\tthis.getData();\r\n\t\t\t\t}, this._gtOptions.debounceTime);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this.updateRecordRange();\r\n\r\n\t\t// ...emit page change event\r\n\t\tif (previousPage !== page) {\r\n\t\t\tthis.gtEvent.emit({\r\n\t\t\t\tname: 'gt-page-changed',\r\n\t\t\t\tvalue: {\r\n\t\t\t\t\tpageCurrent: this.gtInfo.pageCurrent,\r\n\t\t\t\t\tpagePrevious: previousPage,\r\n\t\t\t\t\trecordLength: this.gtInfo.recordLength\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Get meta data for row.\r\n\t */\r\n\tpublic getRowState(row: R): GtRowMeta {\r\n\t\treturn typeof this.metaInfo[row.$$gtRowId] === 'undefined'\r\n\t\t\t? null\r\n\t\t\t: this.metaInfo[row.$$gtRowId];\r\n\t}\r\n\r\n\t/**\r\n\t * Expand all rows.\r\n\t * @param expandedRow - component to render when rows are expanded.\r\n\t */\r\n\tpublic expandAllRows(expandedRow: { component: Type<C>; data?: any }): void {\r\n\t\tthis.expandedRow = expandedRow;\r\n\t\tthis._toggleAllRowProperty('isOpen', true);\r\n\t}\r\n\r\n\t/**\r\n\t * Collapse all rows.\r\n\t */\r\n\tpublic collapseAllRows(): void {\r\n\t\tthis._toggleAllRowProperty('isOpen', false);\r\n\t}\r\n\r\n\t/**\r\n\t * Select all rows.\r\n\t */\r\n\tpublic selectAllRows(): void {\r\n\t\tthis._toggleAllRowProperty('isSelected', true);\r\n\t}\r\n\r\n\t/**\r\n\t * Deselect all rows.\r\n\t */\r\n\tpublic deselectAllRows(): void {\r\n\t\tthis._toggleAllRowProperty('isSelected', false);\r\n\t}\r\n\t/**\r\n\t * Toggle all rows.\r\n\t */\r\n\tpublic toggleAllRows(): void {\r\n\t\tif (this._gtOptions.lazyLoad) {\r\n\t\t\tif (!this.lazyAllSelected || this.selectedRows.length === 0) {\r\n\t\t\t\tthis.selectAllRows();\r\n\t\t\t\tthis.lazyAllSelected = true;\r\n\t\t\t} else {\r\n\t\t\t\tthis.deselectAllRows();\r\n\t\t\t\tthis.lazyAllSelected = false;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.selectedRows.length !== this.gtData.length) {\r\n\t\t\t\tthis.selectAllRows();\r\n\t\t\t} else {\r\n\t\t\t\tthis.deselectAllRows();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle row collapsed state ie. expanded/open or collapsed/closed.\r\n\t * @param row - row object that should be expanded/collapsed.\r\n\t * @param expandedRow - component to render when row is expanded.\r\n\t */\r\n\tpublic toggleCollapse(\r\n\t\trow: GtRow,\r\n\t\texpandedRow?: { component: Type<C>; data?: any }\r\n\t) {\r\n\t\tif (expandedRow) {\r\n\t\t\tthis.expandedRow = expandedRow;\r\n\t\t}\r\n\t\tthis._toggleRowProperty(row, 'isOpen');\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle row selected state ie. selected or not.\r\n\t * @param row - row object that should be selected/deselected.\r\n\t */\r\n\tpublic toggleSelect(row: GtRow) {\r\n\t\tthis._toggleRowProperty(row, 'isSelected');\r\n\t}\r\n\r\n\tpublic rowClick(row: GtRow, $event: MouseEvent) {\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-row-clicked',\r\n\t\t\tvalue: { row: row, event: $event }\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Update row data.\r\n\t * @param row - row object that has been edited.\r\n\t * @param oldValue - row object before edit.\r\n\t */\r\n\tpublic updateRow(row: GtRow, oldValue: GtRow) {\r\n\t\tthis._toggleRowProperty(row, 'isUpdated', oldValue);\r\n\t}\r\n\r\n\t/**\r\n\t * removes a row from the table\r\n\t * @param row - the row object to remove\r\n\t */\r\n\tpublic removeRow(row: GtRow) {\r\n\t\tif (this.isRowSelected(row)) {\r\n\t\t\tthis.toggleSelect(row);\r\n\t\t}\r\n\t\tconst index = this._gtData.indexOf(row);\r\n\t\tthis._gtData.splice(index, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * check if a row is selected\r\n\t * @param row - row object\r\n\t */\r\n\tpublic isRowSelected(row: GtRow): boolean {\r\n\t\treturn (\r\n\t\t\tthis.metaInfo[row.$$gtRowId] && this.metaInfo[row.$$gtRowId].isSelected\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Update meta info for all rows, ie. isSelected, isOpen.\r\n\t * @param array - array that holds rows that need to be updated.\r\n\t * @param property - name of property that should be changed/toggled.\r\n\t * @param active - should rows be expanded/open, selected.\r\n\t * @param exception - update all rows except this one.\r\n\t */\r\n\tprivate _updateMetaInfo(\r\n\t\tarray: Array<GtRow>,\r\n\t\tproperty: string,\r\n\t\tactive: boolean,\r\n\t\texception?: GtRow\r\n\t) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (!this.metaInfo[array[i].$$gtRowId]) {\r\n\t\t\t\tthis.metaInfo[array[i].$$gtRowId] = {};\r\n\t\t\t}\r\n\t\t\tif (exception && array[i].$$gtRowId === exception.$$gtRowId) {\r\n\t\t\t} else {\r\n\t\t\t\tthis.metaInfo[array[i].$$gtRowId][property] = active;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Push selected/expanded lazy loaded rows to array with meta data.\r\n\t * @param target - array to which rows should be added.\r\n\t * @param source - array that holds rows that should be added.\r\n\t * @returns array with added rows.\r\n\t */\r\n\tprivate _pushLazyRows(\r\n\t\ttarget: Array<GtRow>,\r\n\t\tsource: Array<GtRow>\r\n\t): Array<GtRow> {\r\n\t\tconst UNIQUE_ROWS = target.map(row => row.$$gtRowId);\r\n\t\tfor (let i = 0; i < source.length; i++) {\r\n\t\t\t// only add if not already in list\r\n\t\t\tif (UNIQUE_ROWS.indexOf(source[i].$$gtRowId) === -1) {\r\n\t\t\t\ttarget.push(source[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn target;\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle meta info for all rows, ie. isSelected, isOpen.\r\n\t * @param property - name of property that should be changed/toggled.\r\n\t * @param active - should rows be expanded/open, selected.\r\n\t */\r\n\tprivate _toggleAllRowProperty(property: string, active: boolean) {\r\n\t\tlet eventName: string;\r\n\t\tlet eventValue: any;\r\n\t\tswitch (property) {\r\n\t\t\tcase 'isOpen':\r\n\t\t\t\t// check if multiple expanded rows are allowed...\r\n\t\t\t\tif (this._gtOptions.rowExpandAllowMultiple === false) {\r\n\t\t\t\t\t// ...if not, exit function\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'feature disabled: enable by setting \"rowExpandAllowMultiple = true\"'\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\teventName = 'expand-all';\r\n\t\t\t\t\tthis.openRows = this._gtOptions.lazyLoad\r\n\t\t\t\t\t\t? this._pushLazyRows(\r\n\t\t\t\t\t\t\t\tthis.openRows,\r\n\t\t\t\t\t\t\t\tthis._gtData[this.gtInfo.pageCurrent - 1].slice()\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t: this._gtData.slice();\r\n\t\t\t\t\tthis._updateMetaInfo(this.openRows, property, active);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventName = 'collapse-all';\r\n\t\t\t\t\tthis._updateMetaInfo(this.openRows, property, active);\r\n\t\t\t\t\tthis.openRows = [];\r\n\t\t\t\t}\r\n\t\t\t\teventValue = {\r\n\t\t\t\t\texpandedRows: this.openRows,\r\n\t\t\t\t\tchangedRow: 'all'\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'isSelected':\r\n\t\t\t\t// check if multi row selection is allowed...\r\n\t\t\t\tif (this._gtOptions.rowSelectionAllowMultiple === false) {\r\n\t\t\t\t\t// ...if not, exit function\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'feature disabled: enable by setting \"rowSelectionAllowMultiple = true\"'\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\teventName = 'select-all';\r\n\t\t\t\t\tthis.selectedRows = this._gtOptions.lazyLoad\r\n\t\t\t\t\t\t? this._pushLazyRows(\r\n\t\t\t\t\t\t\t\tthis.selectedRows,\r\n\t\t\t\t\t\t\t\tthis._gtData[this.gtInfo.pageCurrent - 1].slice()\r\n\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t: this._gtData.slice();\r\n\t\t\t\t\tthis._updateMetaInfo(this.selectedRows, property, active);\r\n\t\t\t\t} else {\r\n\t\t\t\t\teventName = 'deselect-all';\r\n\t\t\t\t\tthis._updateMetaInfo(this.selectedRows, property, active);\r\n\t\t\t\t\tthis.selectedRows = [];\r\n\t\t\t\t}\r\n\t\t\t\teventValue = {\r\n\t\t\t\t\tselectedRows: this.selectedRows,\r\n\t\t\t\t\tchangedRow: 'all'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-row-' + eventName,\r\n\t\t\tvalue: eventValue\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Toggle meta info for row, ie. isSelected, isOpen.\r\n\t * @param row - row object.\r\n\t * @param property - name of property that should be changed/toggled.\r\n\t * @param propertyValues - optional property values that can be passed.\r\n\t */\r\n\tprivate _toggleRowProperty(\r\n\t\trow: GtRow,\r\n\t\tproperty: string,\r\n\t\tpropertyValues?: any\r\n\t) {\r\n\t\tlet eventName: string;\r\n\t\tlet eventValue: any;\r\n\t\t// make sure gtRowId exists on row object\r\n\t\tif (typeof row.$$gtRowId !== 'undefined') {\r\n\t\t\t// check if meta info exists for row\r\n\t\t\tif (!this.metaInfo[row.$$gtRowId]) {\r\n\t\t\t\t// if not, add object to store meta info\r\n\t\t\t\tthis.metaInfo[row.$$gtRowId] = {};\r\n\t\t\t}\r\n\r\n\t\t\tswitch (property) {\r\n\t\t\t\tcase 'isOpen':\r\n\t\t\t\t\tconst opened = this.metaInfo[row.$$gtRowId][property];\r\n\r\n\t\t\t\t\t// check if multiple expanded rows are allowed...\r\n\t\t\t\t\tif (this._gtOptions.rowExpandAllowMultiple === false) {\r\n\t\t\t\t\t\t// ...if not, collapse all rows except current row\r\n\t\t\t\t\t\tthis._updateMetaInfo(this.openRows, property, false, row);\r\n\t\t\t\t\t\tthis.openRows = [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// check if row is expanded\r\n\t\t\t\t\tif (!opened) {\r\n\t\t\t\t\t\teventName = 'expand';\r\n\t\t\t\t\t\t// add row to expanded rows\r\n\t\t\t\t\t\tthis.openRows.push(row);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\teventName = 'collapse';\r\n\t\t\t\t\t\t// loop through expanded rows...\r\n\t\t\t\t\t\tfor (let i = 0; i < this.openRows.length; i++) {\r\n\t\t\t\t\t\t\t// if expanded row equals passed row...\r\n\t\t\t\t\t\t\tif (this.openRows[i].$$gtRowId === row.$$gtRowId) {\r\n\t\t\t\t\t\t\t\t// ...remove row from expanded rows...\r\n\t\t\t\t\t\t\t\tthis.openRows.splice(i, 1);\r\n\r\n\t\t\t\t\t\t\t\t// ...and exit loop\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\teventValue = {\r\n\t\t\t\t\t\texpandedRows: this.openRows,\r\n\t\t\t\t\t\tchangedRow: row\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'isSelected':\r\n\t\t\t\t\tconst selected = this.metaInfo[row.$$gtRowId][property];\r\n\r\n\t\t\t\t\t// check if multi row selection is allowed...\r\n\t\t\t\t\tif (this._gtOptions.rowSelectionAllowMultiple === false) {\r\n\t\t\t\t\t\t// ...if not, deselect all rows except current row\r\n\t\t\t\t\t\tthis._updateMetaInfo(this.selectedRows, property, false, row);\r\n\t\t\t\t\t\tthis.selectedRows = [];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// check if row is selected\r\n\t\t\t\t\tif (!selected) {\r\n\t\t\t\t\t\teventName = 'select';\r\n\t\t\t\t\t\t// add row to selected rows\r\n\t\t\t\t\t\tthis.selectedRows.push(row);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this.gtOptions.lazyLoad && this.lazyAllSelected) {\r\n\t\t\t\t\t\t\tthis.lazyAllSelected = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\teventName = 'deselect';\r\n\t\t\t\t\t\t// loop through selected rows...\r\n\t\t\t\t\t\tfor (let i = 0; i < this.selectedRows.length; i++) {\r\n\t\t\t\t\t\t\t// if selected row equals passed row...\r\n\t\t\t\t\t\t\tif (this.selectedRows[i].$$gtRowId === row.$$gtRowId) {\r\n\t\t\t\t\t\t\t\t// ...remove row from selected rows...\r\n\t\t\t\t\t\t\t\tthis.selectedRows.splice(i, 1);\r\n\r\n\t\t\t\t\t\t\t\t// ...and exit loop\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\teventValue = {\r\n\t\t\t\t\t\tselectedRows: this.selectedRows,\r\n\t\t\t\t\t\tchangedRow: row\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'isUpdated':\r\n\t\t\t\t\teventName = 'updated';\r\n\t\t\t\t\tconst oldValue = propertyValues;\r\n\t\t\t\t\t// check if edit object exists for row\r\n\t\t\t\t\tif (typeof this.metaInfo[row.$$gtRowId][property] === 'undefined') {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId][property] = {\r\n\t\t\t\t\t\t\toriginalValue: oldValue,\r\n\t\t\t\t\t\t\toldValue: oldValue,\r\n\t\t\t\t\t\t\tnewValue: row\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId][property].oldValue = oldValue;\r\n\t\t\t\t\t\tthis.metaInfo[row.$$gtRowId][property].newValue = row;\r\n\t\t\t\t\t}\r\n\t\t\t\t\teventValue = this.metaInfo[row.$$gtRowId][property];\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\tthis.inlineEditCancel(row);\r\n\t\t\t\t\t// this.gtData = [...this.gtData.map((r) => { return{...r}; })];\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.gtEvent.emit({\r\n\t\t\t\tname: 'gt-row-' + eventName,\r\n\t\t\t\tvalue: eventValue\r\n\t\t\t});\r\n\t\t\tif (property !== 'isUpdated') {\r\n\t\t\t\tthis.metaInfo[row.$$gtRowId][property] = !this.metaInfo[row.$$gtRowId][\r\n\t\t\t\t\tproperty\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update column.\r\n\t * @param $event - key up event.\r\n\t * @param row - row object.\r\n\t * @param column - column object.\r\n\t */\r\n\tpublic gtUpdateColumn(\r\n\t\t$event: KeyboardEvent,\r\n\t\trow: GtRow,\r\n\t\tcolumn: GtRenderField<any, any>\r\n\t) {\r\n\t\tthis._editRow(row, column);\r\n\t}\r\n\r\n\t/**\r\n\t * Dropdown select.\r\n\t * @param row - row object.\r\n\t * @param column - column object.\r\n\t */\r\n\tpublic gtDropdownSelect(row: GtRow, column: GtRenderField<any, any>) {\r\n\t\tconst oldValue = { ...row };\r\n\t\trow[column.objectKey] = column.renderValue;\r\n\t\tthis.updateRow(row, oldValue);\r\n\t}\r\n\r\n\tprivate _editRow(row: GtRow, column: GtRenderField<any, any>) {\r\n\t\tconst OBJECT_KEY = column.objectKey; // declare object key which contains changes\r\n\r\n\t\t// check if cell has changed value\r\n\t\tcolumn.edited = row[column.objectKey] !== column.renderValue;\r\n\t\t// check if row contains changes...\r\n\t\tif (!this.editedRows[row.$$gtRowId]) {\r\n\t\t\t// if not, create an object for the changed row\r\n\t\t\tthis.editedRows[row.$$gtRowId] = {\r\n\t\t\t\tchanges: {}, // create placeholder for changes\r\n\t\t\t\trow: row // store reference to the row that should be updated\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t// store changed column under changes if it has been edited\r\n\t\tif (column.edited) {\r\n\t\t\tthis.editedRows[row.$$gtRowId].changes[OBJECT_KEY] = column;\r\n\t\t} else {\r\n\t\t\t// delete change object if column is unchanged\r\n\t\t\tdelete this.editedRows[row.$$gtRowId].changes[OBJECT_KEY];\r\n\t\t\t// check how many columns have been changed\r\n\t\t\tconst CHANGED_COLUMNS = Object.keys(\r\n\t\t\t\tthis.editedRows[row.$$gtRowId].changes\r\n\t\t\t).length;\r\n\t\t\tif (CHANGED_COLUMNS === 0) {\r\n\t\t\t\t// delete row from edited rows if no columns have been edited\r\n\t\t\t\tdelete this.editedRows[row.$$gtRowId];\r\n\t\t\t}\r\n\t\t}\r\n\t\t// if no listener is present...\r\n\t\tif (!this.globalInlineEditListener) {\r\n\t\t\t// ...listen for update event\r\n\t\t\tthis._listenForKeydownEvent();\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Listen for key down event - listen for key down event during inline edit.\r\n\t */\r\n\tprivate _listenForKeydownEvent() {\r\n\t\t// add global listener for key down events\r\n\t\tthis.globalInlineEditListener = this.renderer.listen(\r\n\t\t\t'document',\r\n\t\t\t'keydown',\r\n\t\t\t$event => {\r\n\t\t\t\tswitch ($event.key) {\r\n\t\t\t\t\tcase 'Enter': // update data object\r\n\t\t\t\t\t\tthis.inlineEditUpdate();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'Escape': // cancel\r\n\t\t\t\t\t\tthis.inlineEditCancel();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\t/**\r\n\t * Inline edit update - accept changes and update row values.\r\n\t */\r\n\tpublic inlineEditUpdate() {\r\n\t\t// loop through rows that have been edited\r\n\t\tObject.keys(this.editedRows).map(key => {\r\n\t\t\tconst ROW = this.editedRows[key].row; // row to update\r\n\t\t\tconst CHANGES = this.editedRows[key].changes; // changes to the row\r\n\r\n\t\t\t// loop through changes in row\r\n\t\t\tObject.keys(CHANGES).map(objectKey => {\r\n\t\t\t\tconst oldValue = { ...ROW };\r\n\t\t\t\tROW[objectKey] = CHANGES[objectKey].renderValue; // update data value\r\n\t\t\t\tthis.updateRow(ROW, oldValue); // update meta info for row and send event\r\n\t\t\t\tCHANGES[objectKey].edited = false; // disable edit mode\r\n\t\t\t});\r\n\t\t});\r\n\t\t// clear rows marked as edited as the rows have been updated\r\n\t\tthis.editedRows = {};\r\n\t\t// remove listener\r\n\t\tthis._stopListeningForKeydownEvent();\r\n\t}\r\n\t/**\r\n\t * Inline edit cancel - cancel and reset inline edits.\r\n\t */\r\n\tpublic inlineEditCancel(row?: GtRow) {\r\n\t\tif (row) {\r\n\t\t\tdelete this.editedRows[row.$$gtRowId];\r\n\t\t\t// remove listener\r\n\t\t\tthis._stopListeningForKeydownEvent();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// loop through rows that have been edited\r\n\t\tObject.keys(this.editedRows).map(key => {\r\n\t\t\tconst ROW = this.editedRows[key].row; // row to update\r\n\t\t\tconst CHANGES = this.editedRows[key].changes; // changes to the row\r\n\r\n\t\t\t// loop through changes in row\r\n\t\t\tObject.keys(CHANGES).map(objectKey => {\r\n\t\t\t\tCHANGES[objectKey].renderValue = ROW[objectKey]; // reset rendered value\r\n\t\t\t\tCHANGES[objectKey].edited = false; // disable edit mode\r\n\t\t\t});\r\n\t\t});\r\n\t\t// clear rows marked as edited as the rows have been updated\r\n\t\tthis.editedRows = {};\r\n\t\t// remove listener\r\n\t\tthis._stopListeningForKeydownEvent();\r\n\t}\r\n\t/**\r\n\t * Stop listening for key down event - stop listening for key down events passed during inline edit.\r\n\t */\r\n\tprivate _stopListeningForKeydownEvent() {\r\n\t\tif (this.globalInlineEditListener) {\r\n\t\t\tthis.globalInlineEditListener();\r\n\t\t\tthis.globalInlineEditListener = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Apply filter(s).\r\n\t * @param filter - object containing key value pairs, where value should be array of values.\r\n\t */\r\n\tpublic gtApplyFilter(filter: Object) {\r\n\t\tthis.gtInfo.filter = filter;\r\n\t\t// go to first page\r\n\t\tthis.goToPage(1);\r\n\t\tthis.updateTotals();\r\n\t}\r\n\r\n\t/** Clear/remove applied filter(s). */\r\n\tpublic gtClearFilter() {\r\n\t\tthis.gtInfo.filter = false;\r\n\t\tthis.updateTotals();\r\n\t\t// this.updateRecordRange();\r\n\t}\r\n\r\n\t/**\r\n\t * Search\r\n\t * @param value - string containing one or more words\r\n\t */\r\n\tpublic gtSearch(value: string) {\r\n\t\tthis.gtInfo.searchTerms = value;\r\n\t\t// always go to first page when searching\r\n\t\tthis.goToPage(1);\r\n\t\tthis.updateTotals();\r\n\t}\r\n\r\n\t/**\r\n\t * Add rows\r\n\t * @param rows - rows to add\r\n\t * @returns new data array.\r\n\t */\r\n\tpublic gtAdd(rows: Array<R>): ReadonlyArray<R> {\r\n\t\tthis.gtData = [...this.gtData, ...rows];\r\n\t\treturn [...this.gtData];\r\n\t}\r\n\r\n\t/**\r\n\t * Delete row\r\n\t * @param objectKey - object key you want to find match with\r\n\t * @param value - the value that should be deleted\r\n\t * @param match - all: delete all matches, first: delete first match (default)\r\n\t * @returns new data array.\r\n\t */\r\n\tpublic gtDelete(\r\n\t\tobjectKey: string,\r\n\t\tvalue: string | number,\r\n\t\tmatch: 'first' | 'all' = 'first'\r\n\t): ReadonlyArray<R> {\r\n\t\tif (match === 'first') {\r\n\t\t\tfor (let i = 0; i < this.gtData.length; i++) {\r\n\t\t\t\tif (this.gtData[i][objectKey] === value) {\r\n\t\t\t\t\tif (this.isRowSelected(this.gtData[i])) {\r\n\t\t\t\t\t\tthis.toggleSelect(this.gtData[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.gtData.splice(i, 1);\r\n\t\t\t\t\tthis.gtData = [...this.gtData];\r\n\t\t\t\t\tif (match === 'first') {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (let i = this.gtData.length; i > 0; i--) {\r\n\t\t\t\tif (this.gtData[i - 1][objectKey] === value) {\r\n\t\t\t\t\tif (this.isRowSelected(this.gtData[i - 1])) {\r\n\t\t\t\t\t\tthis.toggleSelect(this.gtData[i - 1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.gtData.splice(i - 1, 1);\r\n\t\t\t\t\tthis.gtData = [...this.gtData];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [...this.gtData];\r\n\t}\r\n\r\n\t/**\r\n\t * Create store to hold previously loaded records.\r\n\t * @param records - total number of records in store.\r\n\t * @param perPage - how many records to show per page.\r\n\t * @returns a nested array to hold records per page.\r\n\t */\r\n\tprivate createStore(records: number, perPage: number): Array<Array<any>> {\r\n\t\tconst stores = Math.ceil(records / perPage);\r\n\t\tconst store: Array<Array<any>> = [];\r\n\t\tfor (let i = 0; i < stores; i++) {\r\n\t\t\tstore[i] = [];\r\n\t\t}\r\n\t\treturn store;\r\n\t}\r\n\r\n\t/**\r\n\t * Create placeholders for rows while loading data from back-end.\r\n\t * @param perPage - how many records to show per page.\r\n\t * @returns an array containing empty records to be presented while fetching real data.\r\n\t */\r\n\tprivate loadingContent(perPage: number) {\r\n\t\t// create row object\r\n\t\tconst rowObject: Object = {\r\n\t\t\t$$loading: true\r\n\t\t};\r\n\t\tlet order = 0;\r\n\r\n\t\t// sort settings by column order\r\n\t\tthis._gtSettings.sort(this.getColumnOrder);\r\n\r\n\t\t// loop through all settings objects...\r\n\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\tconst setting = this._gtSettings[i];\r\n\r\n\t\t\t// ...if column is visible and enabled...\r\n\t\t\tif (setting.visible !== false && setting.enabled !== false) {\r\n\t\t\t\t// ...if first column, set value to loading text otherwise leave it empty\r\n\t\t\t\tif (order === 0) {\r\n\t\t\t\t\trowObject[setting.objectKey] = this.gtTexts.loading;\r\n\t\t\t\t\tthis.loadingProperty = setting.objectKey;\r\n\t\t\t\t} else {\r\n\t\t\t\t\trowObject[setting.objectKey] = '';\r\n\t\t\t\t}\r\n\t\t\t\torder++;\r\n\t\t\t} else {\r\n\t\t\t\trowObject[setting.objectKey] = '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// create content placeholder\r\n\t\tconst contentPlaceholder: Array<any> = [];\r\n\r\n\t\t// create equal number of rows as rows per page\r\n\t\tfor (let i = 0; i < perPage; i++) {\r\n\t\t\t// ...add temporary row object\r\n\t\t\tcontentPlaceholder.push(rowObject);\r\n\t\t}\r\n\t\treturn contentPlaceholder;\r\n\t}\r\n\r\n\t// TODO: move to helper functions\r\n\t/** Sort by sort order */\r\n\tprivate getSortOrder = function(a: GtConfigSetting, b: GtConfigSetting) {\r\n\t\tif (a.sortOrder < b.sortOrder) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (a.sortOrder > b.sortOrder || typeof a.sortOrder === 'undefined') {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\t// TODO: move to helper functions\r\n\t/** Sort by column order */\r\n\tprivate getColumnOrder = function(a: GtConfigSetting, b: GtConfigSetting) {\r\n\t\tif (a.columnOrder === undefined) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (a.columnOrder < b.columnOrder) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (a.columnOrder > b.columnOrder) {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\t// TODO: move to helper functions\r\n\t/** Create a deep copy of data */\r\n\tprivate cloneDeep = function(o: any) {\r\n\t\treturn JSON.parse(JSON.stringify(o));\r\n\t};\r\n\r\n\t/** Export data as CSV\r\n\t * @param fileName - optional file name (overrides default file name).\r\n\t * @param useBOM - use BOM (byte order marker).\r\n\t */\r\n\tpublic exportCSV(fileName?: string, useBOM: boolean = false) {\r\n\t\tconst data = this.data.exportData;\r\n\t\tlet csv = '';\r\n\t\tconst BOM = '\\uFEFF';\r\n\r\n\t\t// csv export headers\r\n\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\tif (this._gtSettings[i].export !== false) {\r\n\t\t\t\tcsv += this.getProperty(this._gtFields, this._gtSettings[i].objectKey)\r\n\t\t\t\t\t.name;\r\n\r\n\t\t\t\tif (i < this._gtSettings.length - 1) {\r\n\t\t\t\t\tcsv += this._gtOptions.csvDelimiter;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// csv export body\r\n\t\tdata.forEach(row => {\r\n\t\t\tcsv += '\\n';\r\n\t\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\t\tif (this._gtSettings[i].export !== false) {\r\n\t\t\t\t\t// get field settings\r\n\t\t\t\t\tconst fieldSetting = this.getProperty(\r\n\t\t\t\t\t\tthis._gtFields,\r\n\t\t\t\t\t\tthis._gtSettings[i].objectKey\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// get export value, if export function is defined use it otherwise check for value function and as a last resort export raw data\r\n\t\t\t\t\tlet exportValue: string =\r\n\t\t\t\t\t\tfieldSetting.export && typeof fieldSetting.export === 'function'\r\n\t\t\t\t\t\t\t? fieldSetting.export(row)\r\n\t\t\t\t\t\t\t: fieldSetting.value && typeof fieldSetting.value === 'function'\r\n\t\t\t\t\t\t\t\t? fieldSetting.value(row)\r\n\t\t\t\t\t\t\t\t: row[this._gtSettings[i].objectKey];\r\n\r\n\t\t\t\t\t// escape export value using double quotes (\") if export value contains delimiter\r\n\t\t\t\t\texportValue =\r\n\t\t\t\t\t\ttypeof exportValue === 'string' &&\r\n\t\t\t\t\t\texportValue.indexOf(this._gtOptions.csvDelimiter) !== -1\r\n\t\t\t\t\t\t\t? '\"' + exportValue + '\"'\r\n\t\t\t\t\t\t\t: exportValue;\r\n\r\n\t\t\t\t\tcsv += exportValue;\r\n\t\t\t\t\tif (i < this._gtSettings.length - 1) {\r\n\t\t\t\t\t\tcsv += this._gtOptions.csvDelimiter;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tconst blob = new Blob([(useBOM ? BOM : '') + csv], {\r\n\t\t\ttype: 'text/csv;charset=utf-8'\r\n\t\t});\r\n\r\n\t\tif (window.navigator.msSaveOrOpenBlob) {\r\n\t\t\tnavigator.msSaveOrOpenBlob(\r\n\t\t\t\tblob,\r\n\t\t\t\tfileName ? fileName + '.csv' : this.gtTexts.csvDownload + '.csv'\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tconst link = document.createElement('a');\r\n\t\t\tlink.style.display = 'none';\r\n\t\t\tdocument.body.appendChild(link);\r\n\t\t\tif (link.download !== undefined) {\r\n\t\t\t\tlink.setAttribute(\r\n\t\t\t\t\t'href',\r\n\t\t\t\t\t'data:text/csv;charset=utf-8,' +\r\n\t\t\t\t\t\tencodeURIComponent((useBOM ? BOM : '') + csv)\r\n\t\t\t\t); // URL.createObjectURL(blob));\r\n\t\t\t\tlink.setAttribute(\r\n\t\t\t\t\t'download',\r\n\t\t\t\t\tfileName ? fileName + '.csv' : this.gtTexts.csvDownload + '.csv'\r\n\t\t\t\t);\r\n\t\t\t\tdocument.body.appendChild(link);\r\n\t\t\t\tlink.click();\r\n\t\t\t} else {\r\n\t\t\t\tcsv = 'data:text/csv;charset=utf-8,' + (useBOM ? BOM : '') + csv;\r\n\t\t\t\twindow.open(encodeURIComponent(csv));\r\n\t\t\t}\r\n\t\t\tdocument.body.removeChild(link);\r\n\t\t}\r\n\r\n\t\t// emit export event\r\n\t\tthis.gtEvent.emit({\r\n\t\t\tname: 'gt-exported-csv',\r\n\t\t\tvalue: fileName ? fileName : this.gtTexts.csvDownload + '.csv'\r\n\t\t});\r\n\t}\r\n\r\n\t/** Return property */\r\n\tprivate getProperty = function(array: Array<any>, key: string) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i].objectKey === key) {\r\n\t\t\t\treturn array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tprivate restructureSorting = function() {\r\n\t\t/** Check and store sort order upon initialization.\r\n\t\t *  This is done by checking sort properties in the settings array of the table, if no sorting is defined\r\n\t\t *  we'll sort the data by the first visible and enabled column in the table(ascending). Please note that actually\r\n\t\t *  sorting have to be done server side when lazy loading data for obvious reasons.  */\r\n\t\t// create sorting array\r\n\t\tconst sorting = [];\r\n\t\tif (this._gtSettings) {\r\n\t\t\t// ...sort settings by sort order\r\n\t\t\tthis._gtSettings.sort(this.getSortOrder);\r\n\r\n\t\t\t// ...loop through settings\r\n\t\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\t\tconst setting = this._gtSettings[i];\r\n\r\n\t\t\t\t// ...if sorted ascending...\r\n\t\t\t\tif (setting.sort === 'asc') {\r\n\t\t\t\t\t// ... add to sorting\r\n\t\t\t\t\tsorting.push(setting.objectKey);\r\n\t\t\t\t} else if (setting.sort === 'desc') {\r\n\t\t\t\t\t/* ...else if sorted descending... */ // ... add to sorting\r\n\t\t\t\t\tsorting.push('-' + setting.objectKey);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// ...if no sorting applied...\r\n\t\t\tif (sorting.length === 0) {\r\n\t\t\t\tsorting.push('$$gtRowId');\r\n\t\t\t\t/*// ...sort settings by column order\r\n\t\t\t\tthis._gtSettings.sort(this.getColumnOrder);\r\n\r\n\t\t\t\t// ...loop through settings\r\n\t\t\t\tfor (let i = 0; i < this._gtSettings.length; i++) {\r\n\t\t\t\t\tconst setting = this._gtSettings[i];\r\n\r\n\t\t\t\t\t// ...if column is enabled and visible...\r\n\t\t\t\t\tif (setting.enabled !== false && setting.visible !== false) {\r\n\t\t\t\t\t\t// ...add first match and exit function\r\n\t\t\t\t\t\tthis.sortOrder = [this._gtSettings[i].objectKey];\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}*/\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.sortOrder.length === 0) {\r\n\t\t\tthis.sortOrder = sorting;\r\n\t\t}\r\n\t};\r\n\r\n\tngOnInit() {\r\n\t\t// if number of row to display from start is set to null or 0...\r\n\t\tif (!this.gtOptions.numberOfRows) {\r\n\t\t\t// ...change row length\r\n\t\t\tthis.changeRowLength(this.gtOptions.numberOfRows);\r\n\t\t}\r\n\t\tthis.restructureSorting();\r\n\t}\r\n\r\n\t/**\r\n\t *  Extend object function.\r\n\t */\r\n\tprivate extend = function(a: Object, b: Object) {\r\n\t\tfor (const key in b) {\r\n\t\t\tif (b.hasOwnProperty(key)) {\r\n\t\t\t\ta[key] = b[key];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\r\n\tngOnChanges(changes: SimpleChanges) {\r\n\t\t// if gt texts have changed...\r\n\t\tif (changes['gtTexts']) {\r\n\t\t\t// ...extend gtOptions default values with values passed into component\r\n\t\t\tthis.gtTexts = <GtTexts>this.extend(this.gtDefaultTexts, this.gtTexts);\r\n\t\t}\r\n\r\n\t\t// if lazy loading data and paging information is available...\r\n\t\tif (this.gtOptions.lazyLoad && this.gtInfo) {\r\n\t\t\t// ...calculate total number of pages\r\n\t\t\tthis.gtInfo.pageTotal = Math.ceil(\r\n\t\t\t\tthis.gtInfo.recordsAfterSearch / this.gtInfo.recordLength\r\n\t\t\t);\r\n\r\n\t\t\t// ...declare store position\r\n\t\t\tconst storePosition = this.gtInfo.pageCurrent - 1;\r\n\r\n\t\t\t// ...and if store is empty or page length has changed...\r\n\t\t\tif (\r\n\t\t\t\tthis.store.length === 0 ||\r\n\t\t\t\tthis.store[0].length !== this.gtInfo.recordLength\r\n\t\t\t) {\r\n\t\t\t\t// ...create store\r\n\t\t\t\tthis.store = this.createStore(\r\n\t\t\t\t\tthis.gtInfo.recordsAfterSearch,\r\n\t\t\t\t\tthis.gtInfo.recordLength\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// ...store retrieved data in store at store position\r\n\t\t\tthis.store[storePosition] = this.gtData;\r\n\t\t\tthis.gtInfo.visibleRecords = [...this.gtData]; // add visible rows\r\n\r\n\t\t\t// replace data with store\r\n\t\t\tthis._gtData = this.store;\r\n\t\t\tthis.loading = false;\r\n\t\t\tthis.updateRecordRange();\r\n\t\t\tthis.gtEvent.emit({\r\n\t\t\t\tname: 'gt-info',\r\n\t\t\t\tvalue: this.gtInfo\r\n\t\t\t});\r\n\t\t} else if (\r\n\t\t\tthis._gtData &&\r\n\t\t\tthis._gtData.length >= 0 &&\r\n\t\t\tchanges['gtData'] &&\r\n\t\t\tchanges['gtData'].previousValue\r\n\t\t) {\r\n\t\t\tthis.loading = false;\r\n\t\t} else if (\r\n\t\t\tchanges['gtData'] &&\r\n\t\t\tchanges['gtData'].firstChange &&\r\n\t\t\tthis._gtData &&\r\n\t\t\tthis._gtData.length > 0\r\n\t\t) {\r\n\t\t\tthis.loading = false;\r\n\t\t}\r\n\t}\r\n\r\n\ttrackByFn(index: number, item: GtRow) {\r\n\t\treturn item.$$gtRowId;\r\n\t}\r\n\r\n\ttrackByColumnFn(index: number, item: GtConfigField<any, any>) {\r\n\t\treturn item.objectKey;\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\t// remove listener\r\n\t\tthis._stopListeningForKeydownEvent();\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tChangeDetectorRef,\r\n\tAfterViewChecked,\r\n\tInput\r\n} from '@angular/core';\r\nimport { GenericTableComponent } from './generic-table.component';\r\n\r\n@Component({\r\n\tselector: 'gt-table-info',\r\n\ttemplate: `<span *ngIf=\"genericTable.gtInfo\">{{(customText? customText:genericTable.gtTexts) | gtTableInfo:\r\n\t\tgenericTable.gtInfo:\r\n\t\tgenericTable.gtInfo.recordsAfterSearch:\r\n\t\tgenericTable.gtInfo.recordFrom:\r\n\t\tgenericTable.gtInfo.recordTo:\r\n\t\tgenericTable.gtInfo.recordsAll:\r\n\t\tgenericTable.gtTexts.loading:\r\n\t\tgenericTable.gtTexts.tableInfoAfterSearch}}</span>`\r\n})\r\nexport class GtTableInfoComponent implements AfterViewChecked {\r\n\t@Input() genericTable: GenericTableComponent<any, any>;\r\n\t@Input() customText: string;\r\n\r\n\tconstructor(private _changeDetectionRef: ChangeDetectorRef) {}\r\n\r\n\tngAfterViewChecked() {\r\n\t\tthis._changeDetectionRef.detectChanges();\r\n\t}\r\n}\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtInformation } from '../interfaces/gt-information';\r\nimport { GtTexts } from '../interfaces/gt-texts';\r\n\r\n@Pipe({\r\n\tname: 'gtTableInfo'\r\n})\r\nexport class TableInfoPipe implements PipeTransform {\r\n\ttransform(\r\n\t\ttexts: GtTexts | string,\r\n\t\tkeys: GtInformation,\r\n\t\trecordsAfterSearch: number,\r\n\t\trecordFrom: number,\r\n\t\trecordTo: number,\r\n\t\trecordsAll: number,\r\n\t\tloading: string,\r\n\t\ttableInfoAfterSearch: string\r\n\t): string {\r\n\t\tlet text = typeof texts === 'object' ? texts.tableInfo : '';\r\n\t\tif (keys.recordsAfterSearch !== keys.recordsAll) {\r\n\t\t\ttext = typeof texts === 'object' ? texts.tableInfoAfterSearch : '';\r\n\t\t}\r\n\t\tfor (const key in keys) {\r\n\t\t\tif (keys.hasOwnProperty(key)) {\r\n\t\t\t\tconst searchString = new RegExp('#' + key, 'g');\r\n\t\t\t\ttext = text.replace(searchString, keys[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn text;\r\n\t}\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { GenericTableComponent } from './generic-table.component';\r\n\r\n@Component({\r\n\tselector: 'gt-pagination',\r\n\ttemplate: `<nav class=\"gt-pagination\" aria-label=\"Table navigation\" *ngIf=\"genericTable && genericTable.gtInfo && ready && genericTable.gtData?.length > 0\" [ngClass]=\"{'no-data':genericTable.gtInfo.pageTotal === 0}\">\r\n  <ul class=\"pagination\" [ngClass]=\"gtClasses\">\r\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === 1 || genericTable.loading }\"><a class=\"page-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent > 1 && genericTable.previousPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginatePrevious\"><span aria-hidden=\"true\">&laquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginatePrevious}}</span></a></li>\r\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.loading && genericTable.gtInfo.pageCurrent !== page, 'active' : genericTable.gtInfo.pageCurrent === page }\" *ngFor=\"let page of genericTable.gtInfo.pageTotal | gtPaginationPipe:genericTable.gtInfo.pageCurrent\"><a class=\"page-link\" [tabindex]=\"page === true ? -1:0\" href=\"javascript:void(0);\" (click)=\"page === true ? '':genericTable.goToPage(page)\">{{page === true ? '&hellip;':page}}</a></li>\r\n    <li class=\"page-item\" [ngClass]=\"{'disabled' : genericTable.gtInfo.pageCurrent === genericTable.gtInfo.pageTotal || genericTable.loading }\"><a class=\"page-link gt-link\" href=\"javascript:void(0);\" (click)=\"genericTable.gtInfo.pageCurrent !== genericTable.gtInfo.pageTotal && genericTable.nextPage()\" [attr.aria-label]=\"genericTable.gtTexts.paginateNext\"><span aria-hidden=\"true\">&raquo;</span><span class=\"sr-only\">{{genericTable.gtTexts.paginateNext}}</span></a></li>\r\n  </ul>\r\n  </nav>\r\n    `,\r\n\tstyles: ['.gt-link {cursor: pointer;}']\r\n})\r\nexport class GtPaginationComponent {\r\n\tget genericTable(): GenericTableComponent<any, any> {\r\n\t\treturn this._genericTable;\r\n\t}\r\n\r\n\t@Input()\r\n\tset genericTable(value: GenericTableComponent<any, any>) {\r\n\t\tif (value) {\r\n\t\t\tvalue.gtEvent.subscribe((res: any) => {\r\n\t\t\t\tif (res.name === 'gt-info' && res.value.pageTotal > 0) {\r\n\t\t\t\t\tthis.ready = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis._genericTable = value;\r\n\t}\r\n\r\n\tprivate _genericTable: GenericTableComponent<any, any>;\r\n\t@Input() gtClasses: string;\r\n\tpublic ready = false;\r\n}\r\nimport { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n\tname: 'gtPaginationPipe'\r\n})\r\nexport class PaginationPipe implements PipeTransform {\r\n\ttransform(totalPages: number, currentPage: number): Array<any> {\r\n\t\tif (totalPages === 0) {\r\n\t\t\treturn [1];\r\n\t\t}\r\n\t\tconst pagination: Array<any> = []; // create new empty array for pagination\r\n\t\tconst siblings = 2; // sibling elements ie. number of elements on each side of current page\r\n\t\tconst paginationLength =\r\n\t\t\ttotalPages < siblings * 2 + 1 ? totalPages : siblings * 2 + 1; // number of elements in pagination array\r\n\t\tconst start = currentPage <= siblings ? 1 : currentPage - siblings; // starting position for array\r\n\t\tconst modifier =\r\n\t\t\ttotalPages - (currentPage + siblings) <= 0\r\n\t\t\t\t? totalPages - (currentPage + siblings)\r\n\t\t\t\t: 0; // modifier for pagination values\r\n\t\tconst modifiedPosition = start + modifier <= 0 ? 1 : start + modifier;\r\n\r\n\t\t// push pages to pagination array\r\n\t\tfor (let i = 0; i < paginationLength; i++) {\r\n\t\t\tpagination.push(modifiedPosition + i);\r\n\t\t}\r\n\r\n\t\t// if first page is not included in pagination...\r\n\t\tif (pagination.indexOf(1) === -1) {\r\n\t\t\t// ...check if second page is in pagination...\r\n\t\t\tif (pagination.indexOf(2) === -1) {\r\n\t\t\t\t// ...if not check if total number of pages equals seven and number of siblings are two...\r\n\t\t\t\tif (totalPages === 7 && siblings === 2) {\r\n\t\t\t\t\t// ...add second page and don't convert page number to ellipsis\r\n\t\t\t\t\tpagination.unshift(2);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// ...if not, use this placeholder for ellipsis instead of actual page number\r\n\t\t\t\t\tpagination[0] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// ...add first page as first array item\r\n\t\t\tpagination.unshift(1);\r\n\t\t} else if (totalPages > paginationLength) {\r\n\t\t\t// if first page is included add extra page to keep number of items consistent\r\n\t\t\tpagination.splice(paginationLength, 0, paginationLength + 1);\r\n\t\t}\r\n\t\t// check if last page is included in pagination...\r\n\t\tif (pagination.indexOf(totalPages) === -1) {\r\n\t\t\t// ...if not, page next to last should either show ellipsis or actual page number for the page\r\n\t\t\tpagination[pagination.length - 1] =\r\n\t\t\t\tpagination[pagination.length - 1] === totalPages - 1\r\n\t\t\t\t\t? totalPages - 1\r\n\t\t\t\t\t: true;\r\n\r\n\t\t\t// ...add last page to pagination\r\n\t\t\tpagination.push(totalPages);\r\n\t\t}\r\n\r\n\t\treturn pagination;\r\n\t}\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { GtExpandedRow } from './gt-expanding-row.component';\r\n\r\n@Component({\r\n\tselector: 'gt-drilldown',\r\n\ttemplate: `\r\n      <table class=\"table\">\r\n          <tr *ngFor=\"let row of data\" (click)=\"$rowClick(row, $event)\">\r\n              <!--<td *ngFor=\"let column of gtSettings\" [style.width]=\"columnWidth[column.objectKey]\">{{column.objectKey}}</td>-->\r\n              <td *ngFor=\"let column of row | gtRender:gtSettings:gtFields:null:null:gtOptions.highlightSearch:gtInfo.searchTerms;\"\r\n                  ngClass=\"{{column.objectKey +'-column' | dashCase}} {{gtFields | gtProperty:column.objectKey:'classNames'}} {{(gtFields | gtProperty:column.objectKey:'inlineEdit') ? 'gt-inline-edit':''}} {{column.edited ? 'gt-edited':''}} {{ gtFields | gtColumnClass:row:column }}\" [style.width]=\"columnWidth[column.objectKey]\" [style.max-width]=\"columnWidth[column.objectKey]\">\r\n                        <span class=\"gt-row-label\"\r\n                              *ngIf=\"gtOptions.stack\">{{(gtFields | gtProperty:column.objectKey:'stackedHeading') ? (gtFields | gtProperty:column.objectKey:'stackedHeading') : (gtFields | gtProperty:column.objectKey:'name')}}</span>\r\n                  <gt-custom-component-factory *ngIf=\"column.columnComponent\" class=\"gt-row-content\"\r\n                                               [type]=\"column.columnComponent.type\"\r\n                                               [injector]=\"column.columnComponent.injector\" [row]=\"row\"\r\n                                               [column]=\"column\" (redrawEvent)=\"$redraw($event)\"\r\n                                               (click)=\"column.click ? column.click(row,column,$event):'';\"></gt-custom-component-factory>\r\n                  <span *ngIf=\"!column.columnComponent\"\r\n                        class=\"gt-row-content\" [innerHTML]=\"column.renderValue\"\r\n                        (click)=\"column.click ? column.click(row,column,$event):''\"></span>\r\n              </td>\r\n\r\n          </tr>\r\n      </table>\r\n  `,\r\n\tstyles: []\r\n})\r\nexport class GtDrilldownComponent extends GtExpandedRow<any> implements OnInit {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tngOnInit() {}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n\tname: 'gtHighlight'\r\n})\r\nexport class GtHighlightPipe implements PipeTransform {\r\n\tconstructor(private sanitizer: DomSanitizer) {}\r\n\r\n\ttransform(text: string, searchTerm: string): SafeHtml {\r\n\t\tconst haystackAlwaysString = text + '';\r\n\t\tlet highlightedText = haystackAlwaysString; // fallback\r\n\r\n\t\tlet searchPattern;\r\n\t\ttry {\r\n\t\t\tsearchPattern = new RegExp(\r\n\t\t\t\t'(' +\r\n\t\t\t\tsearchTerm\r\n\t\t\t\t\t.toLowerCase()\r\n\t\t\t\t\t.match(/\".*?\"|[^ ]+/g) // extract words\r\n\t\t\t\t\t.map(\r\n\t\t\t\t\t\tneedle => needle.replace(/\"(.*?)\"/, '$1') // strip away '\"'\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.join('|') + // combine words\r\n\t\t\t\t\t')',\r\n\t\t\t\t'ig'\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\treturn this.sanitizer.bypassSecurityTrustHtml(highlightedText);\r\n\t\t}\r\n\r\n\t\tconst containsTagPattern = /(<.*?>)(.*)(<\\/.*?>)/gi;\r\n\t\tconst containsTagMatches = containsTagPattern.exec(haystackAlwaysString);\r\n\r\n\t\tif (containsTagMatches) {\r\n\t\t\t// tag exists in haystack\r\n\t\t\thighlightedText =\r\n\t\t\t\tcontainsTagMatches[1] +\r\n\t\t\t\tcontainsTagMatches[2].replace(\r\n\t\t\t\t\tsearchPattern,\r\n\t\t\t\t\t'<span class=\"gt-highlight-search\">$1</span>'\r\n\t\t\t\t) +\r\n\t\t\t\tcontainsTagMatches[3];\r\n\t\t} else {\r\n\t\t\thighlightedText = haystackAlwaysString.replace(\r\n\t\t\t\tsearchPattern,\r\n\t\t\t\t'<span class=\"gt-highlight-search\">$1</span>'\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn this.sanitizer.bypassSecurityTrustHtml(highlightedText);\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigSetting } from '../interfaces/gt-config-setting';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { GtRow } from '../interfaces/gt-row';\r\nimport { GtRenderField } from '../interfaces/gt-render-field';\r\nimport { GtHighlightPipe } from './gt-highlight.pipe';\r\n\r\n@Pipe({\r\n\tname: 'gtRender'\r\n})\r\nexport class GtRenderPipe<R extends GtRow> implements PipeTransform {\r\n\tconstructor(\r\n\t\tprivate sanitizer: DomSanitizer,\r\n\t\tprivate gtHighlightPipe: GtHighlightPipe\r\n\t) {}\r\n\r\n\t// TODO: move to helper functions\r\n\t/** Sort by column order */\r\n\tprivate getColumnOrder = function(a: GtConfigSetting, b: GtConfigSetting) {\r\n\t\tif (a.columnOrder < b.columnOrder) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\t/** Sort by length */\r\n\tprivate getOrderByLength = function(a: any, b: any) {\r\n\t\treturn b.length - a.length;\r\n\t};\r\n\r\n\t/** Return property */\r\n\tprivate getProperty = function(array: Array<any>, key: string) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i].objectKey === key) {\r\n\t\t\t\treturn array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\ttransform(\r\n\t\trow: any,\r\n\t\tsettings: Array<GtConfigSetting>,\r\n\t\tfields: Array<GtConfigField<R, any>>,\r\n\t\tupdated: boolean,\r\n\t\tloading: boolean,\r\n\t\thighlight: boolean = false,\r\n\t\tsearchString?: string\r\n\t): Array<GtRenderField<R, any>> {\r\n\t\t// let arr = [{\"temp\":123,\"name\":\"happy\"},{\"temp\":456,\"name\":\"dfgdfg\"},{\"temp\":789,\"name\":\"asdasd\"}];\r\n\t\t// console.log(arr,arr.map(function(item){return item.temp}));\r\n\t\t// console.log(settings.map('objectKey'));\r\n\r\n\t\t// console.log('render');\r\n\t\tconst columns: Array<string> = [];\r\n\t\tfor (let i = 0; i < settings.length; i++) {\r\n\t\t\tif (settings[i].visible !== false && settings[i].enabled !== false) {\r\n\t\t\t\tcolumns.push(settings[i].objectKey);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < fields.length; i++) {\r\n\t\t\t// console.log(!row[fields[i].objectKey]);\r\n\t\t\tif (\r\n\t\t\t\tfields[i].value &&\r\n\t\t\t\ttypeof fields[i].value === 'function' &&\r\n\t\t\t\t!row.hasOwnProperty(fields[i].objectKey)\r\n\t\t\t) {\r\n\t\t\t\trow[fields[i].objectKey] = loading ? '' : fields[i].value(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// console.log(row);\r\n\t\tconst keys: Array<any> = [];\r\n\t\tfor (const key in row) {\r\n\t\t\t// console.log(key);\r\n\t\t\tif (columns.indexOf(key) !== -1) {\r\n\t\t\t\tlet fieldSetting;\r\n\t\t\t\tfor (let i = 0; i < fields.length; i++) {\r\n\t\t\t\t\tif (fields[i].objectKey === key) {\r\n\t\t\t\t\t\tfieldSetting = fields[i];\r\n\t\t\t\t\t\t// console.log(fieldSetting);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst columnObject: GtRenderField<R, any> = {\r\n\t\t\t\t\tobjectKey: key,\r\n\t\t\t\t\tsortValue: row[key]\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// add component if defined\r\n\t\t\t\tif (fieldSetting.columnComponent) {\r\n\t\t\t\t\tcolumnObject.columnComponent = fieldSetting.columnComponent;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (loading) {\r\n\t\t\t\t\tcolumnObject.renderValue = row[key] !== null ? row[key] : '';\r\n\t\t\t\t} else if (\r\n\t\t\t\t\thighlight &&\r\n\t\t\t\t\tsearchString &&\r\n\t\t\t\t\tthis.getProperty(settings, key).search !== false\r\n\t\t\t\t) {\r\n\t\t\t\t\tcolumnObject.renderValue =\r\n\t\t\t\t\t\tfieldSetting.render && typeof fieldSetting.render === 'function'\r\n\t\t\t\t\t\t\t? this.gtHighlightPipe.transform(\r\n\t\t\t\t\t\t\t\t\tfieldSetting.render(row),\r\n\t\t\t\t\t\t\t\t\tsearchString\r\n\t\t\t\t\t\t\t  )\r\n\t\t\t\t\t\t\t: this.gtHighlightPipe.transform(\r\n\t\t\t\t\t\t\t\t\trow[key] !== null ? row[key] : '',\r\n\t\t\t\t\t\t\t\t\tsearchString\r\n\t\t\t\t\t\t\t  );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcolumnObject.renderValue =\r\n\t\t\t\t\t\tfieldSetting.render && typeof fieldSetting.render === 'function'\r\n\t\t\t\t\t\t\t? this.sanitizer.bypassSecurityTrustHtml(fieldSetting.render(row))\r\n\t\t\t\t\t\t\t: row[key] !== null\r\n\t\t\t\t\t\t\t\t? row[key]\r\n\t\t\t\t\t\t\t\t: '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (fieldSetting.click && typeof fieldSetting.click === 'function') {\r\n\t\t\t\t\tcolumnObject.click = fieldSetting.click;\r\n\t\t\t\t}\r\n\t\t\t\tif (fieldSetting.expand) {\r\n\t\t\t\t\tcolumnObject.expand = fieldSetting.expand;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkeys.push(columnObject);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tkeys.sort(function(a: any, b: any) {\r\n\t\t\treturn columns.indexOf(a.objectKey) < columns.indexOf(b.objectKey)\r\n\t\t\t\t? -1\r\n\t\t\t\t: 1;\r\n\t\t});\r\n\t\treturn keys;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { GtConfigSetting } from '../interfaces/gt-config-setting';\r\nimport { GtRow } from '../interfaces/gt-row';\r\n\r\n@Pipe({\r\n\tname: 'gtVisible'\r\n})\r\nexport class GtVisiblePipe<R extends GtRow> implements PipeTransform {\r\n\t// TODO: move to helper functions\r\n\t/** Sort by column order */\r\n\tprivate getColumnOrder = function(a: any, b: any) {\r\n\t\tif (a.columnOrder < b.columnOrder) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\tif (a.columnOrder > b.columnOrder || typeof a.columnOrder === 'undefined') {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\treturn 0;\r\n\t};\r\n\r\n\ttransform(\r\n\t\tarray: Array<any>,\r\n\t\tsettings: Array<GtConfigSetting>,\r\n\t\trefreshPipe?: boolean\r\n\t): Array<GtConfigField<R, any>> | Array<GtConfigSetting> {\r\n\t\tconst visibleColumns = settings\r\n\t\t\t.sort(this.getColumnOrder)\r\n\t\t\t.map((setting: GtConfigSetting) => {\r\n\t\t\t\tif (setting.visible !== false && setting.enabled !== false) {\r\n\t\t\t\t\treturn setting.objectKey;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\treturn array\r\n\t\t\t.filter((column: any) => {\r\n\t\t\t\treturn visibleColumns.indexOf(column.objectKey) !== -1;\r\n\t\t\t})\r\n\t\t\t.sort(function(a, b) {\r\n\t\t\t\treturn visibleColumns.indexOf(a.objectKey) <\r\n\t\t\t\t\tvisibleColumns.indexOf(b.objectKey)\r\n\t\t\t\t\t? -1\r\n\t\t\t\t\t: 1;\r\n\t\t\t});\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n\tname: 'dashCase'\r\n})\r\nexport class DashCasePipe implements PipeTransform {\r\n\ttransform(string: string): string {\r\n\t\treturn string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { GtConfigSetting } from '../interfaces/gt-config-setting';\r\nimport { GtRow } from '../interfaces/gt-row';\r\n\r\n@Pipe({\r\n\tname: 'gtProperty'\r\n})\r\nexport class GtPropertyPipe<R extends GtRow> implements PipeTransform {\r\n\ttransform(\r\n\t\tconfig: GtConfigField<R, any>[] | GtConfigSetting[],\r\n\t\tobjectKey: string,\r\n\t\tproperty: string,\r\n\t\trefresh?: boolean\r\n\t): any {\r\n\t\tlet output = null;\r\n\t\ttry {\r\n\t\t\tfor (let i = 0; i < config.length; i++) {\r\n\t\t\t\tif (config[i].objectKey === objectKey) {\r\n\t\t\t\t\toutput = config[i][property];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'cannot read property: \"' +\r\n\t\t\t\t\tproperty +\r\n\t\t\t\t\t'\" on missing key: \"' +\r\n\t\t\t\t\tobjectKey +\r\n\t\t\t\t\t'\" in config.',\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform, EventEmitter } from '@angular/core';\r\nimport { GtInformation, GtEvent } from '..';\r\n\r\n@Pipe({\r\n\tname: 'gtChunk'\r\n})\r\nexport class GtChunkPipe implements PipeTransform {\r\n\ttransform(\r\n\t\tarray: any[],\r\n\t\tgtInfo: GtInformation,\r\n\t\tchunkSize: number,\r\n\t\tpage: number,\r\n\t\trefreshPageArray: boolean,\r\n\t\trefreshData: number,\r\n\t\tgtEvent: EventEmitter<GtEvent>,\r\n\t\tdata: { exportData: Array<any> }\r\n\t): any[] {\r\n\t\tif (!Array.isArray(array)) {\r\n\t\t\treturn array;\r\n\t\t}\r\n\t\tdata.exportData = array; // store data for export\r\n\r\n\t\tconst PAGES = [];\r\n\t\tconst ENTRIES = array.length;\r\n\r\n\t\tfor (let i = 0; i < ENTRIES; i += chunkSize) {\r\n\t\t\tPAGES.push(array.slice(i, i + chunkSize));\r\n\t\t}\r\n\t\tgtInfo.visibleRecords = !PAGES[page - 1] ? [] : [...PAGES[page - 1]]; // add visible rows\r\n\t\tgtInfo.pageTotal = PAGES.length; // add number of pages\r\n\r\n\t\tsetTimeout(\r\n\t\t\t() =>\r\n\t\t\t\tgtEvent.emit({\r\n\t\t\t\t\tname: 'gt-info',\r\n\t\t\t\t\tvalue: gtInfo\r\n\t\t\t\t}),\r\n\t\t\t0\r\n\t\t);\r\n\t\treturn PAGES[page - 1];\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform, EventEmitter, Output } from '@angular/core';\r\nimport { GtInformation } from '../interfaces/gt-information';\r\n\r\n@Pipe({\r\n\tname: 'gtFilter'\r\n})\r\nexport class GtFilterPipe implements PipeTransform {\r\n\t// @Output() filterInfo = new EventEmitter();\r\n\r\n\ttransform(\r\n\t\tallRows: any[],\r\n\t\tfilterBy: Object,\r\n\t\tgtInfo: GtInformation,\r\n\t\trefreshFilter: boolean,\r\n\t\trefreshData: number\r\n\t): any[] {\r\n\t\t// console.log(allRows,filterBy);\r\n\t\tgtInfo.recordsAll = allRows.length;\r\n\t\tif (!Array.isArray(allRows) || !filterBy) {\r\n\t\t\t// gtInfo.filtered = false;\r\n\r\n\t\t\tconst length = allRows === null ? 0 : allRows.length;\r\n\t\t\tgtInfo.recordsAfterFilter = length;\r\n\t\t\treturn allRows;\r\n\t\t}\r\n\r\n\t\tconst output = [];\r\n\t\tfor (let i = 0; i < allRows.length; i++) {\r\n\t\t\tconst rowObject = allRows[i];\r\n\t\t\tlet match = true;\r\n\r\n\t\t\tfor (const property in filterBy) {\r\n\t\t\t\tif (filterBy.hasOwnProperty(property)) {\r\n\t\t\t\t\t// console.log(property);\r\n\t\t\t\t\t// console.log(filter[property].indexOf(obj[property]));\r\n\t\t\t\t\tif (filterBy[property].indexOf(rowObject[property]) === -1) {\r\n\t\t\t\t\t\tmatch = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (match) {\r\n\t\t\t\toutput.push(rowObject);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgtInfo.recordsAfterFilter = output.length; // .emit(output.length);\r\n\t\treturn output;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { GtRow } from '../interfaces/gt-row';\r\n\r\n@Pipe({\r\n\tname: 'gtOrderBy'\r\n})\r\nexport class GtOrderByPipe<R extends GtRow> implements PipeTransform {\r\n\tstatic _orderByComparator(a: any, b: any): number {\r\n\t\t// sort boolean values as strings\r\n\t\tif (typeof a === 'boolean') {\r\n\t\t\ta = a.toString();\r\n\t\t}\r\n\t\tif (typeof b === 'boolean') {\r\n\t\t\tb = b.toString();\r\n\t\t}\r\n\r\n\t\tif (\r\n\t\t\tisNaN(parseFloat(a)) ||\r\n\t\t\t!isFinite(a) ||\r\n\t\t\t(isNaN(parseFloat(b)) || !isFinite(b))\r\n\t\t) {\r\n\t\t\tif (\r\n\t\t\t\tb === null ||\r\n\t\t\t\t(typeof b === 'undefined' && (a !== null && typeof a !== 'undefined'))\r\n\t\t\t) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\tif (\r\n\t\t\t\ta === null ||\r\n\t\t\t\t(typeof a === 'undefined' && (b !== null && typeof b !== 'undefined'))\r\n\t\t\t) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\r\n\t\t\t// isn't a number so lowercase the string to properly compare\r\n\t\t\ttry {\r\n\t\t\t\tif (a.toLowerCase() < b.toLowerCase()) {\r\n\t\t\t\t\treturn -1;\r\n\t\t\t\t}\r\n\t\t\t\tif (a.toLowerCase() > b.toLowerCase()) {\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// parse strings as numbers to compare properly\r\n\t\t\tif (parseFloat(a) < parseFloat(b)) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\tif (parseFloat(a) > parseFloat(b)) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn 0; // equal each other\r\n\t}\r\n\r\n\t/** Return property */\r\n\tprivate getProperty = function(array: Array<any>, key: string) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i].objectKey === key) {\r\n\t\t\t\treturn array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t/** Return sort function */\r\n\tprivate getSortFunction(field: any) {\r\n\t\tif (!field) {\r\n\t\t\t// console.log('error trying to sort undefined field');\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (typeof field.sort === 'function') {\r\n\t\t\treturn field.sort;\r\n\t\t} else if (typeof field.value === 'function') {\r\n\t\t\treturn field.value;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\ttransform(\r\n\t\tinput: any,\r\n\t\tsortByProperties: Array<string>,\r\n\t\tfields: GtConfigField<R, any>[],\r\n\t\trefreshSorting: boolean,\r\n\t\trefreshData: number\r\n\t): any {\r\n\t\tif (!Array.isArray(input) || input === null) {\r\n\t\t\treturn input;\r\n\t\t}\r\n\t\tif (\r\n\t\t\t!Array.isArray(sortByProperties) ||\r\n\t\t\t(Array.isArray(sortByProperties) && sortByProperties.length === 1)\r\n\t\t) {\r\n\t\t\tconst propertyToCheck: string = sortByProperties[0];\r\n\t\t\tconst desc = propertyToCheck.substr(0, 1) === '-';\r\n\r\n\t\t\t// basic array\r\n\t\t\tif (\r\n\t\t\t\t!propertyToCheck ||\r\n\t\t\t\tpropertyToCheck === '-' ||\r\n\t\t\t\tpropertyToCheck === '+'\r\n\t\t\t) {\r\n\t\t\t\treturn !desc ? input.sort() : input.sort().reverse();\r\n\t\t\t} else {\r\n\t\t\t\tconst property: string =\r\n\t\t\t\t\tpropertyToCheck.substr(0, 1) === '+' ||\r\n\t\t\t\t\tpropertyToCheck.substr(0, 1) === '-'\r\n\t\t\t\t\t\t? propertyToCheck.substr(1)\r\n\t\t\t\t\t\t: propertyToCheck;\r\n\r\n\t\t\t\t// check if custom sort function is defined\r\n\t\t\t\tconst sortFunction: any = this.getSortFunction(\r\n\t\t\t\t\tthis.getProperty(fields, property)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// console.log(property);\r\n\t\t\t\treturn input.sort(function(a: any, b: any) {\r\n\t\t\t\t\t// use custom sort function if one is defined\r\n\t\t\t\t\tconst propertyA =\r\n\t\t\t\t\t\tsortFunction === false\r\n\t\t\t\t\t\t\t? property === '$$gtRowId'\r\n\t\t\t\t\t\t\t\t? +a.$$gtRowId.split('_')[0]\r\n\t\t\t\t\t\t\t\t: a[property]\r\n\t\t\t\t\t\t\t: sortFunction(a);\r\n\t\t\t\t\tconst propertyB =\r\n\t\t\t\t\t\tsortFunction === false\r\n\t\t\t\t\t\t\t? property === '$$gtRowId'\r\n\t\t\t\t\t\t\t\t? +b.$$gtRowId.split('_')[0]\r\n\t\t\t\t\t\t\t\t: b[property]\r\n\t\t\t\t\t\t\t: sortFunction(b);\r\n\r\n\t\t\t\t\t// if both values are undefined...\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\ttypeof propertyA === 'undefined' &&\r\n\t\t\t\t\t\ttypeof propertyB === 'undefined'\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\t// ...skip comparison\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn !desc\r\n\t\t\t\t\t\t? GtOrderByPipe._orderByComparator(propertyA, propertyB)\r\n\t\t\t\t\t\t: -GtOrderByPipe._orderByComparator(propertyA, propertyB);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// loop over property of the array in order and sort\r\n\t\t\treturn input.sort((a: any, b: any) => {\r\n\t\t\t\t// console.log('multiple');\r\n\t\t\t\tfor (let i = 0; i < sortByProperties.length; i++) {\r\n\t\t\t\t\tconst desc = sortByProperties[i].substr(0, 1) === '-';\r\n\t\t\t\t\tconst property =\r\n\t\t\t\t\t\tsortByProperties[i].substr(0, 1) === '+' ||\r\n\t\t\t\t\t\tsortByProperties[i].substr(0, 1) === '-'\r\n\t\t\t\t\t\t\t? sortByProperties[i].substr(1)\r\n\t\t\t\t\t\t\t: sortByProperties[i];\r\n\r\n\t\t\t\t\t// console.log(property);\r\n\t\t\t\t\t// check if custom sort function is defined\r\n\t\t\t\t\tconst sortFunction: any = this.getSortFunction(\r\n\t\t\t\t\t\tthis.getProperty(fields, property)\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// use custom sort function if one is defined\r\n\t\t\t\t\tconst propertyA =\r\n\t\t\t\t\t\tsortFunction === false\r\n\t\t\t\t\t\t\t? property === '$$gtRowId'\r\n\t\t\t\t\t\t\t\t? +a.$$gtRowId.split('_')[0]\r\n\t\t\t\t\t\t\t\t: a[property]\r\n\t\t\t\t\t\t\t: sortFunction(a);\r\n\t\t\t\t\tconst propertyB =\r\n\t\t\t\t\t\tsortFunction === false\r\n\t\t\t\t\t\t\t? property === '$$gtRowId'\r\n\t\t\t\t\t\t\t\t? +b.$$gtRowId.split('_')[0]\r\n\t\t\t\t\t\t\t\t: b[property]\r\n\t\t\t\t\t\t\t: sortFunction(b);\r\n\r\n\t\t\t\t\tconst comparison = !desc\r\n\t\t\t\t\t\t? GtOrderByPipe._orderByComparator(propertyA, propertyB)\r\n\t\t\t\t\t\t: -GtOrderByPipe._orderByComparator(propertyA, propertyB);\r\n\r\n\t\t\t\t\t// don't return 0 yet in case of needing to sort by next property\r\n\t\t\t\t\tif (comparison !== 0) {\r\n\t\t\t\t\t\treturn comparison;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn 0; // equal each other\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { GtRow } from '../interfaces/gt-row';\r\nimport { GtConfigSetting } from '../interfaces/gt-config-setting';\r\nimport { GtInformation } from '../interfaces/gt-information';\r\n\r\n@Pipe({\r\n\tname: 'gtSearch'\r\n})\r\nexport class GtSearchPipe<R extends GtRow> implements PipeTransform {\r\n\t/** Return property */\r\n\tprivate getProperty = function(array: Array<any>, key: string) {\r\n\t\tfor (let i = 0; i < array.length; i++) {\r\n\t\t\tif (array[i].objectKey === key) {\r\n\t\t\t\treturn array[i];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\ttransform(\r\n\t\tallRows: any,\r\n\t\tsearchTerms: string,\r\n\t\tgtInfo: GtInformation,\r\n\t\tsettings: Array<GtConfigSetting>,\r\n\t\tfields: Array<GtConfigField<R, any>>,\r\n\t\trefreshData: number\r\n\t): any {\r\n\t\t//  if no search terms are defined...\r\n\t\tif (!searchTerms || searchTerms.replace(/\"/g, '').length === 0) {\r\n\t\t\t// ...return all rows\r\n\t\t\tconst length = allRows === null ? 0 : allRows.length;\r\n\t\t\tgtInfo.recordsAfterSearch = length;\r\n\t\t\treturn allRows;\r\n\t\t}\r\n\r\n\t\tconst searchFunction: any = {};\r\n\t\tconst fieldsTemp: Array<any> = [];\r\n\r\n\t\tfor (let k = 0; k < fields.length; k++) {\r\n\t\t\tconst field = fields[k];\r\n\r\n\t\t\t// check if field should be included in global search\r\n\t\t\tconst include =\r\n\t\t\t\tthis.getProperty(settings, field.objectKey).search === false\r\n\t\t\t\t\t? false\r\n\t\t\t\t\t: true;\r\n\r\n\t\t\t// if include...\r\n\t\t\tif (include) {\r\n\t\t\t\t// ...and if search function is defined...\r\n\t\t\t\tif (typeof field.search === 'function') {\r\n\t\t\t\t\t// ...add it as search function for field\r\n\t\t\t\t\tsearchFunction[field.objectKey] = field.search;\r\n\t\t\t\t}\r\n\t\t\t\t// ...if no search function is defined but value function is defined...\r\n\t\t\t\telse if (typeof field.value === 'function') {\r\n\t\t\t\t\t// ...add it as search function for field\r\n\t\t\t\t\tsearchFunction[field.objectKey] = field.value;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// ...push it to our fields array\r\n\t\t\t\tfieldsTemp.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst filteredRows: Array<any> = [];\r\n\t\tsearchTerms = typeof searchTerms === 'undefined' ? '' : searchTerms;\r\n\t\tconst searchTermsArray = searchTerms.toLowerCase().match(/(\".*\"|[^\\s]+)/g);\r\n\r\n\t\tfor (let i = 0; i < allRows.length; i++) {\r\n\t\t\tconst row = allRows[i];\r\n\t\t\tlet string = '';\r\n\r\n\t\t\tfor (let j = 0; j < fieldsTemp.length; j++) {\r\n\t\t\t\tconst separator = j === 0 ? '' : ' & ';\r\n\t\t\t\tstring += searchFunction[fieldsTemp[j].objectKey]\r\n\t\t\t\t\t? separator + searchFunction[fieldsTemp[j].objectKey](row, j)\r\n\t\t\t\t\t: separator + row[fieldsTemp[j].objectKey];\r\n\t\t\t}\r\n\t\t\tstring = string.toLowerCase();\r\n\t\t\tlet match: Boolean = true;\r\n\r\n\t\t\tfor (let k = 0; k < searchTermsArray.length; k++) {\r\n\t\t\t\tconst term = searchTermsArray[k].replace(/\"/g, '');\r\n\t\t\t\tmatch = string.indexOf(term) !== -1;\r\n\r\n\t\t\t\tif (!match) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (match) {\r\n\t\t\t\tfilteredRows.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgtInfo.recordsAfterSearch = filteredRows.length;\r\n\t\t// gtInfo.refresh(filteredRows.length,gt);\r\n\t\treturn filteredRows;\r\n\t}\r\n}\r\n","import {\r\n\tComponentFactory,\r\n\tComponentFactoryResolver,\r\n\tComponentRef,\r\n\tDirective,\r\n\tEventEmitter,\r\n\tInjector,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput,\r\n\tType,\r\n\tViewContainerRef\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n\tselector: '[gtComponentAnchor]'\r\n})\r\nexport class ComponentAnchorDirective<C> implements OnInit {\r\n\t@Input() ctor: Type<C>;\r\n\t@Input() injector: Injector;\r\n\t@Output() instance: EventEmitter<C> = new EventEmitter<C>();\r\n\r\n\tconstructor(\r\n\t\tprivate componentFactoryResolver: ComponentFactoryResolver,\r\n\t\tprivate viewContainer: ViewContainerRef\r\n\t) {}\r\n\r\n\tngOnInit(): void {\r\n\t\tconst factory: ComponentFactory<\r\n\t\t\tC\r\n\t\t> = this.componentFactoryResolver.resolveComponentFactory(this.ctor);\r\n\t\tconst component: ComponentRef<C> = this.viewContainer.createComponent(\r\n\t\t\tfactory,\r\n\t\t\t0,\r\n\t\t\tthis.injector\r\n\t\t);\r\n\t\tthis.instance.emit(component.instance);\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInjector,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput,\r\n\tType\r\n} from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\r\n\r\nexport abstract class GtCustomComponent<R> implements OnInit {\r\n\trow: R;\r\n\tcolumn: any;\r\n\tredrawEvent = new EventEmitter<{ row: R; column: any }>();\r\n\tsearchTerms: string;\r\n\t$searchTerms: ReplaySubject<string> = new ReplaySubject(1);\r\n\r\n\tprotected $redraw($event?: any) {\r\n\t\tthis.redrawEvent.emit({ row: this.row, column: this.column });\r\n\t}\r\n\tngOnInit() {\r\n\t\tthis.$searchTerms.subscribe(terms => (this.searchTerms = terms));\r\n\t}\r\n}\r\n\r\n@Component({\r\n\tselector: 'gt-custom-component-factory',\r\n\ttemplate: `<div gtComponentAnchor [ctor]=\"type\"\r\n                    [injector]=\"injector\"\r\n                    (instance)=\"instance($event)\"></div>`\r\n})\r\nexport class GtCustomComponentFactory<R, C extends GtCustomComponent<R>> {\r\n\t@Input()\r\n\tset searchTerms(value: string) {\r\n\t\tthis.$searchTerms.next(value);\r\n\t}\r\n\t@Input() type: Type<C>;\r\n\t@Input() injector: Injector;\r\n\t@Input() row: R;\r\n\t@Input() column: any;\r\n\t$searchTerms: ReplaySubject<string> = new ReplaySubject(1);\r\n\t@Output() redrawEvent = new EventEmitter<{ row: R; column: any }>();\r\n\r\n\tinstance(instance: C) {\r\n\t\tinstance.row = this.row;\r\n\t\tinstance.column = this.column;\r\n\t\tinstance.$searchTerms = this.$searchTerms;\r\n\t\tinstance.redrawEvent.subscribe(this.redrawEvent);\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tInput,\r\n\tOnDestroy,\r\n\tOnInit,\r\n\tOutput,\r\n\tRenderer2\r\n} from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport * as Tether from 'tether';\r\n\r\n@Component({\r\n\tselector: 'gt-dropdown',\r\n\ttemplate: `\r\n    <div class=\"dropdown gt-dropdown\" [ngClass]=\"{'show':active}\" [attr.id]=\"id\">\r\n      <div class=\"dropdown-toggle\" (click)=\"toggleDropdown()\" [attr.aria-expanded]=\"active\">{{selected}}</div>\r\n      <div class=\"gt-dropdown-menu dropdown-menu\" *ngIf=\"active\" [ngClass]=\"{'show':active}\" [attr.id]=\"id+'_menu'\">\r\n        <button *ngFor=\"let option of options;\" class=\"dropdown-item\" (click)=\"select(option)\" [ngClass]=\"{'active':option === selected}\">{{option}}</button>\r\n      </div>\r\n    </div>\r\n  `,\r\n\tstyles: [\r\n\t\t`\r\n    .gt-dropdown .dropdown-toggle {\r\n      cursor: pointer;\r\n    }\r\n    .gt-dropdown .dropdown-toggle::after {\r\n      transition: opacity 0.4s ease-in-out;\r\n      opacity: 0;\r\n    }\r\n    .gt-dropdown .dropdown-toggle:hover::after {\r\n      opacity: 1;\r\n    }\r\n  `\r\n\t]\r\n})\r\nexport class GtDropdownComponent implements OnInit, OnDestroy {\r\n\tget selected() {\r\n\t\treturn this._selected;\r\n\t}\r\n\r\n\t_selected: any;\r\n\t@Input()\r\n\tset selected(selection) {\r\n\t\tthis._selected = selection;\r\n\t}\r\n\t@Input() options: Array<any>;\r\n\t@Input() id: string;\r\n\t@Output() selectedChange: EventEmitter<any> = new EventEmitter();\r\n\r\n\tactive = false; // is dropdown active or not\r\n\tstate: Subject<boolean> = new Subject(); // current state of dropdown\r\n\ttether: any;\r\n\tclickListener: Function;\r\n\tkeyupListener: Function;\r\n\r\n\tconstructor(private renderer: Renderer2) {}\r\n\r\n\tselect(option: any) {\r\n\t\tthis.active = false;\r\n\t\tthis.state.next(this.active);\r\n\t\tif (this._selected !== option) {\r\n\t\t\tthis.selectedChange.emit(option);\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleDropdown() {\r\n\t\tthis.active = !this.active;\r\n\t\tsetTimeout(() => {\r\n\t\t\tthis.state.next(this.active);\r\n\t\t}, 0);\r\n\t}\r\n\r\n\tngOnInit() {\r\n\t\tthis.state.subscribe(state => {\r\n\t\t\tif (state) {\r\n\t\t\t\tthis.tether = new Tether({\r\n\t\t\t\t\telement: '#' + this.id + '_menu',\r\n\t\t\t\t\ttarget: '#' + this.id,\r\n\t\t\t\t\tattachment: 'top left',\r\n\t\t\t\t\ttargetAttachment: 'bottom left',\r\n\t\t\t\t\tconstraints: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tto: 'window',\r\n\t\t\t\t\t\t\tattachment: 'together'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.tether.position();\r\n\r\n\t\t\t\t// set up click listener and listen for click outside dropdown\r\n\t\t\t\tthis.clickListener = this.renderer.listen(\r\n\t\t\t\t\t'document',\r\n\t\t\t\t\t'click',\r\n\t\t\t\t\t(event: MouseEvent) => {\r\n\t\t\t\t\t\tthis.active = false;\r\n\t\t\t\t\t\tthis.state.next(this.active);\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// set up keyboard listener and listen for escape key up\r\n\t\t\t\tthis.keyupListener = this.renderer.listen(\r\n\t\t\t\t\t'document',\r\n\t\t\t\t\t'keyup',\r\n\t\t\t\t\t(event: KeyboardEvent) => {\r\n\t\t\t\t\t\tswitch (event.key) {\r\n\t\t\t\t\t\t\tcase 'Escape':\r\n\t\t\t\t\t\t\t\tthis.active = false;\r\n\t\t\t\t\t\t\t\tthis.state.next(this.active);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\tthis.tether.destroy();\r\n\t\t\t\tthis.removeListeners();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tngOnDestroy() {\r\n\t\tthis.removeListeners();\r\n\t}\r\n\r\n\tremoveListeners() {\r\n\t\tif (this.clickListener) {\r\n\t\t\tthis.clickListener();\r\n\t\t}\r\n\t\tif (this.keyupListener) {\r\n\t\t\tthis.keyupListener();\r\n\t\t}\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n\tname: 'gtTotals'\r\n})\r\nexport class GtTotalsPipe implements PipeTransform {\r\n\ttransform(\r\n\t\tvalue: string | number | Function,\r\n\t\tdata: Array<any>,\r\n\t\tobjectKey: string,\r\n\t\trefresh: boolean\r\n\t): any {\r\n\t\tlet output;\r\n\r\n\t\tif (data.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (typeof value === 'function') {\r\n\t\t\toutput = value(data, objectKey);\r\n\t\t} else if (value) {\r\n\t\t\toutput = value;\r\n\t\t} else {\r\n\t\t\toutput = '';\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigTotal } from '../interfaces/gt-config-total';\r\n\r\n@Pipe({\r\n\tname: 'gtTotalsPosition'\r\n})\r\nexport class GtTotalsPositionPipe implements PipeTransform {\r\n\ttransform(\r\n\t\tarray: Array<GtConfigTotal>,\r\n\t\tposition: 'header' | 'footer' = 'header'\r\n\t): Array<any> {\r\n\t\treturn array.filter(total => {\r\n\t\t\t// if no position is defined assume position to be header\r\n\t\t\tconst totalPosition = total.position ? total.position : 'header';\r\n\t\t\treturn totalPosition === position;\r\n\t\t});\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\n\r\n@Pipe({\r\n\tname: 'gtRowClass'\r\n})\r\nexport class GtRowClassPipe implements PipeTransform {\r\n\ttransform(array: Array<any>, gtFields: Array<GtConfigField<any, any>>): any {\r\n\t\tif (array) {\r\n\t\t\t// find columns with rowClass property defined\r\n\t\t\tconst COLUMNS_WITH_CLASS = gtFields\r\n\t\t\t\t.map(column => column)\r\n\t\t\t\t.filter(column => column.rowClass);\r\n\t\t\tCOLUMNS_WITH_CLASS.map(column => {\r\n\t\t\t\t// for each column with rowClass property defined...\r\n\t\t\t\tarray.map(row => {\r\n\t\t\t\t\t// loop through rows and set row class\r\n\t\t\t\t\tif (typeof column.rowClass === 'function') {\r\n\t\t\t\t\t\t// if row class is a function, try using the function...\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tif (row.$$gtRowClass) {\r\n\t\t\t\t\t\t\t\trow.$$gtRowClass = row.$$gtRowClass.concat(\r\n\t\t\t\t\t\t\t\t\t' ' + column.rowClass(row, column)\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\trow.$$gtRowClass = column.rowClass(row, column);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'Error when trying to get row class name using formula.',\r\n\t\t\t\t\t\t\t\terror\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// if not a function, return plain string value\r\n\t\t\t\t\t\tif (row.$$gtRowClass) {\r\n\t\t\t\t\t\t\trow.$$gtRowClass = row.$$gtRowClass.concat(' ' + column.rowClass);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trow.$$gtRowClass = column.rowClass;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn array;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { GtConfigField } from '../interfaces/gt-config-field';\r\nimport { GtRow } from '../interfaces/gt-row';\r\n\r\n@Pipe({\r\n\tname: 'gtColumnClass'\r\n})\r\nexport class GtColumnClassPipe implements PipeTransform {\r\n\ttransform(\r\n\t\tgtFields: Array<GtConfigField<any, any>>,\r\n\t\tcolumn: GtConfigField<GtRow, any>,\r\n\t\trow?: GtRow\r\n\t): any {\r\n\t\t// find columns with columnClass property defined\r\n\t\tconst COLUMN_WITH_CLASS = gtFields\r\n\t\t\t.map(field => field)\r\n\t\t\t.filter(\r\n\t\t\t\tfield => field.columnClass && field.objectKey === column.objectKey\r\n\t\t\t)[0];\r\n\t\tif (!COLUMN_WITH_CLASS) {\r\n\t\t\treturn;\r\n\t\t} else if (typeof COLUMN_WITH_CLASS.columnClass === 'function') {\r\n\t\t\t// if column class is a function, try using the function...\r\n\t\t\ttry {\r\n\t\t\t\treturn COLUMN_WITH_CLASS.columnClass(row, column);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t'Error when trying to get column class name using formula.',\r\n\t\t\t\t\terror\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// if not a function, return plain string value\r\n\t\t\treturn COLUMN_WITH_CLASS.columnClass;\r\n\t\t}\r\n\t}\r\n}\r\n","import {\r\n\tChangeDetectorRef,\r\n\tDirective,\r\n\tElementRef,\r\n\tHostListener,\r\n\tInput,\r\n\tOnInit\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n\tselector: '[gtColumnWidth]'\r\n})\r\nexport class GtColumnWidthDirective implements OnInit {\r\n\t@Input() objectKey: string;\r\n\t@Input() widths: Object;\r\n\t@HostListener('window:resize', ['$event'])\r\n\tpublic onResize($event: any) {\r\n\t\tthis.checkSize();\r\n\t}\r\n\tconstructor(\r\n\t\tprivate hostElement: ElementRef,\r\n\t\tprivate cdRef: ChangeDetectorRef\r\n\t) {}\r\n\tngOnInit() {\r\n\t\tthis.checkSize();\r\n\t}\r\n\r\n\tcheckSize() {\r\n\t\tthis.widths[this.objectKey] = window\r\n\t\t\t.getComputedStyle(this.hostElement.nativeElement, null)\r\n\t\t\t.getPropertyValue('width');\r\n\t\tthis.cdRef.detectChanges();\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tEventEmitter,\r\n\tHostBinding,\r\n\tInput,\r\n\tOnInit,\r\n\tOutput\r\n} from '@angular/core';\r\n\r\n@Component({\r\n\tselector: 'gt-checkbox',\r\n\ttemplate: `\r\n    <label class=\"custom-control custom-checkbox p-0\" (click)=\"$event.stopPropagation()\">\r\n      <input #checkbox type=\"checkbox\" class=\"custom-control-input\" [(checked)]=\"checked\" (change)=\"toggle($event);\">\r\n      <span class=\"custom-control-label\"></span>\r\n    </label>\r\n  `,\r\n\tstyles: []\r\n})\r\nexport class GtCheckboxComponent implements OnInit {\r\n\tget initialValue(): boolean {\r\n\t\treturn this._initialValue;\r\n\t}\r\n\r\n\t@HostBinding('class') class = 'd-flex justify-content-end';\r\n\r\n\t@Input()\r\n\tset initialValue(value: boolean) {\r\n\t\tthis._initialValue = value;\r\n\t}\r\n\tget checked(): boolean {\r\n\t\treturn this._checked;\r\n\t}\r\n\r\n\t@Input()\r\n\tset checked(value: boolean) {\r\n\t\tthis._checked = value;\r\n\t}\r\n\r\n\tprivate _checked: boolean;\r\n\tprivate _initialValue: boolean;\r\n\t@Output() changed: EventEmitter<boolean> = new EventEmitter();\r\n\r\n\tconstructor() {}\r\n\r\n\tngOnInit() {}\r\n\r\n\ttoggle(checked: boolean) {\r\n\t\tthis.changed.emit(this.checked);\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Pipe({\r\n\tname: 'gtIsObservable'\r\n})\r\nexport class GtIsObservablePipe implements PipeTransform {\r\n\ttransform(input: any): boolean {\r\n\t\treturn input instanceof Observable;\r\n\t}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Pipe({\r\n\tname: 'gtIsEditable'\r\n})\r\nexport class GtIsEditablePipe implements PipeTransform {\r\n\ttransform(property: any, row: any, refreshPipe: boolean): boolean {\r\n\t\tif (typeof property === 'function') {\r\n\t\t\treturn property(row);\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { GenericTableComponent } from './components/generic-table.component';\r\nimport { GtRenderPipe } from './pipes/gt-render.pipe';\r\nimport { GtVisiblePipe } from './pipes/gt-visible.pipe';\r\nimport { DashCasePipe } from './pipes/dash-case.pipe';\r\nimport { GtPropertyPipe } from './pipes/gt-property.pipe';\r\nimport { GtChunkPipe } from './pipes/gt-chunk.pipe';\r\nimport { GtFilterPipe } from './pipes/gt-filter.pipe';\r\nimport { GtOrderByPipe } from './pipes/gt-order-by.pipe';\r\nimport { GtExpandingRowComponent } from './components/gt-expanding-row.component';\r\nimport { GtSearchPipe } from './pipes/gt-search.pipe';\r\nimport { ComponentAnchorDirective } from './directives/component-anchor.directive';\r\nimport {\r\n\tGtPaginationComponent,\r\n\tPaginationPipe\r\n} from './components/gt-pagination.component';\r\nimport {\r\n\tGtTableInfoComponent,\r\n\tTableInfoPipe\r\n} from './components/gt-table-info.component';\r\nimport { GtCustomComponentFactory } from './components/gt-custom-component-factory';\r\nimport { GtMetaPipe } from './pipes/gt-meta.pipe';\r\nimport { GtDropdownComponent } from './components/gt-dropdown.component';\r\nimport { GtTotalsPipe } from './pipes/gt-totals.pipe';\r\nimport { GtTotalsPositionPipe } from './pipes/gt-totals-position.pipe';\r\nimport { GtRowClassPipe } from './pipes/gt-row-class.pipe';\r\nimport { GtColumnClassPipe } from './pipes/gt-column-class.pipe';\r\nimport { GtColumnWidthDirective } from './directives/gt-column-width.directive';\r\nimport { GtDrilldownComponent } from './components/gt-drilldown.component';\r\nimport { GtCheckboxComponent } from './components/gt-checkbox/gt-checkbox.component';\r\nimport { GtHighlightPipe } from './pipes/gt-highlight.pipe';\r\nimport { GtIsObservablePipe } from './pipes/gt-is-observable.pipe';\r\nimport { GtIsEditablePipe } from './pipes/gt-is-editable.pipe';\r\n\r\n@NgModule({\r\n\tdeclarations: [\r\n\t\tComponentAnchorDirective,\r\n\t\tGenericTableComponent,\r\n\t\tGtPaginationComponent,\r\n\t\tGtVisiblePipe,\r\n\t\tGtRenderPipe,\r\n\t\tDashCasePipe,\r\n\t\tGtPropertyPipe,\r\n\t\tGtChunkPipe,\r\n\t\tGtFilterPipe,\r\n\t\tGtOrderByPipe,\r\n\t\tGtExpandingRowComponent,\r\n\t\tGtCustomComponentFactory,\r\n\t\tGtSearchPipe,\r\n\t\tPaginationPipe,\r\n\t\tGtTableInfoComponent,\r\n\t\tTableInfoPipe,\r\n\t\tGtMetaPipe,\r\n\t\tGtTotalsPipe,\r\n\t\tGtTotalsPositionPipe,\r\n\t\tGtRowClassPipe,\r\n\t\tGtColumnClassPipe,\r\n\t\tGtHighlightPipe,\r\n\t\tGtIsObservablePipe,\r\n\t\tGtIsEditablePipe,\r\n\t\tGtDropdownComponent,\r\n\t\tGtColumnWidthDirective,\r\n\t\tGtDrilldownComponent,\r\n\t\tGtCheckboxComponent\r\n\t],\r\n\timports: [CommonModule, FormsModule],\r\n\texports: [\r\n\t\tGenericTableComponent,\r\n\t\tGtPaginationComponent,\r\n\t\tGtTableInfoComponent,\r\n\t\tGtPropertyPipe,\r\n\t\tGtHighlightPipe,\r\n\t\tGtExpandingRowComponent,\r\n\t\tGtDropdownComponent,\r\n\t\tGtDrilldownComponent,\r\n\t\tGtCheckboxComponent\r\n\t],\r\n\tentryComponents: [GtDrilldownComponent, GtCheckboxComponent],\r\n\tproviders: [GtMetaPipe, GtHighlightPipe],\r\n\tbootstrap: []\r\n})\r\nexport class GenericTableModule {}\r\n"]}