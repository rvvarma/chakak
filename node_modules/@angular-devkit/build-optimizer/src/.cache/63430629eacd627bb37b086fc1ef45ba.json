{"remainingRequest":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\ngx-cookie\\fesm5\\ngx-cookie.js","dependencies":[{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\ngx-cookie\\fesm5\\ngx-cookie.js","mtime":1552651994000},{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552651994000},{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1552651994000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common,tslib,_nguniversal_express_engine_tokens PURE_IMPORTS_END */\nimport { Inject, Injectable, InjectionToken, Injector, NgModule } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\nimport { __extends } from 'tslib';\nimport { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isBlank(obj) {\n    return obj === undefined || obj === null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isPresent(obj) {\n    return obj !== undefined && obj !== null;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isString(obj) {\n    return typeof obj === 'string';\n}\n/**\n * @param {?} oldOptions\n * @param {?=} newOptions\n * @return {?}\n */\nfunction mergeOptions(oldOptions, newOptions) {\n    if (!newOptions) {\n        return oldOptions;\n    }\n    return {\n        path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n        domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n        expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n        secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n        httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n        storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n    };\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction safeDecodeURIComponent(str) {\n    try {\n        return decodeURIComponent(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction safeJsonParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return str;\n    }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar COOKIE_OPTIONS = /*@__PURE__*/ new InjectionToken('COOKIE_OPTIONS');\nvar CookieOptionsProvider = /** @class */ /*@__PURE__*/ (function () {\n    function CookieOptionsProvider(options, _injector) {\n        if (options === void 0) {\n            options = {};\n        }\n        this._injector = _injector;\n        this.defaultOptions = {\n            path: this._injector.get(APP_BASE_HREF, '/'),\n            domain: null,\n            expires: null,\n            secure: false,\n            httpOnly: false\n        };\n        this._options = mergeOptions(this.defaultOptions, options);\n    }\n    Object.defineProperty(CookieOptionsProvider.prototype, \"options\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._options;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CookieOptionsProvider;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar CookieService = /** @class */ /*@__PURE__*/ (function () {\n    function CookieService(_optionsProvider) {\n        this._optionsProvider = _optionsProvider;\n        this.options = this._optionsProvider.options;\n    }\n    Object.defineProperty(CookieService.prototype, \"cookieString\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return document.cookie || '';\n        },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            document.cookie = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name CookieService#get\n     *\n     * @description\n     * Returns the value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Raw cookie value.\n     */\n    /**\n     * \\@name CookieService#get\n     *\n     * \\@description\n     * Returns the value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Raw cookie value.\n     */\n    CookieService.prototype.get = /**\n     * \\@name CookieService#get\n     *\n     * \\@description\n     * Returns the value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Raw cookie value.\n     */\n        function (key) {\n            return (( /** @type {?} */(this._cookieReader())))[key];\n        };\n    /**\n     * @name CookieService#getObject\n     *\n     * @description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Deserialized cookie value.\n     */\n    /**\n     * \\@name CookieService#getObject\n     *\n     * \\@description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Deserialized cookie value.\n     */\n    CookieService.prototype.getObject = /**\n     * \\@name CookieService#getObject\n     *\n     * \\@description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param {?} key Id to use for lookup.\n     * @return {?} Deserialized cookie value.\n     */\n        function (key) {\n            /** @type {?} */\n            var value = this.get(key);\n            return value ? safeJsonParse(value) : value;\n        };\n    /**\n     * @name CookieService#getAll\n     *\n     * @description\n     * Returns a key value object with all the cookies.\n     *\n     * @returns All cookies\n     */\n    /**\n     * \\@name CookieService#getAll\n     *\n     * \\@description\n     * Returns a key value object with all the cookies.\n     *\n     * @return {?} All cookies\n     */\n    CookieService.prototype.getAll = /**\n     * \\@name CookieService#getAll\n     *\n     * \\@description\n     * Returns a key value object with all the cookies.\n     *\n     * @return {?} All cookies\n     */\n        function () {\n            return ( /** @type {?} */(this._cookieReader()));\n        };\n    /**\n     * @name CookieService#put\n     *\n     * @description\n     * Sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Raw value to be stored.\n     * @param options (Optional) Options object.\n     */\n    /**\n     * \\@name CookieService#put\n     *\n     * \\@description\n     * Sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Raw value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n    CookieService.prototype.put = /**\n     * \\@name CookieService#put\n     *\n     * \\@description\n     * Sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Raw value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n        function (key, value, options) {\n            this._cookieWriter()(key, value, options);\n        };\n    /**\n     * @name CookieService#putObject\n     *\n     * @description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Value to be stored.\n     * @param options (Optional) Options object.\n     */\n    /**\n     * \\@name CookieService#putObject\n     *\n     * \\@description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n    CookieService.prototype.putObject = /**\n     * \\@name CookieService#putObject\n     *\n     * \\@description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param {?} key Id for the `value`.\n     * @param {?} value Value to be stored.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n        function (key, value, options) {\n            this.put(key, JSON.stringify(value), options);\n        };\n    /**\n     * @name CookieService#remove\n     *\n     * @description\n     * Remove given cookie.\n     *\n     * @param key Id of the key-value pair to delete.\n     * @param options (Optional) Options object.\n     */\n    /**\n     * \\@name CookieService#remove\n     *\n     * \\@description\n     * Remove given cookie.\n     *\n     * @param {?} key Id of the key-value pair to delete.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n    CookieService.prototype.remove = /**\n     * \\@name CookieService#remove\n     *\n     * \\@description\n     * Remove given cookie.\n     *\n     * @param {?} key Id of the key-value pair to delete.\n     * @param {?=} options (Optional) Options object.\n     * @return {?}\n     */\n        function (key, options) {\n            this._cookieWriter()(key, undefined, options);\n        };\n    /**\n     * @name CookieService#removeAll\n     *\n     * @description\n     * Remove all cookies.\n     */\n    /**\n     * \\@name CookieService#removeAll\n     *\n     * \\@description\n     * Remove all cookies.\n     * @param {?=} options\n     * @return {?}\n     */\n    CookieService.prototype.removeAll = /**\n     * \\@name CookieService#removeAll\n     *\n     * \\@description\n     * Remove all cookies.\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            var _this = this;\n            /** @type {?} */\n            var cookies = this.getAll();\n            Object.keys(cookies).forEach(function (key) {\n                _this.remove(key, options);\n            });\n        };\n    /**\n     * @return {?}\n     */\n    CookieService.prototype._cookieReader = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var lastCookies = {};\n            /** @type {?} */\n            var lastCookieString = '';\n            /** @type {?} */\n            var cookieArray;\n            /** @type {?} */\n            var cookie;\n            /** @type {?} */\n            var i;\n            /** @type {?} */\n            var index;\n            /** @type {?} */\n            var name;\n            /** @type {?} */\n            var currentCookieString = this.cookieString;\n            if (currentCookieString !== lastCookieString) {\n                lastCookieString = currentCookieString;\n                cookieArray = lastCookieString.split('; ');\n                lastCookies = {};\n                for (i = 0; i < cookieArray.length; i++) {\n                    cookie = cookieArray[i];\n                    index = cookie.indexOf('=');\n                    if (index > 0) { // ignore nameless cookies\n                        name = safeDecodeURIComponent(cookie.substring(0, index));\n                        // the first value that is seen for a cookie is the most\n                        // specific one.  values for the same cookie name that\n                        // follow are for less specific paths.\n                        if (isBlank((( /** @type {?} */(lastCookies)))[name])) {\n                            (( /** @type {?} */(lastCookies)))[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n                        }\n                    }\n                }\n            }\n            return lastCookies;\n        };\n    /**\n     * @return {?}\n     */\n    CookieService.prototype._cookieWriter = /**\n     * @return {?}\n     */\n        function () {\n            /** @type {?} */\n            var that = this;\n            return function (name, value, options) {\n                that.cookieString = that._buildCookieString(name, value, options);\n            };\n        };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n    CookieService.prototype._buildCookieString = /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?=} options\n     * @return {?}\n     */\n        function (name, value, options) {\n            /** @type {?} */\n            var opts = mergeOptions(this.options, options);\n            /** @type {?} */\n            var expires = opts.expires;\n            if (isBlank(value)) {\n                expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n                value = '';\n            }\n            if (isString(expires)) {\n                expires = new Date(expires);\n            }\n            /** @type {?} */\n            var cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n            /** @type {?} */\n            var str = encodeURIComponent(name) + '=' + cookieValue;\n            str += opts.path ? ';path=' + opts.path : '';\n            str += opts.domain ? ';domain=' + opts.domain : '';\n            str += expires ? ';expires=' + expires.toUTCString() : '';\n            str += opts.secure ? ';secure' : '';\n            str += opts.httpOnly ? '; HttpOnly' : '';\n            // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n            // - 300 cookies\n            // - 20 cookies per unique domain\n            // - 4096 bytes per cookie\n            /** @type {?} */\n            var cookieLength = str.length + 1;\n            if (cookieLength > 4096) {\n                console.log(\"Cookie '\" + name + \"' possibly not set or overflowed because it was too large (\" + cookieLength + \" > 4096 bytes)!\");\n            }\n            return str;\n        };\n    return CookieService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar CookieBackendService = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(CookieBackendService, _super);\n    function CookieBackendService(request, response, _optionsProvider) {\n        var _this = _super.call(this, _optionsProvider) || this;\n        _this.request = request;\n        _this.response = response;\n        return _this;\n    }\n    Object.defineProperty(CookieBackendService.prototype, \"cookieString\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.request.cookie || '';\n        },\n        set: /**\n         * @param {?} val\n         * @return {?}\n         */ function (val) {\n            this.request.cookie = val;\n            this.response.cookie = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CookieBackendService;\n}(CookieService));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @param {?} cookieOptionsProvider\n * @return {?}\n */\nfunction cookieServiceFactory(cookieOptionsProvider) {\n    return new CookieService(cookieOptionsProvider);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar CookieModule = /** @class */ /*@__PURE__*/ (function () {\n    function CookieModule() {\n    }\n    /**\n     * Use this method in your root module to provide the CookieService\n     */\n    /**\n     * Use this method in your root module to provide the CookieService\n     * @param {?=} options\n     * @return {?}\n     */\n    CookieModule.forRoot = /**\n     * Use this method in your root module to provide the CookieService\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return {\n                ngModule: CookieModule,\n                providers: [\n                    { provide: COOKIE_OPTIONS, useValue: options },\n                    { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }\n                ]\n            };\n        };\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} options\n     * @return {?}\n     */\n    CookieModule.forChild = /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     * @param {?=} options\n     * @return {?}\n     */\n        function (options) {\n            if (options === void 0) {\n                options = {};\n            }\n            return {\n                ngModule: CookieModule,\n                providers: [\n                    { provide: COOKIE_OPTIONS, useValue: options },\n                    { provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider] }\n                ]\n            };\n        };\n    return CookieModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nexport { CookieService, CookieBackendService, COOKIE_OPTIONS, CookieOptionsProvider, cookieServiceFactory, isBlank, isPresent, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse, CookieModule };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}