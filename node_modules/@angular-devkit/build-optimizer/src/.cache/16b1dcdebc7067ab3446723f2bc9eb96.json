{"remainingRequest":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\agm-direction\\fesm5\\agm-direction.js","dependencies":[{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\agm-direction\\fesm5\\agm-direction.js","mtime":499162500000},{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552651994000},{"path":"C:\\Users\\Raghuram\\Desktop\\slug mobile\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1552651994000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_agm_core PURE_IMPORTS_END */\nimport { Directive, Input, Output, EventEmitter, NgModule } from '@angular/core';\nimport { GoogleMapsAPIWrapper } from '@agm/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AgmDirection = /** @class */ /*@__PURE__*/ (function () {\n    function AgmDirection(gmapsApi) {\n        this.gmapsApi = gmapsApi;\n        // Options\n        this.travelMode = 'DRIVING';\n        this.transitOptions = undefined;\n        this.drivingOptions = undefined;\n        this.waypoints = [];\n        this.optimizeWaypoints = true;\n        this.provideRouteAlternatives = false;\n        this.avoidHighways = false;\n        this.avoidTolls = false;\n        // Remove or draw direction\n        this.visible = true;\n        // Direction change event handler\n        this.onChange = new EventEmitter();\n        // Direction response for the new request\n        this.onResponse = new EventEmitter();\n        // Send a custom infowindow\n        this.sendInfoWindow = new EventEmitter();\n        // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\n        this.status = new EventEmitter();\n        // Marker drag event handler\n        this.originDrag = new EventEmitter();\n        this.destinationDrag = new EventEmitter();\n        this.directionsService = undefined;\n        this.directionsDisplay = undefined;\n        this.waypointsMarker = [];\n        // Use for visible flag\n        this.isFirstChange = true;\n    }\n    /**\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (this.visible === true) {\n                this.directionDraw();\n            }\n        };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnChanges = /**\n     * @param {?} obj\n     * @return {?}\n     */\n        function (obj) {\n            /**\n             * When visible is false then remove the direction layer\n             */\n            if (!this.visible) {\n                try {\n                    this.removeMarkers();\n                    this.removeDirections();\n                }\n                catch (e) { }\n            }\n            else {\n                if (this.isFirstChange) {\n                    /**\n                     * When visible is false at the first time\n                     */\n                    if (typeof this.directionsDisplay === 'undefined') {\n                        this.directionDraw();\n                    }\n                    this.isFirstChange = false;\n                    return;\n                }\n                /**\n                 * When renderOptions are not first change then reset the display\n                 */\n                if (typeof obj.renderOptions !== 'undefined') {\n                    if (obj.renderOptions.firstChange === false) {\n                        this.removeMarkers();\n                        this.removeDirections();\n                    }\n                }\n                this.directionDraw();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    AgmDirection.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this.destroyMarkers();\n            this.removeDirections();\n        };\n    /**\n     * This event is fired when the user creating or updating this direction\n     */\n    /**\n     * This event is fired when the user creating or updating this direction\n     * @return {?}\n     */\n    AgmDirection.prototype.directionDraw = /**\n     * This event is fired when the user creating or updating this direction\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.gmapsApi.getNativeMap().then(function (map) {\n                if (typeof _this.directionsDisplay === 'undefined') {\n                    _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);\n                    _this.directionsDisplay.setMap(map);\n                    _this.directionsDisplay.addListener('directions_changed', function () {\n                        _this.onChange.emit(_this.directionsDisplay.getDirections());\n                    });\n                }\n                if (typeof _this.directionsService === 'undefined') {\n                    _this.directionsService = new google.maps.DirectionsService;\n                }\n                if (typeof _this.panel === 'undefined') {\n                    _this.directionsDisplay.setPanel(null);\n                }\n                else {\n                    _this.directionsDisplay.setPanel(_this.panel);\n                }\n                // Render exist direction\n                if (typeof _this.renderRoute === 'object' && _this.renderRoute !== null) {\n                    _this.directionsDisplay.setDirections(_this.renderRoute);\n                    _this.renderRoute = null; // or set undefined, ''\n                }\n                else {\n                    // Request new direction\n                    _this.directionsService.route({\n                        origin: _this.origin,\n                        destination: _this.destination,\n                        travelMode: _this.travelMode,\n                        transitOptions: _this.transitOptions,\n                        drivingOptions: _this.drivingOptions,\n                        waypoints: _this.waypoints,\n                        optimizeWaypoints: _this.optimizeWaypoints,\n                        provideRouteAlternatives: _this.provideRouteAlternatives,\n                        avoidHighways: _this.avoidHighways,\n                        avoidTolls: _this.avoidTolls,\n                    }, function (response, status) {\n                        _this.onResponse.emit(response);\n                        // Emit Query Status\n                        _this.status.emit(status);\n                        /**\n                         * DirectionsStatus\n                         * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\n                         */\n                        switch (status) {\n                            case 'OK':\n                                _this.directionsDisplay.setDirections(response);\n                                /**\n                                 * Emit The DirectionsResult Object\n                                 * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\n                                 */\n                                // Custom Markers\n                                if (typeof _this.markerOptions !== 'undefined') {\n                                    _this.destroyMarkers();\n                                    // Set custom markers\n                                    /** @type {?} */\n                                    var _route_1 = response.routes[0].legs[0];\n                                    try {\n                                        // Origin Marker\n                                        if (typeof _this.markerOptions.origin !== 'undefined') {\n                                            _this.markerOptions.origin.map = map;\n                                            _this.markerOptions.origin.position = _route_1.start_location;\n                                            _this.originMarker = _this.setMarker(map, _this.originMarker, _this.markerOptions.origin, _route_1.start_address);\n                                            if (_this.markerOptions.origin.draggable) {\n                                                _this.originMarker.addListener('dragend', function () {\n                                                    _this.origin = _this.originMarker.position;\n                                                    _this.directionDraw();\n                                                    _this.originDrag.emit(_this.origin);\n                                                });\n                                            }\n                                        }\n                                        // Destination Marker\n                                        if (typeof _this.markerOptions.destination !== 'undefined') {\n                                            _this.markerOptions.destination.map = map;\n                                            _this.markerOptions.destination.position = _route_1.end_location;\n                                            _this.destinationMarker = _this.setMarker(map, _this.destinationMarker, _this.markerOptions.destination, _route_1.end_address);\n                                            if (_this.markerOptions.destination.draggable) {\n                                                _this.destinationMarker.addListener('dragend', function () {\n                                                    _this.destination = _this.destinationMarker.position;\n                                                    _this.directionDraw();\n                                                    _this.destinationDrag.emit(_this.destination);\n                                                });\n                                            }\n                                        }\n                                        // Waypoints Marker\n                                        if (typeof _this.markerOptions.waypoints !== 'undefined') {\n                                            _this.waypoints.forEach(function (waypoint, index) {\n                                                // If waypoints are not array then set all the same\n                                                if (!Array.isArray(_this.markerOptions.waypoints)) {\n                                                    _this.markerOptions.waypoints.map = map;\n                                                    _this.markerOptions.waypoints.position = _route_1.via_waypoints[index];\n                                                    _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints, _route_1.via_waypoints[index]));\n                                                }\n                                                else {\n                                                    _this.markerOptions.waypoints[index].map = map;\n                                                    _this.markerOptions.waypoints[index].position = _route_1.via_waypoints[index];\n                                                    _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints[index], _route_1.via_waypoints[index]));\n                                                }\n                                            }); // End forEach\n                                        }\n                                    }\n                                    catch (err) {\n                                        console.error('MarkerOptions error.', err);\n                                    }\n                                }\n                                break;\n                            default:\n                                // console.warn(status);\n                                break;\n                        } // End switch\n                    });\n                }\n            });\n        };\n    /**\n     * Custom Origin and Destination Icon\n     * @param map map\n     * @param marker marker\n     * @param markerOpts properties\n     * @param content marker's infowindow content\n     * @returns new marker\n     * @memberof AgmDirection\n     */\n    /**\n     * Custom Origin and Destination Icon\n     * \\@memberof AgmDirection\n     * @param {?} map map\n     * @param {?} marker marker\n     * @param {?} markerOpts properties\n     * @param {?} content marker's infowindow content\n     * @return {?} new marker\n     */\n    AgmDirection.prototype.setMarker = /**\n     * Custom Origin and Destination Icon\n     * \\@memberof AgmDirection\n     * @param {?} map map\n     * @param {?} marker marker\n     * @param {?} markerOpts properties\n     * @param {?} content marker's infowindow content\n     * @return {?} new marker\n     */\n        function (map, marker, markerOpts, content) {\n            var _this = this;\n            if (typeof this.infoWindow === 'undefined') {\n                this.infoWindow = new google.maps.InfoWindow({});\n                this.sendInfoWindow.emit(this.infoWindow);\n            }\n            marker = new google.maps.Marker(markerOpts);\n            marker.addListener('click', function () {\n                /** @type {?} */\n                var infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\n                _this.infoWindow.setContent(infowindoContent);\n                _this.infoWindow.open(map, marker);\n            });\n            return marker;\n        };\n    /**\n     * This event is fired when remove markers\n     */\n    /**\n     * This event is fired when remove markers\n     * @return {?}\n     */\n    AgmDirection.prototype.removeMarkers = /**\n     * This event is fired when remove markers\n     * @return {?}\n     */\n        function () {\n            if (typeof this.originMarker !== 'undefined') {\n                this.originMarker.setMap(null);\n            }\n            if (typeof this.destinationMarker !== 'undefined') {\n                this.destinationMarker.setMap(null);\n            }\n            this.waypointsMarker.forEach(function (w) {\n                if (typeof w !== 'undefined') {\n                    w.setMap(null);\n                }\n            });\n        };\n    /**\n     * This event is fired when remove directions\n     */\n    /**\n     * This event is fired when remove directions\n     * @return {?}\n     */\n    AgmDirection.prototype.removeDirections = /**\n     * This event is fired when remove directions\n     * @return {?}\n     */\n        function () {\n            this.directionsDisplay.setPanel(null);\n            this.directionsDisplay.setMap(null);\n            this.directionsDisplay = undefined;\n        };\n    /**\n     * This event is fired when destroy markers\n     */\n    /**\n     * This event is fired when destroy markers\n     * @return {?}\n     */\n    AgmDirection.prototype.destroyMarkers = /**\n     * This event is fired when destroy markers\n     * @return {?}\n     */\n        function () {\n            // Remove origin markers\n            try {\n                if (typeof this.originMarker !== 'undefined') {\n                    google.maps.event.clearListeners(this.originMarker, 'click');\n                    if (this.markerOptions.origin.draggable) {\n                        google.maps.event.clearListeners(this.originMarker, 'dragend');\n                    }\n                }\n                if (typeof this.destinationMarker !== 'undefined') {\n                    google.maps.event.clearListeners(this.destinationMarker, 'click');\n                    if (this.markerOptions.origin.draggable) {\n                        google.maps.event.clearListeners(this.destinationMarker, 'dragend');\n                    }\n                }\n                this.waypointsMarker.forEach(function (w) {\n                    if (typeof w !== 'undefined') {\n                        google.maps.event.clearListeners(w, 'click');\n                    }\n                });\n                this.removeMarkers();\n            }\n            catch (err) {\n                console.error('Can not reset custom marker.', err);\n            }\n        };\n    return AgmDirection;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar AgmDirectionModule = /** @class */ /*@__PURE__*/ (function () {\n    function AgmDirectionModule() {\n    }\n    /**\n     * @return {?}\n     */\n    AgmDirectionModule.forRoot = /**\n     * @return {?}\n     */\n        function () {\n            return {\n                ngModule: AgmDirectionModule,\n            };\n        };\n    return AgmDirectionModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { AgmDirectionModule, AgmDirection as ɵa };\n//# sourceMappingURL=agm-direction.js.map\n",null]}